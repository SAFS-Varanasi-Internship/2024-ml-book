[
  {
    "objectID": "team.html#organizers-and-instructors",
    "href": "team.html#organizers-and-instructors",
    "title": "Our Team",
    "section": "Organizers and Instructors",
    "text": "Organizers and Instructors\n\n\nDr. Eli Holmes\n\n\nNOAA Fisheries and University of Washington, Seattle, USA.\nwebpage • GitHub • ORCID\n\n\nDr. Nimit Kumar\n\n\nIndian National Centre for Ocean Information Services (INCOIS), Hyderabad, India\nLinks: webpage • ORCID\n\n\nAditi Modi\n\nCentre for Climate Change Research, Indian Institute of Tropical Meteorology, Pune, India\nwebpage • GitHub • ORCID\n\n\nDr. Smitha BR\n\nCentre for Marine Living Resources & Ecology, Kochi, India\nwebpage • ORCID\n\n\n\n\nDr. Swarnali Majumder\n\nIndian National Centre for Ocean Information Services, Hyderabad, India\nwebpage • ORCID\n\n\nDr. TVS Uday Bhaskar\n\nIndian National Centre for Ocean Information Services, Hyderabad, India\nResearchGate • ORCID\n\n\nDr. Sourav Maity\n\nIndian National Centre for Ocean Information Services, Hyderabad, India\nResearchGate • ORCID"
  },
  {
    "objectID": "team.html#speakers",
    "href": "team.html#speakers",
    "title": "Our Team",
    "section": "Speakers",
    "text": "Speakers\n\n\nJohnny Konjarla\n\nCentre for Marine Living Resources & Ecology, Kochi, India\nwebpage • Linkedin • ORCID\n\n\nMyranda Shirk\n\nSenior Data Scientist, Vanderbilt University Data Science Institute\nLinkedin\n\n\nDr. Ben Best\n\nEcoQuants.com, Santa Barbara, CA\nwebpage • GitHub • ORCID\n\n\nMinh Phan\n\nApplied & Computational Mathematical Sciences, University of Washington, Seattle WA, USA\nGitHub • Linkedin\n\n\n\n\nDr. Sanitha K. Sivadas\n\nNational Centre for Coastal Research, Chennai, India\nOcean Expert • ORCID\n\n\nJiarui Yu\n\nApplied & Computational Mathematical Sciences, University of Washington, Seattle WA, USA\nGitHub • Linkedin"
  },
  {
    "objectID": "team.html#virtual-helpers",
    "href": "team.html#virtual-helpers",
    "title": "Our Team",
    "section": "Virtual Helpers",
    "text": "Virtual Helpers\n\n\nBen Tupper\n\nTandy Center for Ocean Forecasting, Bigelow Laboratory for Ocean Sciences, East Boothbay, Maine, USA.\nResearchGate\n\n\nDr. Julie Lowndes\n\nOpenscapes, Santa Barbara, California, USA\nWebsite • ORCID\n\n\nAdam Kemberling\n\nGulf of Maine Research Institute, Portland, Maine, USA.\nWebsite\n\n\nDr. Rachael Blake\n\nDirector of Data Science, Intertidal Agency, USA.\nWebsite • ORCID\n\n\n\n\nSuman Shekhar\n\nRutgers University, New Brunswick, NJ, USA.\nWebsite • GitHub\n\n\nSeungyeon Jade Hong\n\nGitHub"
  },
  {
    "objectID": "overview.html",
    "href": "overview.html",
    "title": "Overview",
    "section": "",
    "text": "The the era of big data in the earth sciences is here and learning how to effectively use oceanographic remote-sensing data, both in the cloud and on your computer, is a core skill for modern fisheries science and management. Learning how to access cloud-based data, visualize these data, use these data in models, and use the tools of modern reproducible and collaborative science is the main goal of this course. Through the course, participants will gain experience with assessing remote-sensing data in the cloud, R and RStudio, and collaborating with Git and GitHub. Python users: Python is also very heavily used in big data geosciences. The course tutorials will focus on R, however you are welcome to use Python during the course if you are more comfortable with that."
  },
  {
    "objectID": "overview.html#hackweek-focus-species-distribution-modelling",
    "href": "overview.html#hackweek-focus-species-distribution-modelling",
    "title": "Overview",
    "section": "Hackweek focus: species distribution modelling",
    "text": "Hackweek focus: species distribution modelling\nIn depth understanding of machine learning for species (macrofauna) distribution modelling (SDM) is needed by many young ecosystem researchers. SDMs are an important class of models used to understand species association with the environment. SDMs are widely used to understand how species distributions are changing with ocean climate change and are also used to estimate abundance over large ocean regions from fisheries survey data. This course is devised to familiarize the young professionals in the Indian Ocean-rim (IOR) countries with the latest developments in this field.\nThis course does not aim to teach ecology and habitat to the oceanographers/modellers/machine learning experts, rather it aims to teach machine learning and coding (and its relevance to fisheries) to fishery professionals."
  },
  {
    "objectID": "overview.html#aims-and-objectives",
    "href": "overview.html#aims-and-objectives",
    "title": "Overview",
    "section": "Aims and Objectives",
    "text": "Aims and Objectives\n\nLearn how to discover and use oceanographic remote-sensing data for species distribution modeling and other fisheries applications\nFamiliarize participants with using remote-sensing data in R within models. Note participants who are more familiar with Python are welcome to use Python also.\nIntroduce the participants to machine learning models used in species distribution modelling.\nObtain hands-on experience in using species distribution modelling and machine-learning with remote-sensing data.\nWork on a group project using species distribution modelling to estimate habitat associations or obtain a stock estimate using a species distribution model.\n\nNote, there are many ways that participants can study aspects of species distribution using remote-sensing data. During the hackweek portion of the course, participants will jointly develop project to work on and in order to learn by diving into a specific project. Species location data will not be specifically required in order to engage in the projects."
  },
  {
    "objectID": "overview.html#what-is-a-hackweek",
    "href": "overview.html#what-is-a-hackweek",
    "title": "Overview",
    "section": "What is a hackweek?",
    "text": "What is a hackweek?\nA hackweek is a participant-driven workshop that blends data science education, community building, and project work over a short period of time (one to two weeks). The events are highly immersive and allow participants to work directly with data science professionals to co-shape projects and educational outcomes. Hackweeks help individuals and teams engage more effectively in open and reproducible science. - eScience Institute, University of Washington, Seattle USA\nThe hackweek model has become a vital tool in the data science community, fostering idea exchange through modern data analysis workflow training. Unlike traditional academic events, hackweeks offer intensive, interactive learning, including tutorials on cutting-edge methods, peer-based learning, and collaborative on-site projects. Unlike hackathons, which emphasize software development, hackweeks prioritize education and open-ended projects, benefiting fields needing both expertise and efficient computational workflows for idea exchange and discovery. The hackweek model is now widely used in many fields: Astrohackweek, Neurohackweek, Geohackweek, OceanHackWeek, ICESat-2 Hackweek, SnowEx Hackweek, NASA Cloud Hackathon. The ITCOocean Hack2week is modeled off the University of Washington eScience Hackweek model."
  },
  {
    "objectID": "overview.html#what-to-expect",
    "href": "overview.html#what-to-expect",
    "title": "Overview",
    "section": "What to expect",
    "text": "What to expect\n\nDuring the first week of the ITCOocean hack2week, participants will work on learning how to access, visualize and manipulate remote-sensing data in R. Participants will develop familiarity with the R language, with RStudio, and with Git and GitHub for collaboration.\nDuring the second week, participants will begin focusing on species distribution modeling and will work on a team project.\nThe course is an open science event: all tutorials and examples are developed openly and will be publicly available during and following the course. Participants will strengthen their practice of open science, using open source code and collaborating on their projects with course peers.\n\nIn the two to three weeks leading up to the course, participants are encouraged to review background resources that will facilitate a more effective experience."
  },
  {
    "objectID": "overview.html#code-of-conduct",
    "href": "overview.html#code-of-conduct",
    "title": "Overview",
    "section": "Code of Conduct",
    "text": "Code of Conduct\nThe 2023 ITCOocean Hackweek is a safe learning space and all participants are required to abide by our Code of Conduct."
  },
  {
    "objectID": "notebooks-data/04_Appending_Data.html#load-in-data",
    "href": "notebooks-data/04_Appending_Data.html#load-in-data",
    "title": "Adding new data",
    "section": "Load in data",
    "text": "Load in data\n\nog_ds = xr.open_zarr('demonstrated data/final-sample-appending.zarr/')\nnew_ds = xr.open_zarr('demonstrated data/new-data-sample.zarr/')\n\nNote that our new dataset does not have any metadata. As shown in the previous notebooks, metadata is added at the last step, so now we are going to copy all metadata from the original dataset to our new one.",
    "crumbs": [
      "Data Tutorials",
      "Indian Ocean Zarr",
      "Adding new data"
    ]
  },
  {
    "objectID": "notebooks-data/04_Appending_Data.html#add-metadata",
    "href": "notebooks-data/04_Appending_Data.html#add-metadata",
    "title": "Adding new data",
    "section": "Add metadata",
    "text": "Add metadata\n\n# copy dataset metadata\nnew_ds.attrs = og_ds.attrs\n\n# copy variables/dimensions metadata\n# make sure that all vars in new_ds exist in og_ds\nfor var in new_ds.variables:\n    new_ds[var].attrs = og_ds[var].attrs\n\n\n# double-check\nnew_ds\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:          (time: 2556, lat: 81, lon: 81)\nCoordinates:\n  * lat              (lat) float32 25.0 24.75 24.5 24.25 ... 5.75 5.5 5.25 5.0\n  * lon              (lon) float32 60.0 60.25 60.5 60.75 ... 79.5 79.75 80.0\n  * time             (time) datetime64[ns] 1993-01-01 1993-01-02 ... 1999-12-31\nData variables: (12/14)\n    CHL              (time, lat, lon) float32 dask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\n    CHL_uncertainty  (time, lat, lon) float32 dask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\n    adt              (time, lat, lon) float32 dask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\n    air_temp         (time, lat, lon) float32 dask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\n    direction        (time, lat, lon) float32 dask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\n    sla              (time, lat, lon) float32 dask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\n    ...               ...\n    u_curr           (time, lat, lon) float32 dask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\n    u_wind           (time, lat, lon) float32 dask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\n    ug_curr          (time, lat, lon) float32 dask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\n    v_curr           (time, lat, lon) float32 dask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\n    v_wind           (time, lat, lon) float32 dask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\n    vg_curr          (time, lat, lon) float32 dask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\nAttributes: (12/17)\n    creator_email:              minhphan@uw.edu\n    creator_name:               Minh Phan\n    creator_type:               person\n    date_created:               2023-11-11\n    geospatial_lat_max:         25.0\n    geospatial_lat_min:         5.0\n    ...                         ...\n    geospatial_lon_units:       degrees_east\n    source:                     OSCAR, ERA5 Reanalysis, Copernicus Climate Ch...\n    summary:                    Daily mean of 0.25 x 0.25 degrees gridded dat...\n    time_coverage_end:          2002-12-31T23:59:59\n    time_coverage_start:        2000-01-01T00:00:00\n    title:                      Sample of Climate Data for Coastal Upwelling ...xarray.DatasetDimensions:time: 2556lat: 81lon: 81Coordinates: (3)lat(lat)float3225.0 24.75 24.5 ... 5.5 5.25 5.0long_name :latitudestandard_name :latitudeunits :degrees_northarray([25.  , 24.75, 24.5 , 24.25, 24.  , 23.75, 23.5 , 23.25, 23.  , 22.75,\n       22.5 , 22.25, 22.  , 21.75, 21.5 , 21.25, 21.  , 20.75, 20.5 , 20.25,\n       20.  , 19.75, 19.5 , 19.25, 19.  , 18.75, 18.5 , 18.25, 18.  , 17.75,\n       17.5 , 17.25, 17.  , 16.75, 16.5 , 16.25, 16.  , 15.75, 15.5 , 15.25,\n       15.  , 14.75, 14.5 , 14.25, 14.  , 13.75, 13.5 , 13.25, 13.  , 12.75,\n       12.5 , 12.25, 12.  , 11.75, 11.5 , 11.25, 11.  , 10.75, 10.5 , 10.25,\n       10.  ,  9.75,  9.5 ,  9.25,  9.  ,  8.75,  8.5 ,  8.25,  8.  ,  7.75,\n        7.5 ,  7.25,  7.  ,  6.75,  6.5 ,  6.25,  6.  ,  5.75,  5.5 ,  5.25,\n        5.  ], dtype=float32)lon(lon)float3260.0 60.25 60.5 ... 79.5 79.75 80.0long_name :longitudestandard_name :longitudeunits :degrees_eastarray([60.  , 60.25, 60.5 , 60.75, 61.  , 61.25, 61.5 , 61.75, 62.  , 62.25,\n       62.5 , 62.75, 63.  , 63.25, 63.5 , 63.75, 64.  , 64.25, 64.5 , 64.75,\n       65.  , 65.25, 65.5 , 65.75, 66.  , 66.25, 66.5 , 66.75, 67.  , 67.25,\n       67.5 , 67.75, 68.  , 68.25, 68.5 , 68.75, 69.  , 69.25, 69.5 , 69.75,\n       70.  , 70.25, 70.5 , 70.75, 71.  , 71.25, 71.5 , 71.75, 72.  , 72.25,\n       72.5 , 72.75, 73.  , 73.25, 73.5 , 73.75, 74.  , 74.25, 74.5 , 74.75,\n       75.  , 75.25, 75.5 , 75.75, 76.  , 76.25, 76.5 , 76.75, 77.  , 77.25,\n       77.5 , 77.75, 78.  , 78.25, 78.5 , 78.75, 79.  , 79.25, 79.5 , 79.75,\n       80.  ], dtype=float32)time(time)datetime64[ns]1993-01-01 ... 1999-12-31_ChunkSizes :1_CoordinateAxisType :Timeaxis :Tcoverage_content_type :coordinatelong_name :reference timestandard_name :timevalid_max :401767.0valid_min :0.0array(['1993-01-01T00:00:00.000000000', '1993-01-02T00:00:00.000000000',\n       '1993-01-03T00:00:00.000000000', ..., '1999-12-29T00:00:00.000000000',\n       '1999-12-30T00:00:00.000000000', '1999-12-31T00:00:00.000000000'],\n      dtype='datetime64[ns]')Data variables: (14)CHL(time, lat, lon)float32dask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;_ChunkSizes :[1, 256, 256]ancillary_variables :flags CHL_uncertaintycoverage_content_type :modelResultinput_files_reprocessings :Processors versions: MODIS R2022.0NRT/VIIRSN R2022.0NRT/OLCIA 07.02/VIIRSJ1 R2022.0NRT/OLCIB 07.02long_name :Chlorophyll-a concentration - Mean of the binned pixelsstandard_name :mass_concentration_of_chlorophyll_a_in_sea_watertype :surfaceunits :milligram m-3valid_max :1000.0valid_min :0.0\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n63.97 MiB\n2.50 MiB\n\n\nShape\n(2556, 81, 81)\n(100, 81, 81)\n\n\nDask graph\n26 chunks in 2 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\nCHL_uncertainty\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\n\n\n\n\n_ChunkSizes :\n\n[1, 256, 256]\n\ncoverage_content_type :\n\nqualityInformation\n\nlong_name :\n\nChlorophyll-a concentration - Uncertainty estimation\n\nunits :\n\n%\n\nvalid_max :\n\n32767\n\nvalid_min :\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n63.97 MiB\n2.50 MiB\n\n\nShape\n(2556, 81, 81)\n(100, 81, 81)\n\n\nDask graph\n26 chunks in 2 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nadt\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\n\n\n\n\n_ChunkSizes :\n\n[1, 50, 50]\n\ncomment :\n\nThe absolute dynamic topography is the sea surface height above geoid; the adt is obtained as follows: adt=sla+mdt where mdt is the mean dynamic topography; see the product user manual for details\n\ngrid_mapping :\n\ncrs\n\nlong_name :\n\nAbsolute dynamic topography\n\nstandard_name :\n\nsea_surface_height_above_geoid\n\nunits :\n\nm\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n63.97 MiB\n2.50 MiB\n\n\nShape\n(2556, 81, 81)\n(100, 81, 81)\n\n\nDask graph\n26 chunks in 2 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nair_temp\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n2 metre temperature\n\nnameCDM :\n\n2_metre_temperature_surface\n\nnameECMWF :\n\n2 metre temperature\n\nproduct_type :\n\nanalysis\n\nshortNameECMWF :\n\n2t\n\nstandard_name :\n\nair_temperature\n\nunits :\n\nK\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n63.97 MiB\n2.50 MiB\n\n\nShape\n(2556, 81, 81)\n(100, 81, 81)\n\n\nDask graph\n26 chunks in 2 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\ndirection\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n10 metre wind direction\n\nunits :\n\n°C\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n63.97 MiB\n2.50 MiB\n\n\nShape\n(2556, 81, 81)\n(100, 81, 81)\n\n\nDask graph\n26 chunks in 2 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nsla\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\n\n\n\n\n_ChunkSizes :\n\n[1, 50, 50]\n\nancillary_variables :\n\nerr_sla\n\ncomment :\n\nThe sea level anomaly is the sea surface height above mean sea surface; it is referenced to the [1993, 2012] period; see the product user manual for details\n\ngrid_mapping :\n\ncrs\n\nlong_name :\n\nSea level anomaly\n\nstandard_name :\n\nsea_surface_height_above_sea_level\n\nunits :\n\nm\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n63.97 MiB\n2.50 MiB\n\n\nShape\n(2556, 81, 81)\n(100, 81, 81)\n\n\nDask graph\n26 chunks in 2 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nspeed\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n10 metre absolute speed\n\nunits :\n\nm s**-1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n63.97 MiB\n2.50 MiB\n\n\nShape\n(2556, 81, 81)\n(100, 81, 81)\n\n\nDask graph\n26 chunks in 2 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nsst\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\nSea surface temperature\n\nnameCDM :\n\nSea_surface_temperature_surface\n\nnameECMWF :\n\nSea surface temperature\n\nproduct_type :\n\nanalysis\n\nshortNameECMWF :\n\nsst\n\nstandard_name :\n\nsea_surface_temperature\n\nunits :\n\nK\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n63.97 MiB\n2.50 MiB\n\n\nShape\n(2556, 81, 81)\n(100, 81, 81)\n\n\nDask graph\n26 chunks in 2 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nu_curr\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nVelocities are an average over the top 30m of the mixed layer\n\ncoverage_content_type :\n\nmodelResult\n\ndepth :\n\n15m\n\nlong_name :\n\nzonal total surface current\n\nsource :\n\nSSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148 ; WIND source: ECMWF ERA5 10m wind DOI: 10.24381/cds.adbb2d47 ; SST source: CMC 0.2 deg SST V2.0 DOI: 10.5067/GHCMC-4FM02\n\nstandard_name :\n\neastward_sea_water_velocity\n\nunits :\n\nm s-1\n\nvalid_max :\n\n3.0\n\nvalid_min :\n\n-3.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n63.97 MiB\n2.50 MiB\n\n\nShape\n(2556, 81, 81)\n(100, 81, 81)\n\n\nDask graph\n26 chunks in 2 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nu_wind\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n10 metre U wind component\n\nnameCDM :\n\n10_metre_U_wind_component_surface\n\nnameECMWF :\n\n10 metre U wind component\n\nproduct_type :\n\nanalysis\n\nshortNameECMWF :\n\n10u\n\nstandard_name :\n\neastward_wind\n\nunits :\n\nm s**-1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n63.97 MiB\n2.50 MiB\n\n\nShape\n(2556, 81, 81)\n(100, 81, 81)\n\n\nDask graph\n26 chunks in 2 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nug_curr\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nGeostrophic velocities calculated from absolute dynamic topography\n\ndepth :\n\n15m\n\nlong_name :\n\nzonal geostrophic surface current\n\nsource :\n\nSSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148\n\nstandard_name :\n\ngeostrophic_eastward_sea_water_velocity\n\nunits :\n\nm s-1\n\nvalid_max :\n\n3.0\n\nvalid_min :\n\n-3.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n63.97 MiB\n2.50 MiB\n\n\nShape\n(2556, 81, 81)\n(100, 81, 81)\n\n\nDask graph\n26 chunks in 2 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nv_curr\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nVelocities are an average over the top 30m of the mixed layer\n\ncoverage_content_type :\n\nmodelResult\n\ndepth :\n\n15m\n\nlong_name :\n\nmeridional total surface current\n\nsource :\n\nSSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148 ; WIND source: ECMWF ERA5 10m wind DOI: 10.24381/cds.adbb2d47 ; SST source: CMC 0.2 deg SST V2.0 DOI: 10.5067/GHCMC-4FM02\n\nstandard_name :\n\nnorthward_sea_water_velocity\n\nunits :\n\nm s-1\n\nvalid_max :\n\n3.0\n\nvalid_min :\n\n-3.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n63.97 MiB\n2.50 MiB\n\n\nShape\n(2556, 81, 81)\n(100, 81, 81)\n\n\nDask graph\n26 chunks in 2 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nv_wind\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n10 metre V wind component\n\nnameCDM :\n\n10_metre_V_wind_component_surface\n\nnameECMWF :\n\n10 metre V wind component\n\nproduct_type :\n\nanalysis\n\nshortNameECMWF :\n\n10v\n\nstandard_name :\n\nnorthward_wind\n\nunits :\n\nm s**-1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n63.97 MiB\n2.50 MiB\n\n\nShape\n(2556, 81, 81)\n(100, 81, 81)\n\n\nDask graph\n26 chunks in 2 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nvg_curr\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nGeostrophic velocities calculated from absolute dynamic topography\n\ndepth :\n\n15m\n\nlong_name :\n\nmeridional geostrophic surface current\n\nsource :\n\nSSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148\n\nstandard_name :\n\ngeostrophic_northward_sea_water_velocity\n\nunits :\n\nm s-1\n\nvalid_max :\n\n3.0\n\nvalid_min :\n\n-3.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n63.97 MiB\n2.50 MiB\n\n\nShape\n(2556, 81, 81)\n(100, 81, 81)\n\n\nDask graph\n26 chunks in 2 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\nAttributes: (17)creator_email :minhphan@uw.educreator_name :Minh Phancreator_type :persondate_created :2023-11-11geospatial_lat_max :25.0geospatial_lat_min :5.0geospatial_lat_resolution :0.25geospatial_lat_units :degrees_northgeospatial_lon_max :80.0geospatial_lon_min :60.0geospatial_lon_resolution :0.25geospatial_lon_units :degrees_eastsource :OSCAR, ERA5 Reanalysis, Copernicus Climate Change Service (C3S), Copernicus Marine Environment Monitoring Service (CMEMS)summary :Daily mean of 0.25 x 0.25 degrees gridded data from multiple climate variables that may influence the patterns of coastal upwelling in the focused areatime_coverage_end :2002-12-31T23:59:59time_coverage_start :2000-01-01T00:00:00title :Sample of Climate Data for Coastal Upwelling Machine Learning Project in Indian Ocean",
    "crumbs": [
      "Data Tutorials",
      "Indian Ocean Zarr",
      "Adding new data"
    ]
  },
  {
    "objectID": "notebooks-data/04_Appending_Data.html#appending-data",
    "href": "notebooks-data/04_Appending_Data.html#appending-data",
    "title": "Adding new data",
    "section": "Appending data",
    "text": "Appending data\n\nnew_ds.to_zarr('demonstrated data/final-sample-appending.zarr/', append_dim='time', mode='a')\n\n&lt;xarray.backends.zarr.ZarrStore at 0x7f1455c51dd0&gt;",
    "crumbs": [
      "Data Tutorials",
      "Indian Ocean Zarr",
      "Adding new data"
    ]
  },
  {
    "objectID": "notebooks-data/04_Appending_Data.html#final-result",
    "href": "notebooks-data/04_Appending_Data.html#final-result",
    "title": "Adding new data",
    "section": "Final result",
    "text": "Final result\n\nxr.open_zarr('demonstrated data/final-sample-appending.zarr/')\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:          (time: 3287, lat: 81, lon: 81)\nCoordinates:\n  * lat              (lat) float32 25.0 24.75 24.5 24.25 ... 5.75 5.5 5.25 5.0\n  * lon              (lon) float32 60.0 60.25 60.5 60.75 ... 79.5 79.75 80.0\n  * time             (time) datetime64[ns] 2000-01-01 2000-01-02 ... 1999-12-31\nData variables: (12/14)\n    CHL              (time, lat, lon) float32 dask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\n    CHL_uncertainty  (time, lat, lon) float32 dask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\n    adt              (time, lat, lon) float32 dask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\n    air_temp         (time, lat, lon) float32 dask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\n    direction        (time, lat, lon) float32 dask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\n    sla              (time, lat, lon) float32 dask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\n    ...               ...\n    u_curr           (time, lat, lon) float32 dask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\n    u_wind           (time, lat, lon) float32 dask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\n    ug_curr          (time, lat, lon) float32 dask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\n    v_curr           (time, lat, lon) float32 dask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\n    v_wind           (time, lat, lon) float32 dask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\n    vg_curr          (time, lat, lon) float32 dask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\nAttributes: (12/17)\n    creator_email:              minhphan@uw.edu\n    creator_name:               Minh Phan\n    creator_type:               person\n    date_created:               2023-11-11\n    geospatial_lat_max:         25.0\n    geospatial_lat_min:         5.0\n    ...                         ...\n    geospatial_lon_units:       degrees_east\n    source:                     OSCAR, ERA5 Reanalysis, Copernicus Climate Ch...\n    summary:                    Daily mean of 0.25 x 0.25 degrees gridded dat...\n    time_coverage_end:          2002-12-31T23:59:59\n    time_coverage_start:        2000-01-01T00:00:00\n    title:                      Sample of Climate Data for Coastal Upwelling ...xarray.DatasetDimensions:time: 3287lat: 81lon: 81Coordinates: (3)lat(lat)float3225.0 24.75 24.5 ... 5.5 5.25 5.0long_name :latitudestandard_name :latitudeunits :degrees_northarray([25.  , 24.75, 24.5 , 24.25, 24.  , 23.75, 23.5 , 23.25, 23.  , 22.75,\n       22.5 , 22.25, 22.  , 21.75, 21.5 , 21.25, 21.  , 20.75, 20.5 , 20.25,\n       20.  , 19.75, 19.5 , 19.25, 19.  , 18.75, 18.5 , 18.25, 18.  , 17.75,\n       17.5 , 17.25, 17.  , 16.75, 16.5 , 16.25, 16.  , 15.75, 15.5 , 15.25,\n       15.  , 14.75, 14.5 , 14.25, 14.  , 13.75, 13.5 , 13.25, 13.  , 12.75,\n       12.5 , 12.25, 12.  , 11.75, 11.5 , 11.25, 11.  , 10.75, 10.5 , 10.25,\n       10.  ,  9.75,  9.5 ,  9.25,  9.  ,  8.75,  8.5 ,  8.25,  8.  ,  7.75,\n        7.5 ,  7.25,  7.  ,  6.75,  6.5 ,  6.25,  6.  ,  5.75,  5.5 ,  5.25,\n        5.  ], dtype=float32)lon(lon)float3260.0 60.25 60.5 ... 79.5 79.75 80.0long_name :longitudestandard_name :longitudeunits :degrees_eastarray([60.  , 60.25, 60.5 , 60.75, 61.  , 61.25, 61.5 , 61.75, 62.  , 62.25,\n       62.5 , 62.75, 63.  , 63.25, 63.5 , 63.75, 64.  , 64.25, 64.5 , 64.75,\n       65.  , 65.25, 65.5 , 65.75, 66.  , 66.25, 66.5 , 66.75, 67.  , 67.25,\n       67.5 , 67.75, 68.  , 68.25, 68.5 , 68.75, 69.  , 69.25, 69.5 , 69.75,\n       70.  , 70.25, 70.5 , 70.75, 71.  , 71.25, 71.5 , 71.75, 72.  , 72.25,\n       72.5 , 72.75, 73.  , 73.25, 73.5 , 73.75, 74.  , 74.25, 74.5 , 74.75,\n       75.  , 75.25, 75.5 , 75.75, 76.  , 76.25, 76.5 , 76.75, 77.  , 77.25,\n       77.5 , 77.75, 78.  , 78.25, 78.5 , 78.75, 79.  , 79.25, 79.5 , 79.75,\n       80.  ], dtype=float32)time(time)datetime64[ns]2000-01-01 ... 1999-12-31_ChunkSizes :1_CoordinateAxisType :Timeaxis :Tcoverage_content_type :coordinatelong_name :reference timestandard_name :timevalid_max :401767.0valid_min :0.0array(['2000-01-01T00:00:00.000000000', '2000-01-02T00:00:00.000000000',\n       '2000-01-03T00:00:00.000000000', ..., '1999-12-29T00:00:00.000000000',\n       '1999-12-30T00:00:00.000000000', '1999-12-31T00:00:00.000000000'],\n      dtype='datetime64[ns]')Data variables: (14)CHL(time, lat, lon)float32dask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;_ChunkSizes :[1, 256, 256]ancillary_variables :flags CHL_uncertaintycoverage_content_type :modelResultinput_files_reprocessings :Processors versions: MODIS R2022.0NRT/VIIRSN R2022.0NRT/OLCIA 07.02/VIIRSJ1 R2022.0NRT/OLCIB 07.02long_name :Chlorophyll-a concentration - Mean of the binned pixelsstandard_name :mass_concentration_of_chlorophyll_a_in_sea_watertype :surfaceunits :milligram m-3valid_max :1000.0valid_min :0.0\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n82.27 MiB\n2.50 MiB\n\n\nShape\n(3287, 81, 81)\n(100, 81, 81)\n\n\nDask graph\n33 chunks in 2 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\nCHL_uncertainty\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\n\n\n\n\n_ChunkSizes :\n\n[1, 256, 256]\n\ncoverage_content_type :\n\nqualityInformation\n\nlong_name :\n\nChlorophyll-a concentration - Uncertainty estimation\n\nunits :\n\n%\n\nvalid_max :\n\n32767\n\nvalid_min :\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n82.27 MiB\n2.50 MiB\n\n\nShape\n(3287, 81, 81)\n(100, 81, 81)\n\n\nDask graph\n33 chunks in 2 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nadt\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\n\n\n\n\n_ChunkSizes :\n\n[1, 50, 50]\n\ncomment :\n\nThe absolute dynamic topography is the sea surface height above geoid; the adt is obtained as follows: adt=sla+mdt where mdt is the mean dynamic topography; see the product user manual for details\n\ngrid_mapping :\n\ncrs\n\nlong_name :\n\nAbsolute dynamic topography\n\nstandard_name :\n\nsea_surface_height_above_geoid\n\nunits :\n\nm\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n82.27 MiB\n2.50 MiB\n\n\nShape\n(3287, 81, 81)\n(100, 81, 81)\n\n\nDask graph\n33 chunks in 2 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nair_temp\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n2 metre temperature\n\nnameCDM :\n\n2_metre_temperature_surface\n\nnameECMWF :\n\n2 metre temperature\n\nproduct_type :\n\nanalysis\n\nshortNameECMWF :\n\n2t\n\nstandard_name :\n\nair_temperature\n\nunits :\n\nK\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n82.27 MiB\n2.50 MiB\n\n\nShape\n(3287, 81, 81)\n(100, 81, 81)\n\n\nDask graph\n33 chunks in 2 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\ndirection\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n10 metre wind direction\n\nunits :\n\n°C\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n82.27 MiB\n2.50 MiB\n\n\nShape\n(3287, 81, 81)\n(100, 81, 81)\n\n\nDask graph\n33 chunks in 2 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nsla\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\n\n\n\n\n_ChunkSizes :\n\n[1, 50, 50]\n\nancillary_variables :\n\nerr_sla\n\ncomment :\n\nThe sea level anomaly is the sea surface height above mean sea surface; it is referenced to the [1993, 2012] period; see the product user manual for details\n\ngrid_mapping :\n\ncrs\n\nlong_name :\n\nSea level anomaly\n\nstandard_name :\n\nsea_surface_height_above_sea_level\n\nunits :\n\nm\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n82.27 MiB\n2.50 MiB\n\n\nShape\n(3287, 81, 81)\n(100, 81, 81)\n\n\nDask graph\n33 chunks in 2 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nspeed\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n10 metre absolute speed\n\nunits :\n\nm s**-1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n82.27 MiB\n2.50 MiB\n\n\nShape\n(3287, 81, 81)\n(100, 81, 81)\n\n\nDask graph\n33 chunks in 2 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nsst\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\nSea surface temperature\n\nnameCDM :\n\nSea_surface_temperature_surface\n\nnameECMWF :\n\nSea surface temperature\n\nproduct_type :\n\nanalysis\n\nshortNameECMWF :\n\nsst\n\nstandard_name :\n\nsea_surface_temperature\n\nunits :\n\nK\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n82.27 MiB\n2.50 MiB\n\n\nShape\n(3287, 81, 81)\n(100, 81, 81)\n\n\nDask graph\n33 chunks in 2 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nu_curr\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nVelocities are an average over the top 30m of the mixed layer\n\ncoverage_content_type :\n\nmodelResult\n\ndepth :\n\n15m\n\nlong_name :\n\nzonal total surface current\n\nsource :\n\nSSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148 ; WIND source: ECMWF ERA5 10m wind DOI: 10.24381/cds.adbb2d47 ; SST source: CMC 0.2 deg SST V2.0 DOI: 10.5067/GHCMC-4FM02\n\nstandard_name :\n\neastward_sea_water_velocity\n\nunits :\n\nm s-1\n\nvalid_max :\n\n3.0\n\nvalid_min :\n\n-3.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n82.27 MiB\n2.50 MiB\n\n\nShape\n(3287, 81, 81)\n(100, 81, 81)\n\n\nDask graph\n33 chunks in 2 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nu_wind\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n10 metre U wind component\n\nnameCDM :\n\n10_metre_U_wind_component_surface\n\nnameECMWF :\n\n10 metre U wind component\n\nproduct_type :\n\nanalysis\n\nshortNameECMWF :\n\n10u\n\nstandard_name :\n\neastward_wind\n\nunits :\n\nm s**-1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n82.27 MiB\n2.50 MiB\n\n\nShape\n(3287, 81, 81)\n(100, 81, 81)\n\n\nDask graph\n33 chunks in 2 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nug_curr\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nGeostrophic velocities calculated from absolute dynamic topography\n\ndepth :\n\n15m\n\nlong_name :\n\nzonal geostrophic surface current\n\nsource :\n\nSSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148\n\nstandard_name :\n\ngeostrophic_eastward_sea_water_velocity\n\nunits :\n\nm s-1\n\nvalid_max :\n\n3.0\n\nvalid_min :\n\n-3.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n82.27 MiB\n2.50 MiB\n\n\nShape\n(3287, 81, 81)\n(100, 81, 81)\n\n\nDask graph\n33 chunks in 2 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nv_curr\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nVelocities are an average over the top 30m of the mixed layer\n\ncoverage_content_type :\n\nmodelResult\n\ndepth :\n\n15m\n\nlong_name :\n\nmeridional total surface current\n\nsource :\n\nSSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148 ; WIND source: ECMWF ERA5 10m wind DOI: 10.24381/cds.adbb2d47 ; SST source: CMC 0.2 deg SST V2.0 DOI: 10.5067/GHCMC-4FM02\n\nstandard_name :\n\nnorthward_sea_water_velocity\n\nunits :\n\nm s-1\n\nvalid_max :\n\n3.0\n\nvalid_min :\n\n-3.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n82.27 MiB\n2.50 MiB\n\n\nShape\n(3287, 81, 81)\n(100, 81, 81)\n\n\nDask graph\n33 chunks in 2 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nv_wind\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n10 metre V wind component\n\nnameCDM :\n\n10_metre_V_wind_component_surface\n\nnameECMWF :\n\n10 metre V wind component\n\nproduct_type :\n\nanalysis\n\nshortNameECMWF :\n\n10v\n\nstandard_name :\n\nnorthward_wind\n\nunits :\n\nm s**-1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n82.27 MiB\n2.50 MiB\n\n\nShape\n(3287, 81, 81)\n(100, 81, 81)\n\n\nDask graph\n33 chunks in 2 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nvg_curr\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nGeostrophic velocities calculated from absolute dynamic topography\n\ndepth :\n\n15m\n\nlong_name :\n\nmeridional geostrophic surface current\n\nsource :\n\nSSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148\n\nstandard_name :\n\ngeostrophic_northward_sea_water_velocity\n\nunits :\n\nm s-1\n\nvalid_max :\n\n3.0\n\nvalid_min :\n\n-3.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n82.27 MiB\n2.50 MiB\n\n\nShape\n(3287, 81, 81)\n(100, 81, 81)\n\n\nDask graph\n33 chunks in 2 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\nAttributes: (17)creator_email :minhphan@uw.educreator_name :Minh Phancreator_type :persondate_created :2023-11-11geospatial_lat_max :25.0geospatial_lat_min :5.0geospatial_lat_resolution :0.25geospatial_lat_units :degrees_northgeospatial_lon_max :80.0geospatial_lon_min :60.0geospatial_lon_resolution :0.25geospatial_lon_units :degrees_eastsource :OSCAR, ERA5 Reanalysis, Copernicus Climate Change Service (C3S), Copernicus Marine Environment Monitoring Service (CMEMS)summary :Daily mean of 0.25 x 0.25 degrees gridded data from multiple climate variables that may influence the patterns of coastal upwelling in the focused areatime_coverage_end :2002-12-31T23:59:59time_coverage_start :2000-01-01T00:00:00title :Sample of Climate Data for Coastal Upwelling Machine Learning Project in Indian Ocean",
    "crumbs": [
      "Data Tutorials",
      "Indian Ocean Zarr",
      "Adding new data"
    ]
  },
  {
    "objectID": "notebooks-data/02_Xarray_hvplot.html#why-do-we-need-xarray",
    "href": "notebooks-data/02_Xarray_hvplot.html#why-do-we-need-xarray",
    "title": "03. Introduction to xarray",
    "section": "Why do we need xarray?",
    "text": "Why do we need xarray?\nAs Geoscientists, we often work with time series of data with two or more dimensions: a time series of calibrated, orthorectified satellite images; two-dimensional grids of surface air temperature from an atmospheric reanalysis; or three-dimensional (level, x, y) cubes of ocean salinity from an ocean model. These data are often provided in GeoTIFF, NetCDF or HDF format with rich and useful metadata that we want to retain, or even use in our analysis. Common analyses include calculating means, standard deviations and anomalies over time or one or more spatial dimensions (e.g. zonal means). Model output often includes multiple variables that you want to apply similar analyses to.\n\n\n\nA schematic of multi-dimensional data\n\n\nThe schematic above shows a typical data structure for multi-dimensional data. There are two data cubes, one for temperature and one for precipitation. Common coordinate variables, in this case latitude, longitude and time are associated with each variable. Each variable, including coordinate variables, will have a set of attributes: name, units, missing value, etc. The file containing the data may also have attributes: source of the data, model name coordinate reference system if the data are projected. Writing code using low-level packages such as netcdf4 and numpy to read the data, then perform analysis, and write the results to file is time consuming and prone to errors.",
    "crumbs": [
      "Data Tutorials",
      "Data viz and use",
      "03. Introduction to `xarray`"
    ]
  },
  {
    "objectID": "notebooks-data/02_Xarray_hvplot.html#what-is-xarray",
    "href": "notebooks-data/02_Xarray_hvplot.html#what-is-xarray",
    "title": "03. Introduction to xarray",
    "section": "What is xarray",
    "text": "What is xarray\nxarray is an open-source project and python package to work with labelled multi-dimensional arrays. It is leverages numpy, pandas, matplotlib and dask to build Dataset and DataArray objects with built-in methods to subset, analyze, interpolate, and plot multi-dimensional data. It makes working with multi-dimensional data cubes efficient and fun. It will change your life for the better. You’ll be more attractive, more interesting, and better equiped to take on lifes challenges.",
    "crumbs": [
      "Data Tutorials",
      "Data viz and use",
      "03. Introduction to `xarray`"
    ]
  },
  {
    "objectID": "notebooks-data/02_Xarray_hvplot.html#what-you-will-learn-from-this-tutorial",
    "href": "notebooks-data/02_Xarray_hvplot.html#what-you-will-learn-from-this-tutorial",
    "title": "03. Introduction to xarray",
    "section": "What you will learn from this tutorial",
    "text": "What you will learn from this tutorial\nIn this tutorial you will learn how to:\n\nload a netcdf file into xarray\ninterrogate the Dataset and understand the difference between DataArray and Dataset\nsubset a Dataset\ncalculate annual and monthly mean fields\ncalculate a time series of zonal means\nplot these results\n\nAs always, we’ll start by importing xarray. We’ll follow convention by giving the module the shortname xr\n\nimport xarray as xr\nxr.set_options(keep_attrs=True)\nimport hvplot.xarray\n\n\n\n\n\n\n\n\n\n\nI’m going to use one of xarray’s tutorial datasets. In this case, air temperature from the NCEP reanalysis. I’ll assign the result of the open_dataset to ds. I may change this to access a dataset directly\n\nds = xr.tutorial.open_dataset(\"air_temperature\")\n\nAs we are in an interactive environment, we can just type ds to see what we have.\n\nds\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:  (lat: 25, time: 2920, lon: 53)\nCoordinates:\n  * lat      (lat) float32 75.0 72.5 70.0 67.5 65.0 ... 25.0 22.5 20.0 17.5 15.0\n  * lon      (lon) float32 200.0 202.5 205.0 207.5 ... 322.5 325.0 327.5 330.0\n  * time     (time) datetime64[ns] 2013-01-01 ... 2014-12-31T18:00:00\nData variables:\n    air      (time, lat, lon) float32 ...\nAttributes:\n    Conventions:  COARDS\n    title:        4x daily NMC reanalysis (1948)\n    description:  Data is from NMC initialized reanalysis\\n(4x/day).  These a...\n    platform:     Model\n    references:   http://www.esrl.noaa.gov/psd/data/gridded/data.ncep.reanaly...xarray.DatasetDimensions:lat: 25time: 2920lon: 53Coordinates: (3)lat(lat)float3275.0 72.5 70.0 ... 20.0 17.5 15.0standard_name :latitudelong_name :Latitudeunits :degrees_northaxis :Yarray([75. , 72.5, 70. , 67.5, 65. , 62.5, 60. , 57.5, 55. , 52.5, 50. , 47.5,\n       45. , 42.5, 40. , 37.5, 35. , 32.5, 30. , 27.5, 25. , 22.5, 20. , 17.5,\n       15. ], dtype=float32)lon(lon)float32200.0 202.5 205.0 ... 327.5 330.0standard_name :longitudelong_name :Longitudeunits :degrees_eastaxis :Xarray([200. , 202.5, 205. , 207.5, 210. , 212.5, 215. , 217.5, 220. , 222.5,\n       225. , 227.5, 230. , 232.5, 235. , 237.5, 240. , 242.5, 245. , 247.5,\n       250. , 252.5, 255. , 257.5, 260. , 262.5, 265. , 267.5, 270. , 272.5,\n       275. , 277.5, 280. , 282.5, 285. , 287.5, 290. , 292.5, 295. , 297.5,\n       300. , 302.5, 305. , 307.5, 310. , 312.5, 315. , 317.5, 320. , 322.5,\n       325. , 327.5, 330. ], dtype=float32)time(time)datetime64[ns]2013-01-01 ... 2014-12-31T18:00:00standard_name :timelong_name :Timearray(['2013-01-01T00:00:00.000000000', '2013-01-01T06:00:00.000000000',\n       '2013-01-01T12:00:00.000000000', ..., '2014-12-31T06:00:00.000000000',\n       '2014-12-31T12:00:00.000000000', '2014-12-31T18:00:00.000000000'],\n      dtype='datetime64[ns]')Data variables: (1)air(time, lat, lon)float32...long_name :4xDaily Air temperature at sigma level 995units :degKprecision :2GRIB_id :11GRIB_name :TMPvar_desc :Air temperaturedataset :NMC Reanalysislevel_desc :Surfacestatistic :Individual Obsparent_stat :Otheractual_range :[185.16 322.1 ][3869000 values with dtype=float32]Attributes: (5)Conventions :COARDStitle :4x daily NMC reanalysis (1948)description :Data is from NMC initialized reanalysis\n(4x/day).  These are the 0.9950 sigma level values.platform :Modelreferences :http://www.esrl.noaa.gov/psd/data/gridded/data.ncep.reanalysis.html\n\n\nFirst thing to notice is that ds is an xarray.Dataset object. It has dimensions, lat, lon, and time. It also has coordinate variables with the same names as these dimensions. These coordinate variables are 1-dimensional. This is a NetCDF convention. The Dataset contains one data variable, air. This has dimensions (time, lat, lon).\nClicking on the document icon reveals attributes for each variable. Clicking on the disk icon reveals a representation of the data.\nEach of the data and coordinate variables can be accessed and examined using the variable name as a key.\n\nds.air\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray 'air' (time: 2920, lat: 25, lon: 53)&gt;\n[3869000 values with dtype=float32]\nCoordinates:\n  * lat      (lat) float32 75.0 72.5 70.0 67.5 65.0 ... 25.0 22.5 20.0 17.5 15.0\n  * lon      (lon) float32 200.0 202.5 205.0 207.5 ... 322.5 325.0 327.5 330.0\n  * time     (time) datetime64[ns] 2013-01-01 ... 2014-12-31T18:00:00\nAttributes:\n    long_name:     4xDaily Air temperature at sigma level 995\n    units:         degK\n    precision:     2\n    GRIB_id:       11\n    GRIB_name:     TMP\n    var_desc:      Air temperature\n    dataset:       NMC Reanalysis\n    level_desc:    Surface\n    statistic:     Individual Obs\n    parent_stat:   Other\n    actual_range:  [185.16 322.1 ]xarray.DataArray'air'time: 2920lat: 25lon: 53...[3869000 values with dtype=float32]Coordinates: (3)lat(lat)float3275.0 72.5 70.0 ... 20.0 17.5 15.0standard_name :latitudelong_name :Latitudeunits :degrees_northaxis :Yarray([75. , 72.5, 70. , 67.5, 65. , 62.5, 60. , 57.5, 55. , 52.5, 50. , 47.5,\n       45. , 42.5, 40. , 37.5, 35. , 32.5, 30. , 27.5, 25. , 22.5, 20. , 17.5,\n       15. ], dtype=float32)lon(lon)float32200.0 202.5 205.0 ... 327.5 330.0standard_name :longitudelong_name :Longitudeunits :degrees_eastaxis :Xarray([200. , 202.5, 205. , 207.5, 210. , 212.5, 215. , 217.5, 220. , 222.5,\n       225. , 227.5, 230. , 232.5, 235. , 237.5, 240. , 242.5, 245. , 247.5,\n       250. , 252.5, 255. , 257.5, 260. , 262.5, 265. , 267.5, 270. , 272.5,\n       275. , 277.5, 280. , 282.5, 285. , 287.5, 290. , 292.5, 295. , 297.5,\n       300. , 302.5, 305. , 307.5, 310. , 312.5, 315. , 317.5, 320. , 322.5,\n       325. , 327.5, 330. ], dtype=float32)time(time)datetime64[ns]2013-01-01 ... 2014-12-31T18:00:00standard_name :timelong_name :Timearray(['2013-01-01T00:00:00.000000000', '2013-01-01T06:00:00.000000000',\n       '2013-01-01T12:00:00.000000000', ..., '2014-12-31T06:00:00.000000000',\n       '2014-12-31T12:00:00.000000000', '2014-12-31T18:00:00.000000000'],\n      dtype='datetime64[ns]')Attributes: (11)long_name :4xDaily Air temperature at sigma level 995units :degKprecision :2GRIB_id :11GRIB_name :TMPvar_desc :Air temperaturedataset :NMC Reanalysislevel_desc :Surfacestatistic :Individual Obsparent_stat :Otheractual_range :[185.16 322.1 ]\n\n\n\nds['air']\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray 'air' (time: 2920, lat: 25, lon: 53)&gt;\n[3869000 values with dtype=float32]\nCoordinates:\n  * lat      (lat) float32 75.0 72.5 70.0 67.5 65.0 ... 25.0 22.5 20.0 17.5 15.0\n  * lon      (lon) float32 200.0 202.5 205.0 207.5 ... 322.5 325.0 327.5 330.0\n  * time     (time) datetime64[ns] 2013-01-01 ... 2014-12-31T18:00:00\nAttributes:\n    long_name:     4xDaily Air temperature at sigma level 995\n    units:         degK\n    precision:     2\n    GRIB_id:       11\n    GRIB_name:     TMP\n    var_desc:      Air temperature\n    dataset:       NMC Reanalysis\n    level_desc:    Surface\n    statistic:     Individual Obs\n    parent_stat:   Other\n    actual_range:  [185.16 322.1 ]xarray.DataArray'air'time: 2920lat: 25lon: 53...[3869000 values with dtype=float32]Coordinates: (3)lat(lat)float3275.0 72.5 70.0 ... 20.0 17.5 15.0standard_name :latitudelong_name :Latitudeunits :degrees_northaxis :Yarray([75. , 72.5, 70. , 67.5, 65. , 62.5, 60. , 57.5, 55. , 52.5, 50. , 47.5,\n       45. , 42.5, 40. , 37.5, 35. , 32.5, 30. , 27.5, 25. , 22.5, 20. , 17.5,\n       15. ], dtype=float32)lon(lon)float32200.0 202.5 205.0 ... 327.5 330.0standard_name :longitudelong_name :Longitudeunits :degrees_eastaxis :Xarray([200. , 202.5, 205. , 207.5, 210. , 212.5, 215. , 217.5, 220. , 222.5,\n       225. , 227.5, 230. , 232.5, 235. , 237.5, 240. , 242.5, 245. , 247.5,\n       250. , 252.5, 255. , 257.5, 260. , 262.5, 265. , 267.5, 270. , 272.5,\n       275. , 277.5, 280. , 282.5, 285. , 287.5, 290. , 292.5, 295. , 297.5,\n       300. , 302.5, 305. , 307.5, 310. , 312.5, 315. , 317.5, 320. , 322.5,\n       325. , 327.5, 330. ], dtype=float32)time(time)datetime64[ns]2013-01-01 ... 2014-12-31T18:00:00standard_name :timelong_name :Timearray(['2013-01-01T00:00:00.000000000', '2013-01-01T06:00:00.000000000',\n       '2013-01-01T12:00:00.000000000', ..., '2014-12-31T06:00:00.000000000',\n       '2014-12-31T12:00:00.000000000', '2014-12-31T18:00:00.000000000'],\n      dtype='datetime64[ns]')Attributes: (11)long_name :4xDaily Air temperature at sigma level 995units :degKprecision :2GRIB_id :11GRIB_name :TMPvar_desc :Air temperaturedataset :NMC Reanalysislevel_desc :Surfacestatistic :Individual Obsparent_stat :Otheractual_range :[185.16 322.1 ]\n\n\nThese are xarray.DataArray objects. This is the basic building block for xarray.\nVariables can also be accessed as attributes of ds.\n\nds.time\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray 'time' (time: 2920)&gt;\narray(['2013-01-01T00:00:00.000000000', '2013-01-01T06:00:00.000000000',\n       '2013-01-01T12:00:00.000000000', ..., '2014-12-31T06:00:00.000000000',\n       '2014-12-31T12:00:00.000000000', '2014-12-31T18:00:00.000000000'],\n      dtype='datetime64[ns]')\nCoordinates:\n  * time     (time) datetime64[ns] 2013-01-01 ... 2014-12-31T18:00:00\nAttributes:\n    standard_name:  time\n    long_name:      Timexarray.DataArray'time'time: 29202013-01-01 2013-01-01T06:00:00 ... 2014-12-31T18:00:00array(['2013-01-01T00:00:00.000000000', '2013-01-01T06:00:00.000000000',\n       '2013-01-01T12:00:00.000000000', ..., '2014-12-31T06:00:00.000000000',\n       '2014-12-31T12:00:00.000000000', '2014-12-31T18:00:00.000000000'],\n      dtype='datetime64[ns]')Coordinates: (1)time(time)datetime64[ns]2013-01-01 ... 2014-12-31T18:00:00standard_name :timelong_name :Timearray(['2013-01-01T00:00:00.000000000', '2013-01-01T06:00:00.000000000',\n       '2013-01-01T12:00:00.000000000', ..., '2014-12-31T06:00:00.000000000',\n       '2014-12-31T12:00:00.000000000', '2014-12-31T18:00:00.000000000'],\n      dtype='datetime64[ns]')Attributes: (2)standard_name :timelong_name :Time\n\n\nA major difference between accessing a variable as an attribute versus using a key is that the attribute is read-only but the key method can be used to update the variable. For example, if I want to convert the units of air from Kelvin to degrees Celsius.\n\nds['air'] = ds.air - 273.15\n\nThis approach can also be used to add new variables\n\nds['air_kelvin'] = ds.air + 273.15\n\nIt is helpful to update attributes such as units, this saves time, confusion and mistakes, especially when you save the dataset.\n\nds['air'].attrs['units'] = 'degC'\n\n\nds\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:     (lat: 25, time: 2920, lon: 53)\nCoordinates:\n  * lat         (lat) float32 75.0 72.5 70.0 67.5 65.0 ... 22.5 20.0 17.5 15.0\n  * lon         (lon) float32 200.0 202.5 205.0 207.5 ... 325.0 327.5 330.0\n  * time        (time) datetime64[ns] 2013-01-01 ... 2014-12-31T18:00:00\nData variables:\n    air         (time, lat, lon) float32 -31.95 -30.65 -29.65 ... 23.04 22.54\n    air_kelvin  (time, lat, lon) float32 241.2 242.5 243.5 ... 296.5 296.2 295.7\nAttributes:\n    Conventions:  COARDS\n    title:        4x daily NMC reanalysis (1948)\n    description:  Data is from NMC initialized reanalysis\\n(4x/day).  These a...\n    platform:     Model\n    references:   http://www.esrl.noaa.gov/psd/data/gridded/data.ncep.reanaly...xarray.DatasetDimensions:lat: 25time: 2920lon: 53Coordinates: (3)lat(lat)float3275.0 72.5 70.0 ... 20.0 17.5 15.0standard_name :latitudelong_name :Latitudeunits :degrees_northaxis :Yarray([75. , 72.5, 70. , 67.5, 65. , 62.5, 60. , 57.5, 55. , 52.5, 50. , 47.5,\n       45. , 42.5, 40. , 37.5, 35. , 32.5, 30. , 27.5, 25. , 22.5, 20. , 17.5,\n       15. ], dtype=float32)lon(lon)float32200.0 202.5 205.0 ... 327.5 330.0standard_name :longitudelong_name :Longitudeunits :degrees_eastaxis :Xarray([200. , 202.5, 205. , 207.5, 210. , 212.5, 215. , 217.5, 220. , 222.5,\n       225. , 227.5, 230. , 232.5, 235. , 237.5, 240. , 242.5, 245. , 247.5,\n       250. , 252.5, 255. , 257.5, 260. , 262.5, 265. , 267.5, 270. , 272.5,\n       275. , 277.5, 280. , 282.5, 285. , 287.5, 290. , 292.5, 295. , 297.5,\n       300. , 302.5, 305. , 307.5, 310. , 312.5, 315. , 317.5, 320. , 322.5,\n       325. , 327.5, 330. ], dtype=float32)time(time)datetime64[ns]2013-01-01 ... 2014-12-31T18:00:00standard_name :timelong_name :Timearray(['2013-01-01T00:00:00.000000000', '2013-01-01T06:00:00.000000000',\n       '2013-01-01T12:00:00.000000000', ..., '2014-12-31T06:00:00.000000000',\n       '2014-12-31T12:00:00.000000000', '2014-12-31T18:00:00.000000000'],\n      dtype='datetime64[ns]')Data variables: (2)air(time, lat, lon)float32-31.95 -30.65 ... 23.04 22.54long_name :4xDaily Air temperature at sigma level 995units :degCprecision :2GRIB_id :11GRIB_name :TMPvar_desc :Air temperaturedataset :NMC Reanalysislevel_desc :Surfacestatistic :Individual Obsparent_stat :Otheractual_range :[185.16 322.1 ]array([[[-31.949997, -30.649994, -29.649994, ..., -40.350006,\n         -37.649994, -34.550003],\n        [-29.350006, -28.649994, -28.449997, ..., -40.350006,\n         -37.850006, -33.850006],\n        [-23.149994, -23.350006, -24.259995, ..., -39.949997,\n         -36.759995, -31.449997],\n        ...,\n        [ 23.450012,  23.049988,  23.25    , ...,  22.25    ,\n          21.950012,  21.549988],\n        [ 22.75    ,  23.049988,  23.640015, ...,  22.75    ,\n          22.75    ,  22.049988],\n        [ 23.140015,  23.640015,  23.950012, ...,  23.75    ,\n          23.640015,  23.450012]],\n\n       [[-31.050003, -30.449997, -30.050003, ..., -41.149994,\n         -39.550003, -37.350006],\n        [-29.550003, -29.050003, -28.949997, ..., -42.149994,\n         -40.649994, -37.449997],\n        [-19.949997, -20.259995, -21.050003, ..., -42.350006,\n         -39.759995, -34.649994],\n...\n        [ 20.540009,  20.73999 ,  22.23999 , ...,  21.940002,\n          21.540009,  21.140015],\n        [ 23.140015,  24.040009,  24.440002, ...,  22.140015,\n          21.940002,  21.23999 ],\n        [ 24.640015,  25.23999 ,  25.339996, ...,  22.540009,\n          22.339996,  22.040009]],\n\n       [[-28.059998, -28.86    , -29.86    , ..., -31.460007,\n         -31.660004, -31.36    ],\n        [-23.259995, -23.86    , -24.759995, ..., -33.559998,\n         -32.86    , -31.460007],\n        [-10.160004, -10.959991, -11.76001 , ..., -33.259995,\n         -30.559998, -26.86    ],\n        ...,\n        [ 20.640015,  20.540009,  21.940002, ...,  22.140015,\n          21.940002,  21.540009],\n        [ 22.940002,  23.73999 ,  24.040009, ...,  22.540009,\n          22.540009,  22.040009],\n        [ 24.540009,  24.940002,  24.940002, ...,  23.339996,\n          23.040009,  22.540009]]], dtype=float32)air_kelvin(time, lat, lon)float32241.2 242.5 243.5 ... 296.2 295.7long_name :4xDaily Air temperature at sigma level 995units :degKprecision :2GRIB_id :11GRIB_name :TMPvar_desc :Air temperaturedataset :NMC Reanalysislevel_desc :Surfacestatistic :Individual Obsparent_stat :Otheractual_range :[185.16 322.1 ]array([[[241.2    , 242.5    , 243.5    , ..., 232.79999, 235.5    ,\n         238.59999],\n        [243.79999, 244.5    , 244.7    , ..., 232.79999, 235.29999,\n         239.29999],\n        [250.     , 249.79999, 248.89   , ..., 233.2    , 236.39   ,\n         241.7    ],\n        ...,\n        [296.6    , 296.19998, 296.4    , ..., 295.4    , 295.1    ,\n         294.69998],\n        [295.9    , 296.19998, 296.79   , ..., 295.9    , 295.9    ,\n         295.19998],\n        [296.29   , 296.79   , 297.1    , ..., 296.9    , 296.79   ,\n         296.6    ]],\n\n       [[242.09999, 242.7    , 243.09999, ..., 232.     , 233.59999,\n         235.79999],\n        [243.59999, 244.09999, 244.2    , ..., 231.     , 232.5    ,\n         235.7    ],\n        [253.2    , 252.89   , 252.09999, ..., 230.79999, 233.39   ,\n         238.5    ],\n...\n        [293.69   , 293.88998, 295.38998, ..., 295.09   , 294.69   ,\n         294.29   ],\n        [296.29   , 297.19   , 297.59   , ..., 295.29   , 295.09   ,\n         294.38998],\n        [297.79   , 298.38998, 298.49   , ..., 295.69   , 295.49   ,\n         295.19   ]],\n\n       [[245.09   , 244.29   , 243.29   , ..., 241.68999, 241.48999,\n         241.79   ],\n        [249.89   , 249.29   , 248.39   , ..., 239.59   , 240.29   ,\n         241.68999],\n        [262.99   , 262.19   , 261.38998, ..., 239.89   , 242.59   ,\n         246.29   ],\n        ...,\n        [293.79   , 293.69   , 295.09   , ..., 295.29   , 295.09   ,\n         294.69   ],\n        [296.09   , 296.88998, 297.19   , ..., 295.69   , 295.69   ,\n         295.19   ],\n        [297.69   , 298.09   , 298.09   , ..., 296.49   , 296.19   ,\n         295.69   ]]], dtype=float32)Attributes: (5)Conventions :COARDStitle :4x daily NMC reanalysis (1948)description :Data is from NMC initialized reanalysis\n(4x/day).  These are the 0.9950 sigma level values.platform :Modelreferences :http://www.esrl.noaa.gov/psd/data/gridded/data.ncep.reanalysis.html",
    "crumbs": [
      "Data Tutorials",
      "Data viz and use",
      "03. Introduction to `xarray`"
    ]
  },
  {
    "objectID": "notebooks-data/02_Xarray_hvplot.html#subsetting-and-indexing",
    "href": "notebooks-data/02_Xarray_hvplot.html#subsetting-and-indexing",
    "title": "03. Introduction to xarray",
    "section": "Subsetting and Indexing",
    "text": "Subsetting and Indexing\nSubsetting and indexing methods depend on whether you are working with a Dataset or DataArray. A DataArray can be accessed using positional indexing just like a numpy array. To access the temperature field for the first time step, you do the following.\n\nds['air'][0,:,:]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray 'air' (lat: 25, lon: 53)&gt;\narray([[-31.949997, -30.649994, -29.649994, ..., -40.350006, -37.649994,\n        -34.550003],\n       [-29.350006, -28.649994, -28.449997, ..., -40.350006, -37.850006,\n        -33.850006],\n       [-23.149994, -23.350006, -24.259995, ..., -39.949997, -36.759995,\n        -31.449997],\n       ...,\n       [ 23.450012,  23.049988,  23.25    , ...,  22.25    ,  21.950012,\n         21.549988],\n       [ 22.75    ,  23.049988,  23.640015, ...,  22.75    ,  22.75    ,\n         22.049988],\n       [ 23.140015,  23.640015,  23.950012, ...,  23.75    ,  23.640015,\n         23.450012]], dtype=float32)\nCoordinates:\n  * lat      (lat) float32 75.0 72.5 70.0 67.5 65.0 ... 25.0 22.5 20.0 17.5 15.0\n  * lon      (lon) float32 200.0 202.5 205.0 207.5 ... 322.5 325.0 327.5 330.0\n    time     datetime64[ns] 2013-01-01\nAttributes:\n    long_name:     4xDaily Air temperature at sigma level 995\n    units:         degC\n    precision:     2\n    GRIB_id:       11\n    GRIB_name:     TMP\n    var_desc:      Air temperature\n    dataset:       NMC Reanalysis\n    level_desc:    Surface\n    statistic:     Individual Obs\n    parent_stat:   Other\n    actual_range:  [185.16 322.1 ]xarray.DataArray'air'lat: 25lon: 53-31.95 -30.65 -29.65 -29.15 -29.05 ... 24.64 24.45 23.75 23.64 23.45array([[-31.949997, -30.649994, -29.649994, ..., -40.350006, -37.649994,\n        -34.550003],\n       [-29.350006, -28.649994, -28.449997, ..., -40.350006, -37.850006,\n        -33.850006],\n       [-23.149994, -23.350006, -24.259995, ..., -39.949997, -36.759995,\n        -31.449997],\n       ...,\n       [ 23.450012,  23.049988,  23.25    , ...,  22.25    ,  21.950012,\n         21.549988],\n       [ 22.75    ,  23.049988,  23.640015, ...,  22.75    ,  22.75    ,\n         22.049988],\n       [ 23.140015,  23.640015,  23.950012, ...,  23.75    ,  23.640015,\n         23.450012]], dtype=float32)Coordinates: (3)lat(lat)float3275.0 72.5 70.0 ... 20.0 17.5 15.0standard_name :latitudelong_name :Latitudeunits :degrees_northaxis :Yarray([75. , 72.5, 70. , 67.5, 65. , 62.5, 60. , 57.5, 55. , 52.5, 50. , 47.5,\n       45. , 42.5, 40. , 37.5, 35. , 32.5, 30. , 27.5, 25. , 22.5, 20. , 17.5,\n       15. ], dtype=float32)lon(lon)float32200.0 202.5 205.0 ... 327.5 330.0standard_name :longitudelong_name :Longitudeunits :degrees_eastaxis :Xarray([200. , 202.5, 205. , 207.5, 210. , 212.5, 215. , 217.5, 220. , 222.5,\n       225. , 227.5, 230. , 232.5, 235. , 237.5, 240. , 242.5, 245. , 247.5,\n       250. , 252.5, 255. , 257.5, 260. , 262.5, 265. , 267.5, 270. , 272.5,\n       275. , 277.5, 280. , 282.5, 285. , 287.5, 290. , 292.5, 295. , 297.5,\n       300. , 302.5, 305. , 307.5, 310. , 312.5, 315. , 317.5, 320. , 322.5,\n       325. , 327.5, 330. ], dtype=float32)time()datetime64[ns]2013-01-01standard_name :timelong_name :Timearray('2013-01-01T00:00:00.000000000', dtype='datetime64[ns]')Attributes: (11)long_name :4xDaily Air temperature at sigma level 995units :degCprecision :2GRIB_id :11GRIB_name :TMPvar_desc :Air temperaturedataset :NMC Reanalysislevel_desc :Surfacestatistic :Individual Obsparent_stat :Otheractual_range :[185.16 322.1 ]\n\n\nNote this returns a DataArray with coordinates but not attributes.\nHowever, the real power is being able to access variables using coordinate variables. I can get the same subset using the following. (It’s also more explicit about what is being selected and robust in case I modify the DataArray and expect the same output.)\n\nds['air'].sel(time='2013-01-01').time\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray 'time' (time: 4)&gt;\narray(['2013-01-01T00:00:00.000000000', '2013-01-01T06:00:00.000000000',\n       '2013-01-01T12:00:00.000000000', '2013-01-01T18:00:00.000000000'],\n      dtype='datetime64[ns]')\nCoordinates:\n  * time     (time) datetime64[ns] 2013-01-01 ... 2013-01-01T18:00:00\nAttributes:\n    standard_name:  time\n    long_name:      Timexarray.DataArray'time'time: 42013-01-01 2013-01-01T06:00:00 2013-01-01T12:00:00 2013-01-01T18:00:00array(['2013-01-01T00:00:00.000000000', '2013-01-01T06:00:00.000000000',\n       '2013-01-01T12:00:00.000000000', '2013-01-01T18:00:00.000000000'],\n      dtype='datetime64[ns]')Coordinates: (1)time(time)datetime64[ns]2013-01-01 ... 2013-01-01T18:00:00standard_name :timelong_name :Timearray(['2013-01-01T00:00:00.000000000', '2013-01-01T06:00:00.000000000',\n       '2013-01-01T12:00:00.000000000', '2013-01-01T18:00:00.000000000'],\n      dtype='datetime64[ns]')Attributes: (2)standard_name :timelong_name :Time\n\n\n\nds.air.sel(time='2013-01-01')\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray 'air' (time: 4, lat: 25, lon: 53)&gt;\narray([[[-31.949997, -30.649994, -29.649994, ..., -40.350006,\n         -37.649994, -34.550003],\n        [-29.350006, -28.649994, -28.449997, ..., -40.350006,\n         -37.850006, -33.850006],\n        [-23.149994, -23.350006, -24.259995, ..., -39.949997,\n         -36.759995, -31.449997],\n        ...,\n        [ 23.450012,  23.049988,  23.25    , ...,  22.25    ,\n          21.950012,  21.549988],\n        [ 22.75    ,  23.049988,  23.640015, ...,  22.75    ,\n          22.75    ,  22.049988],\n        [ 23.140015,  23.640015,  23.950012, ...,  23.75    ,\n          23.640015,  23.450012]],\n\n       [[-31.050003, -30.449997, -30.050003, ..., -41.149994,\n         -39.550003, -37.350006],\n        [-29.550003, -29.050003, -28.949997, ..., -42.149994,\n         -40.649994, -37.449997],\n        [-19.949997, -20.259995, -21.050003, ..., -42.350006,\n         -39.759995, -34.649994],\n...\n        [ 22.450012,  22.25    ,  22.25    , ...,  23.140015,\n          22.140015,  21.850006],\n        [ 23.049988,  23.350006,  23.140015, ...,  23.25    ,\n          22.850006,  22.450012],\n        [ 23.25    ,  23.140015,  23.25    , ...,  23.850006,\n          23.850006,  23.640015]],\n\n       [[-31.259995, -31.350006, -31.350006, ..., -38.759995,\n         -37.649994, -35.550003],\n        [-26.850006, -27.850006, -28.949997, ..., -42.259995,\n         -41.649994, -38.649994],\n        [-16.549988, -18.449997, -21.050003, ..., -42.449997,\n         -41.350006, -37.050003],\n        ...,\n        [ 23.450012,  23.25    ,  22.850006, ...,  23.350006,\n          22.640015,  22.140015],\n        [ 23.850006,  24.350006,  23.950012, ...,  23.640015,\n          23.450012,  23.140015],\n        [ 24.350006,  24.549988,  24.350006, ...,  24.640015,\n          24.850006,  24.75    ]]], dtype=float32)\nCoordinates:\n  * lat      (lat) float32 75.0 72.5 70.0 67.5 65.0 ... 25.0 22.5 20.0 17.5 15.0\n  * lon      (lon) float32 200.0 202.5 205.0 207.5 ... 322.5 325.0 327.5 330.0\n  * time     (time) datetime64[ns] 2013-01-01 ... 2013-01-01T18:00:00\nAttributes:\n    long_name:     4xDaily Air temperature at sigma level 995\n    units:         degC\n    precision:     2\n    GRIB_id:       11\n    GRIB_name:     TMP\n    var_desc:      Air temperature\n    dataset:       NMC Reanalysis\n    level_desc:    Surface\n    statistic:     Individual Obs\n    parent_stat:   Other\n    actual_range:  [185.16 322.1 ]xarray.DataArray'air'time: 4lat: 25lon: 53-31.95 -30.65 -29.65 -29.15 -29.05 ... 25.45 25.05 24.64 24.85 24.75array([[[-31.949997, -30.649994, -29.649994, ..., -40.350006,\n         -37.649994, -34.550003],\n        [-29.350006, -28.649994, -28.449997, ..., -40.350006,\n         -37.850006, -33.850006],\n        [-23.149994, -23.350006, -24.259995, ..., -39.949997,\n         -36.759995, -31.449997],\n        ...,\n        [ 23.450012,  23.049988,  23.25    , ...,  22.25    ,\n          21.950012,  21.549988],\n        [ 22.75    ,  23.049988,  23.640015, ...,  22.75    ,\n          22.75    ,  22.049988],\n        [ 23.140015,  23.640015,  23.950012, ...,  23.75    ,\n          23.640015,  23.450012]],\n\n       [[-31.050003, -30.449997, -30.050003, ..., -41.149994,\n         -39.550003, -37.350006],\n        [-29.550003, -29.050003, -28.949997, ..., -42.149994,\n         -40.649994, -37.449997],\n        [-19.949997, -20.259995, -21.050003, ..., -42.350006,\n         -39.759995, -34.649994],\n...\n        [ 22.450012,  22.25    ,  22.25    , ...,  23.140015,\n          22.140015,  21.850006],\n        [ 23.049988,  23.350006,  23.140015, ...,  23.25    ,\n          22.850006,  22.450012],\n        [ 23.25    ,  23.140015,  23.25    , ...,  23.850006,\n          23.850006,  23.640015]],\n\n       [[-31.259995, -31.350006, -31.350006, ..., -38.759995,\n         -37.649994, -35.550003],\n        [-26.850006, -27.850006, -28.949997, ..., -42.259995,\n         -41.649994, -38.649994],\n        [-16.549988, -18.449997, -21.050003, ..., -42.449997,\n         -41.350006, -37.050003],\n        ...,\n        [ 23.450012,  23.25    ,  22.850006, ...,  23.350006,\n          22.640015,  22.140015],\n        [ 23.850006,  24.350006,  23.950012, ...,  23.640015,\n          23.450012,  23.140015],\n        [ 24.350006,  24.549988,  24.350006, ...,  24.640015,\n          24.850006,  24.75    ]]], dtype=float32)Coordinates: (3)lat(lat)float3275.0 72.5 70.0 ... 20.0 17.5 15.0standard_name :latitudelong_name :Latitudeunits :degrees_northaxis :Yarray([75. , 72.5, 70. , 67.5, 65. , 62.5, 60. , 57.5, 55. , 52.5, 50. , 47.5,\n       45. , 42.5, 40. , 37.5, 35. , 32.5, 30. , 27.5, 25. , 22.5, 20. , 17.5,\n       15. ], dtype=float32)lon(lon)float32200.0 202.5 205.0 ... 327.5 330.0standard_name :longitudelong_name :Longitudeunits :degrees_eastaxis :Xarray([200. , 202.5, 205. , 207.5, 210. , 212.5, 215. , 217.5, 220. , 222.5,\n       225. , 227.5, 230. , 232.5, 235. , 237.5, 240. , 242.5, 245. , 247.5,\n       250. , 252.5, 255. , 257.5, 260. , 262.5, 265. , 267.5, 270. , 272.5,\n       275. , 277.5, 280. , 282.5, 285. , 287.5, 290. , 292.5, 295. , 297.5,\n       300. , 302.5, 305. , 307.5, 310. , 312.5, 315. , 317.5, 320. , 322.5,\n       325. , 327.5, 330. ], dtype=float32)time(time)datetime64[ns]2013-01-01 ... 2013-01-01T18:00:00standard_name :timelong_name :Timearray(['2013-01-01T00:00:00.000000000', '2013-01-01T06:00:00.000000000',\n       '2013-01-01T12:00:00.000000000', '2013-01-01T18:00:00.000000000'],\n      dtype='datetime64[ns]')Attributes: (11)long_name :4xDaily Air temperature at sigma level 995units :degCprecision :2GRIB_id :11GRIB_name :TMPvar_desc :Air temperaturedataset :NMC Reanalysislevel_desc :Surfacestatistic :Individual Obsparent_stat :Otheractual_range :[185.16 322.1 ]\n\n\nI can also do slices. I’ll extract temperatures for the state of Colorado. The bounding box for the state is [-109 E, -102 E, 37 N, 41 N].\nIn the code below, pay attention to both the order of the coordinates and the range of values. The first value of the lat coordinate variable is 41 N, the second value is 37 N. Unfortunately, xarray expects slices of coordinates to be in the same order as the coordinates. Note lon is 0 to 360 not -180 to 180, and I let python calculate it for me within the slice.\n\nds.air.sel(lat=slice(41.,37.), lon=slice(360-109,360-102))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray 'air' (time: 2920, lat: 2, lon: 3)&gt;\narray([[[-10.049988 ,  -9.25     ,  -8.75     ],\n        [ -6.25     ,  -6.549988 ,  -6.3599854]],\n\n       [[-18.149994 , -14.950012 ,  -9.950012 ],\n        [-13.649994 , -11.049988 ,  -7.25     ]],\n\n       [[-20.449997 , -18.649994 , -13.359985 ],\n        [-19.350006 , -16.950012 , -11.25     ]],\n\n       ...,\n\n       [[-24.460007 , -28.259995 , -25.759995 ],\n        [-16.959991 , -24.059998 , -24.059998 ]],\n\n       [[-24.36     , -26.160004 , -23.460007 ],\n        [-15.959991 , -22.86     , -22.960007 ]],\n\n       [[-17.559998 , -15.359985 , -13.660004 ],\n        [-13.76001  , -15.959991 , -14.459991 ]]], dtype=float32)\nCoordinates:\n  * lat      (lat) float32 40.0 37.5\n  * lon      (lon) float32 252.5 255.0 257.5\n  * time     (time) datetime64[ns] 2013-01-01 ... 2014-12-31T18:00:00\nAttributes:\n    long_name:     4xDaily Air temperature at sigma level 995\n    units:         degC\n    precision:     2\n    GRIB_id:       11\n    GRIB_name:     TMP\n    var_desc:      Air temperature\n    dataset:       NMC Reanalysis\n    level_desc:    Surface\n    statistic:     Individual Obs\n    parent_stat:   Other\n    actual_range:  [185.16 322.1 ]xarray.DataArray'air'time: 2920lat: 2lon: 3-10.05 -9.25 -8.75 -6.25 -6.55 ... -15.36 -13.66 -13.76 -15.96 -14.46array([[[-10.049988 ,  -9.25     ,  -8.75     ],\n        [ -6.25     ,  -6.549988 ,  -6.3599854]],\n\n       [[-18.149994 , -14.950012 ,  -9.950012 ],\n        [-13.649994 , -11.049988 ,  -7.25     ]],\n\n       [[-20.449997 , -18.649994 , -13.359985 ],\n        [-19.350006 , -16.950012 , -11.25     ]],\n\n       ...,\n\n       [[-24.460007 , -28.259995 , -25.759995 ],\n        [-16.959991 , -24.059998 , -24.059998 ]],\n\n       [[-24.36     , -26.160004 , -23.460007 ],\n        [-15.959991 , -22.86     , -22.960007 ]],\n\n       [[-17.559998 , -15.359985 , -13.660004 ],\n        [-13.76001  , -15.959991 , -14.459991 ]]], dtype=float32)Coordinates: (3)lat(lat)float3240.0 37.5standard_name :latitudelong_name :Latitudeunits :degrees_northaxis :Yarray([40. , 37.5], dtype=float32)lon(lon)float32252.5 255.0 257.5standard_name :longitudelong_name :Longitudeunits :degrees_eastaxis :Xarray([252.5, 255. , 257.5], dtype=float32)time(time)datetime64[ns]2013-01-01 ... 2014-12-31T18:00:00standard_name :timelong_name :Timearray(['2013-01-01T00:00:00.000000000', '2013-01-01T06:00:00.000000000',\n       '2013-01-01T12:00:00.000000000', ..., '2014-12-31T06:00:00.000000000',\n       '2014-12-31T12:00:00.000000000', '2014-12-31T18:00:00.000000000'],\n      dtype='datetime64[ns]')Attributes: (11)long_name :4xDaily Air temperature at sigma level 995units :degCprecision :2GRIB_id :11GRIB_name :TMPvar_desc :Air temperaturedataset :NMC Reanalysislevel_desc :Surfacestatistic :Individual Obsparent_stat :Otheractual_range :[185.16 322.1 ]\n\n\nWhat if we want temperature for a point, for example Denver, CO (39.72510678889283 N, -104.98785545855408 E). xarray can handle this! If we just want data from the nearest grid point, we can use sel and specify the method as “nearest”.\n\ndenver_lat, denver_lon = 39.72510678889283, -104.98785545855408\n\n\nds.air.sel(lat=denver_lat, lon=360+denver_lon, method='nearest').hvplot()\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\nIf we want to interpolate, we can use interp(). In this case I use linear or bilinear interpolation.\ninterp() can also be used to resample data to a new grid and even reproject data\n\nds.air.interp(lat=denver_lat, lon=360+denver_lon, method='linear')\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray 'air' (time: 2920)&gt;\narray([ -8.95085077, -14.49752791, -18.43715163, ..., -27.78736503,\n       -25.78552388, -15.41780902])\nCoordinates:\n  * time     (time) datetime64[ns] 2013-01-01 ... 2014-12-31T18:00:00\n    lat      float64 39.73\n    lon      float64 255.0\nAttributes:\n    long_name:     4xDaily Air temperature at sigma level 995\n    units:         degC\n    precision:     2\n    GRIB_id:       11\n    GRIB_name:     TMP\n    var_desc:      Air temperature\n    dataset:       NMC Reanalysis\n    level_desc:    Surface\n    statistic:     Individual Obs\n    parent_stat:   Other\n    actual_range:  [185.16 322.1 ]xarray.DataArray'air'time: 2920-8.951 -14.5 -18.44 -11.33 -8.942 ... -22.4 -27.79 -25.79 -15.42array([ -8.95085077, -14.49752791, -18.43715163, ..., -27.78736503,\n       -25.78552388, -15.41780902])Coordinates: (3)time(time)datetime64[ns]2013-01-01 ... 2014-12-31T18:00:00standard_name :timelong_name :Timearray(['2013-01-01T00:00:00.000000000', '2013-01-01T06:00:00.000000000',\n       '2013-01-01T12:00:00.000000000', ..., '2014-12-31T06:00:00.000000000',\n       '2014-12-31T12:00:00.000000000', '2014-12-31T18:00:00.000000000'],\n      dtype='datetime64[ns]')lat()float6439.73standard_name :latitudelong_name :Latitudeunits :degrees_northaxis :Yarray(39.72510679)lon()float64255.0standard_name :longitudelong_name :Longitudeunits :degrees_eastaxis :Xarray(255.01214454)Attributes: (11)long_name :4xDaily Air temperature at sigma level 995units :degCprecision :2GRIB_id :11GRIB_name :TMPvar_desc :Air temperaturedataset :NMC Reanalysislevel_desc :Surfacestatistic :Individual Obsparent_stat :Otheractual_range :[185.16 322.1 ]\n\n\nsel() and interp() can also be used on Dataset objects.\n\nds.sel(lat=slice(41,37), lon=slice(360-109,360-102))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:     (lat: 2, time: 2920, lon: 3)\nCoordinates:\n  * lat         (lat) float32 40.0 37.5\n  * lon         (lon) float32 252.5 255.0 257.5\n  * time        (time) datetime64[ns] 2013-01-01 ... 2014-12-31T18:00:00\nData variables:\n    air         (time, lat, lon) float32 -10.05 -9.25 -8.75 ... -15.96 -14.46\n    air_kelvin  (time, lat, lon) float32 263.1 263.9 264.4 ... 259.4 257.2 258.7\nAttributes:\n    Conventions:  COARDS\n    title:        4x daily NMC reanalysis (1948)\n    description:  Data is from NMC initialized reanalysis\\n(4x/day).  These a...\n    platform:     Model\n    references:   http://www.esrl.noaa.gov/psd/data/gridded/data.ncep.reanaly...xarray.DatasetDimensions:lat: 2time: 2920lon: 3Coordinates: (3)lat(lat)float3240.0 37.5standard_name :latitudelong_name :Latitudeunits :degrees_northaxis :Yarray([40. , 37.5], dtype=float32)lon(lon)float32252.5 255.0 257.5standard_name :longitudelong_name :Longitudeunits :degrees_eastaxis :Xarray([252.5, 255. , 257.5], dtype=float32)time(time)datetime64[ns]2013-01-01 ... 2014-12-31T18:00:00standard_name :timelong_name :Timearray(['2013-01-01T00:00:00.000000000', '2013-01-01T06:00:00.000000000',\n       '2013-01-01T12:00:00.000000000', ..., '2014-12-31T06:00:00.000000000',\n       '2014-12-31T12:00:00.000000000', '2014-12-31T18:00:00.000000000'],\n      dtype='datetime64[ns]')Data variables: (2)air(time, lat, lon)float32-10.05 -9.25 ... -15.96 -14.46long_name :4xDaily Air temperature at sigma level 995units :degCprecision :2GRIB_id :11GRIB_name :TMPvar_desc :Air temperaturedataset :NMC Reanalysislevel_desc :Surfacestatistic :Individual Obsparent_stat :Otheractual_range :[185.16 322.1 ]array([[[-10.049988 ,  -9.25     ,  -8.75     ],\n        [ -6.25     ,  -6.549988 ,  -6.3599854]],\n\n       [[-18.149994 , -14.950012 ,  -9.950012 ],\n        [-13.649994 , -11.049988 ,  -7.25     ]],\n\n       [[-20.449997 , -18.649994 , -13.359985 ],\n        [-19.350006 , -16.950012 , -11.25     ]],\n\n       ...,\n\n       [[-24.460007 , -28.259995 , -25.759995 ],\n        [-16.959991 , -24.059998 , -24.059998 ]],\n\n       [[-24.36     , -26.160004 , -23.460007 ],\n        [-15.959991 , -22.86     , -22.960007 ]],\n\n       [[-17.559998 , -15.359985 , -13.660004 ],\n        [-13.76001  , -15.959991 , -14.459991 ]]], dtype=float32)air_kelvin(time, lat, lon)float32263.1 263.9 264.4 ... 257.2 258.7long_name :4xDaily Air temperature at sigma level 995units :degKprecision :2GRIB_id :11GRIB_name :TMPvar_desc :Air temperaturedataset :NMC Reanalysislevel_desc :Surfacestatistic :Individual Obsparent_stat :Otheractual_range :[185.16 322.1 ]array([[[263.1    , 263.9    , 264.4    ],\n        [266.9    , 266.6    , 266.79   ]],\n\n       [[255.     , 258.19998, 263.19998],\n        [259.5    , 262.1    , 265.9    ]],\n\n       [[252.7    , 254.5    , 259.79   ],\n        [253.79999, 256.19998, 261.9    ]],\n\n       ...,\n\n       [[248.68999, 244.89   , 247.39   ],\n        [256.19   , 249.09   , 249.09   ]],\n\n       [[248.79   , 246.98999, 249.68999],\n        [257.19   , 250.29   , 250.18999]],\n\n       [[255.59   , 257.79   , 259.49   ],\n        [259.38998, 257.19   , 258.69   ]]], dtype=float32)Attributes: (5)Conventions :COARDStitle :4x daily NMC reanalysis (1948)description :Data is from NMC initialized reanalysis\n(4x/day).  These are the 0.9950 sigma level values.platform :Modelreferences :http://www.esrl.noaa.gov/psd/data/gridded/data.ncep.reanalysis.html\n\n\n\nds.interp(lat=denver_lat, lon=360+denver_lon, method='linear')\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:     (time: 2920)\nCoordinates:\n  * time        (time) datetime64[ns] 2013-01-01 ... 2014-12-31T18:00:00\n    lat         float64 39.73\n    lon         float64 255.0\nData variables:\n    air         (time) float64 -8.951 -14.5 -18.44 ... -27.79 -25.79 -15.42\n    air_kelvin  (time) float64 264.2 258.7 254.7 261.8 ... 245.4 247.4 257.7\nAttributes:\n    Conventions:  COARDS\n    title:        4x daily NMC reanalysis (1948)\n    description:  Data is from NMC initialized reanalysis\\n(4x/day).  These a...\n    platform:     Model\n    references:   http://www.esrl.noaa.gov/psd/data/gridded/data.ncep.reanaly...xarray.DatasetDimensions:time: 2920Coordinates: (3)time(time)datetime64[ns]2013-01-01 ... 2014-12-31T18:00:00standard_name :timelong_name :Timearray(['2013-01-01T00:00:00.000000000', '2013-01-01T06:00:00.000000000',\n       '2013-01-01T12:00:00.000000000', ..., '2014-12-31T06:00:00.000000000',\n       '2014-12-31T12:00:00.000000000', '2014-12-31T18:00:00.000000000'],\n      dtype='datetime64[ns]')lat()float6439.73standard_name :latitudelong_name :Latitudeunits :degrees_northaxis :Yarray(39.72510679)lon()float64255.0standard_name :longitudelong_name :Longitudeunits :degrees_eastaxis :Xarray(255.01214454)Data variables: (2)air(time)float64-8.951 -14.5 ... -25.79 -15.42long_name :4xDaily Air temperature at sigma level 995units :degCprecision :2GRIB_id :11GRIB_name :TMPvar_desc :Air temperaturedataset :NMC Reanalysislevel_desc :Surfacestatistic :Individual Obsparent_stat :Otheractual_range :[185.16 322.1 ]array([ -8.95085077, -14.49752791, -18.43715163, ..., -27.78736503,\n       -25.78552388, -15.41780902])air_kelvin(time)float64264.2 258.7 254.7 ... 247.4 257.7long_name :4xDaily Air temperature at sigma level 995units :degKprecision :2GRIB_id :11GRIB_name :TMPvar_desc :Air temperaturedataset :NMC Reanalysislevel_desc :Surfacestatistic :Individual Obsparent_stat :Otheractual_range :[185.16 322.1 ]array([264.19914312, 258.65246598, 254.71284227, ..., 245.36262886,\n       247.36447002, 257.73218487])Attributes: (5)Conventions :COARDStitle :4x daily NMC reanalysis (1948)description :Data is from NMC initialized reanalysis\n(4x/day).  These are the 0.9950 sigma level values.platform :Modelreferences :http://www.esrl.noaa.gov/psd/data/gridded/data.ncep.reanalysis.html",
    "crumbs": [
      "Data Tutorials",
      "Data viz and use",
      "03. Introduction to `xarray`"
    ]
  },
  {
    "objectID": "notebooks-data/02_Xarray_hvplot.html#analysis",
    "href": "notebooks-data/02_Xarray_hvplot.html#analysis",
    "title": "03. Introduction to xarray",
    "section": "Analysis",
    "text": "Analysis\nAs a simple example, let’s try to calculate a mean field for the whole time range.\n\nds.mean(dim='time').hvplot()\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\nWe can also calculate a zonal mean (averaging over longitude)\n\nds.mean(dim='lon').hvplot()\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\nOther aggregation methods include min(), max(), std(), along with others.\n\nds.std(dim='time').hvplot()\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\nThe data we have are in 6h timesteps. This can be resampled to daily or monthly. If you are familiar with pandas, xarray uses the same methods.\n\nds.resample(time='M').mean().hvplot()\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\nds_mon = ds.resample(time='M').mean()\nds_mon\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:     (time: 24, lat: 25, lon: 53)\nCoordinates:\n  * time        (time) datetime64[ns] 2013-01-31 2013-02-28 ... 2014-12-31\n  * lat         (lat) float32 75.0 72.5 70.0 67.5 65.0 ... 22.5 20.0 17.5 15.0\n  * lon         (lon) float32 200.0 202.5 205.0 207.5 ... 325.0 327.5 330.0\nData variables:\n    air         (time, lat, lon) float32 -28.68 -28.49 -28.48 ... 24.57 24.56\n    air_kelvin  (time, lat, lon) float32 244.5 244.7 244.7 ... 297.7 297.7 297.7\nAttributes:\n    Conventions:  COARDS\n    title:        4x daily NMC reanalysis (1948)\n    description:  Data is from NMC initialized reanalysis\\n(4x/day).  These a...\n    platform:     Model\n    references:   http://www.esrl.noaa.gov/psd/data/gridded/data.ncep.reanaly...xarray.DatasetDimensions:time: 24lat: 25lon: 53Coordinates: (3)time(time)datetime64[ns]2013-01-31 ... 2014-12-31array(['2013-01-31T00:00:00.000000000', '2013-02-28T00:00:00.000000000',\n       '2013-03-31T00:00:00.000000000', '2013-04-30T00:00:00.000000000',\n       '2013-05-31T00:00:00.000000000', '2013-06-30T00:00:00.000000000',\n       '2013-07-31T00:00:00.000000000', '2013-08-31T00:00:00.000000000',\n       '2013-09-30T00:00:00.000000000', '2013-10-31T00:00:00.000000000',\n       '2013-11-30T00:00:00.000000000', '2013-12-31T00:00:00.000000000',\n       '2014-01-31T00:00:00.000000000', '2014-02-28T00:00:00.000000000',\n       '2014-03-31T00:00:00.000000000', '2014-04-30T00:00:00.000000000',\n       '2014-05-31T00:00:00.000000000', '2014-06-30T00:00:00.000000000',\n       '2014-07-31T00:00:00.000000000', '2014-08-31T00:00:00.000000000',\n       '2014-09-30T00:00:00.000000000', '2014-10-31T00:00:00.000000000',\n       '2014-11-30T00:00:00.000000000', '2014-12-31T00:00:00.000000000'],\n      dtype='datetime64[ns]')lat(lat)float3275.0 72.5 70.0 ... 20.0 17.5 15.0standard_name :latitudelong_name :Latitudeunits :degrees_northaxis :Yarray([75. , 72.5, 70. , 67.5, 65. , 62.5, 60. , 57.5, 55. , 52.5, 50. , 47.5,\n       45. , 42.5, 40. , 37.5, 35. , 32.5, 30. , 27.5, 25. , 22.5, 20. , 17.5,\n       15. ], dtype=float32)lon(lon)float32200.0 202.5 205.0 ... 327.5 330.0standard_name :longitudelong_name :Longitudeunits :degrees_eastaxis :Xarray([200. , 202.5, 205. , 207.5, 210. , 212.5, 215. , 217.5, 220. , 222.5,\n       225. , 227.5, 230. , 232.5, 235. , 237.5, 240. , 242.5, 245. , 247.5,\n       250. , 252.5, 255. , 257.5, 260. , 262.5, 265. , 267.5, 270. , 272.5,\n       275. , 277.5, 280. , 282.5, 285. , 287.5, 290. , 292.5, 295. , 297.5,\n       300. , 302.5, 305. , 307.5, 310. , 312.5, 315. , 317.5, 320. , 322.5,\n       325. , 327.5, 330. ], dtype=float32)Data variables: (2)air(time, lat, lon)float32-28.68 -28.49 ... 24.57 24.56long_name :4xDaily Air temperature at sigma level 995units :degCprecision :2GRIB_id :11GRIB_name :TMPvar_desc :Air temperaturedataset :NMC Reanalysislevel_desc :Surfacestatistic :Individual Obsparent_stat :Otheractual_range :[185.16 322.1 ]array([[[-28.68323  , -28.486452 , -28.479755 , ..., -30.658554 ,\n         -29.743628 , -28.474194 ],\n        [-26.076784 , -26.127504 , -26.4225   , ..., -32.5679   ,\n         -31.105167 , -28.442825 ],\n        [-22.770565 , -23.31516  , -24.042498 , ..., -31.165657 ,\n         -28.38291  , -24.144924 ],\n        ...,\n        [ 22.688152 ,  22.00097  ,  21.773153 , ...,  22.218397 ,\n          21.734531 ,  21.118395 ],\n        [ 23.31952  ,  23.16702  ,  22.698233 , ...,  22.43775  ,\n          22.190727 ,  21.715578 ],\n        [ 23.903486 ,  23.89203  ,  23.585333 , ...,  23.154608 ,\n          22.947426 ,  22.889124 ]],\n\n       [[-32.41607  , -32.44866  , -32.738483 , ..., -31.54482  ,\n         -30.430185 , -29.205448 ],\n        [-31.216885 , -31.08063  , -31.236965 , ..., -32.135708 ,\n         -30.825186 , -28.42241  ],\n        [-27.826433 , -28.123934 , -28.78045  , ..., -29.734114 ,\n         -27.383936 , -23.491434 ],\n...\n        [ 24.899088 ,  24.200085 ,  24.072004 , ...,  24.861843 ,\n          24.510258 ,  23.995668 ],\n        [ 25.815008 ,  25.661922 ,  25.121607 , ...,  24.954088 ,\n          25.071083 ,  24.735588 ],\n        [ 26.023424 ,  26.06767  ,  25.74576  , ...,  25.566338 ,\n          25.591848 ,  25.630259 ]],\n\n       [[-26.348473 , -26.260897 , -26.380894 , ..., -33.07903  ,\n         -32.067986 , -30.868315 ],\n        [-25.419994 , -24.849277 , -24.405483 , ..., -34.531376 ,\n         -32.82783  , -30.179682 ],\n        [-23.181051 , -23.56476  , -23.574757 , ..., -35.446938 ,\n         -31.91259  , -26.923311 ],\n        ...,\n        [ 23.299198 ,  22.541454 ,  22.60839  , ...,  23.378307 ,\n          23.067505 ,  22.662996 ],\n        [ 24.295895 ,  24.286139 ,  24.031782 , ...,  23.80259  ,\n          23.908312 ,  23.579037 ],\n        [ 24.897346 ,  25.076134 ,  24.909689 , ...,  24.547583 ,\n          24.573233 ,  24.560413 ]]], dtype=float32)air_kelvin(time, lat, lon)float32244.5 244.7 244.7 ... 297.7 297.7long_name :4xDaily Air temperature at sigma level 995units :degKprecision :2GRIB_id :11GRIB_name :TMPvar_desc :Air temperaturedataset :NMC Reanalysislevel_desc :Surfacestatistic :Individual Obsparent_stat :Otheractual_range :[185.16 322.1 ]array([[[244.4667 , 244.66354, 244.67027, ..., 242.49142, 243.40633,\n         244.67577],\n        [247.07323, 247.02248, 246.7275 , ..., 240.58205, 242.04489,\n         244.70726],\n        [250.37941, 249.83484, 249.10748, ..., 241.98434, 244.76712,\n         249.00505],\n        ...,\n        [295.83795, 295.15085, 294.9229 , ..., 295.36826, 294.88437,\n         294.26828],\n        [296.46942, 296.31686, 295.84802, ..., 295.5876 , 295.34058,\n         294.86536],\n        [297.05316, 297.0418 , 296.73517, ..., 296.30438, 296.09732,\n         296.0389 ]],\n\n       [[240.73384, 240.7013 , 240.4115 , ..., 241.60518, 242.71988,\n         243.94455],\n        [241.93309, 242.06935, 241.913  , ..., 241.01428, 242.32481,\n         244.72758],\n        [245.32361, 245.0261 , 244.36955, ..., 243.41588, 245.7661 ,\n         249.65858],\n...\n        [298.04895, 297.35007, 297.22195, ..., 298.01172, 297.66013,\n         297.14554],\n        [298.96484, 298.81186, 298.27136, ..., 298.10403, 298.22104,\n         297.88547],\n        [299.17334, 299.2175 , 298.89566, ..., 298.71625, 298.74167,\n         298.7802 ]],\n\n       [[246.80156, 246.88907, 246.76907, ..., 240.07089, 241.08206,\n         242.2817 ],\n        [247.72998, 248.30064, 248.74443, ..., 238.61859, 240.3222 ,\n         242.97026],\n        [249.96893, 249.58516, 249.57521, ..., 237.70308, 241.23743,\n         246.22667],\n        ...,\n        [296.4491 , 295.6914 , 295.75824, ..., 296.52817, 296.21747,\n         295.8128 ],\n        [297.44586, 297.43613, 297.1817 , ..., 296.95242, 297.05823,\n         296.72897],\n        [298.0472 , 298.22598, 298.0595 , ..., 297.6975 , 297.72318,\n         297.71024]]], dtype=float32)Attributes: (5)Conventions :COARDStitle :4x daily NMC reanalysis (1948)description :Data is from NMC initialized reanalysis\n(4x/day).  These are the 0.9950 sigma level values.platform :Modelreferences :http://www.esrl.noaa.gov/psd/data/gridded/data.ncep.reanalysis.html\n\n\nThis is a really short time series but as an example, let’s calculate a monthly climatology (at least for 2 months). For this we can use groupby()\n\nds_clim = ds_mon.groupby(ds_mon.time.dt.month).mean()",
    "crumbs": [
      "Data Tutorials",
      "Data viz and use",
      "03. Introduction to `xarray`"
    ]
  },
  {
    "objectID": "notebooks-data/02_Xarray_hvplot.html#plot-results",
    "href": "notebooks-data/02_Xarray_hvplot.html#plot-results",
    "title": "03. Introduction to xarray",
    "section": "Plot results",
    "text": "Plot results\nFinally, let’s plot the results! This will plot the lat/lon axes of the original ds DataArray.\n\nds_clim.air.sel(month=10).plot()",
    "crumbs": [
      "Data Tutorials",
      "Data viz and use",
      "03. Introduction to `xarray`"
    ]
  },
  {
    "objectID": "notebooks-data/02_IO_Zarr.html#about-our-product",
    "href": "notebooks-data/02_IO_Zarr.html#about-our-product",
    "title": "IO Zarr file",
    "section": "About our product",
    "text": "About our product\nOur final product INDIAN_OCEAN_025GRID_DAILY.zarr is a blended dataset formated as a .zarr file, containing daily cleaned and interpolated data from fifteen variables across multiple sources, mostly from processed NASA/NOAA and Copernicus collections: * adt: sea surface height above geoid (m) * air_temp: air temperature (K) * CHL: chlorophyll-a concentration (mg/m3) * CHL_uncertainty: chlorophyll-a concentration uncertainty (%) * mlotst: mean ocean mixed layer thickness (m) * sla: sea level anomaly (m) * so: sea salinity concentration (m-3 or PSL) * sst: sea surface temperature (K) * topo: topography (m) * u_curr: u-component of total surface currents (m/s) * v_curr: v-component of total surface currents (m/s) * ug_curr: u-component of geostrophic surface currents (m/s) * vg_curr: v-component of geostrophic surface currents (m/s) * u_wind: u-component of surface wind (m/s) * v_wind: v-component of surface wind (m/s)\nWe also computed four additional components, namely: * curr_speed: total current speed (m/s) * curr_dir: total current direction (degrees) * wind_speed: surface wind speed (m/s) * wind_dir: surface wind direction (degrees)\nAll variables have been broadcasted to all fit in the temporal range we have. Therefore, not all variable data are available at any time. Check out each individual variable before use.",
    "crumbs": [
      "Data Tutorials",
      "Indian Ocean Zarr",
      "IO Zarr file"
    ]
  },
  {
    "objectID": "notebooks-data/02_IO_Zarr.html#import-necessary-libraries",
    "href": "notebooks-data/02_IO_Zarr.html#import-necessary-libraries",
    "title": "IO Zarr file",
    "section": "Import necessary libraries",
    "text": "Import necessary libraries\n\n! pip install cmocean\n\nCollecting cmocean\n  Using cached cmocean-3.0.3-py3-none-any.whl (222 kB)\nRequirement already satisfied: matplotlib in /srv/conda/envs/notebook/lib/python3.9/site-packages (from cmocean) (3.7.1)\nRequirement already satisfied: numpy in /srv/conda/envs/notebook/lib/python3.9/site-packages (from cmocean) (1.23.5)\nRequirement already satisfied: packaging in /srv/conda/envs/notebook/lib/python3.9/site-packages (from cmocean) (23.1)\nRequirement already satisfied: contourpy&gt;=1.0.1 in /srv/conda/envs/notebook/lib/python3.9/site-packages (from matplotlib-&gt;cmocean) (1.0.7)\nRequirement already satisfied: cycler&gt;=0.10 in /srv/conda/envs/notebook/lib/python3.9/site-packages (from matplotlib-&gt;cmocean) (0.11.0)\nRequirement already satisfied: fonttools&gt;=4.22.0 in /srv/conda/envs/notebook/lib/python3.9/site-packages (from matplotlib-&gt;cmocean) (4.39.4)\nRequirement already satisfied: kiwisolver&gt;=1.0.1 in /srv/conda/envs/notebook/lib/python3.9/site-packages (from matplotlib-&gt;cmocean) (1.4.4)\nRequirement already satisfied: pillow&gt;=6.2.0 in /srv/conda/envs/notebook/lib/python3.9/site-packages (from matplotlib-&gt;cmocean) (9.5.0)\nRequirement already satisfied: pyparsing&gt;=2.3.1 in /srv/conda/envs/notebook/lib/python3.9/site-packages (from matplotlib-&gt;cmocean) (3.0.9)\nRequirement already satisfied: python-dateutil&gt;=2.7 in /srv/conda/envs/notebook/lib/python3.9/site-packages (from matplotlib-&gt;cmocean) (2.8.2)\nRequirement already satisfied: importlib-resources&gt;=3.2.0 in /srv/conda/envs/notebook/lib/python3.9/site-packages (from matplotlib-&gt;cmocean) (5.12.0)\nRequirement already satisfied: zipp&gt;=3.1.0 in /srv/conda/envs/notebook/lib/python3.9/site-packages (from importlib-resources&gt;=3.2.0-&gt;matplotlib-&gt;cmocean) (3.15.0)\nRequirement already satisfied: six&gt;=1.5 in /srv/conda/envs/notebook/lib/python3.9/site-packages (from python-dateutil&gt;=2.7-&gt;matplotlib-&gt;cmocean) (1.16.0)\nInstalling collected packages: cmocean\nSuccessfully installed cmocean-3.0.3\n\n\n\nimport xarray as xr\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt # simple plotting\nimport holoviews as hv # simple plotting\nimport hvplot.xarray # simple plotting",
    "crumbs": [
      "Data Tutorials",
      "Indian Ocean Zarr",
      "IO Zarr file"
    ]
  },
  {
    "objectID": "notebooks-data/02_IO_Zarr.html#read-data",
    "href": "notebooks-data/02_IO_Zarr.html#read-data",
    "title": "IO Zarr file",
    "section": "Read data",
    "text": "Read data\n\nds = xr.open_zarr('/home/jovyan/shared/data/INDIAN_OCEAN_025GRID_DAILY.zarr/')\n\n\nds\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:          (time: 16071, lat: 177, lon: 241)\nCoordinates:\n  * lat              (lat) float32 32.0 31.75 31.5 31.25 ... -11.5 -11.75 -12.0\n  * lon              (lon) float32 42.0 42.25 42.5 42.75 ... 101.5 101.8 102.0\n  * time             (time) datetime64[ns] 1979-01-01 1979-01-02 ... 2022-12-31\nData variables: (12/19)\n    CHL              (time, lat, lon) float32 dask.array&lt;chunksize=(100, 177, 241), meta=np.ndarray&gt;\n    CHL_uncertainty  (time, lat, lon) float32 dask.array&lt;chunksize=(100, 177, 241), meta=np.ndarray&gt;\n    adt              (time, lat, lon) float32 dask.array&lt;chunksize=(100, 177, 241), meta=np.ndarray&gt;\n    air_temp         (time, lat, lon) float32 dask.array&lt;chunksize=(100, 177, 241), meta=np.ndarray&gt;\n    curr_dir         (time, lat, lon) float32 dask.array&lt;chunksize=(100, 177, 241), meta=np.ndarray&gt;\n    curr_speed       (time, lat, lon) float32 dask.array&lt;chunksize=(100, 177, 241), meta=np.ndarray&gt;\n    ...               ...\n    ug_curr          (time, lat, lon) float32 dask.array&lt;chunksize=(100, 177, 241), meta=np.ndarray&gt;\n    v_curr           (time, lat, lon) float32 dask.array&lt;chunksize=(100, 177, 241), meta=np.ndarray&gt;\n    v_wind           (time, lat, lon) float32 dask.array&lt;chunksize=(100, 177, 241), meta=np.ndarray&gt;\n    vg_curr          (time, lat, lon) float32 dask.array&lt;chunksize=(100, 177, 241), meta=np.ndarray&gt;\n    wind_dir         (time, lat, lon) float32 dask.array&lt;chunksize=(100, 177, 241), meta=np.ndarray&gt;\n    wind_speed       (time, lat, lon) float32 dask.array&lt;chunksize=(100, 177, 241), meta=np.ndarray&gt;\nAttributes: (12/17)\n    creator_email:              minhphan@uw.edu\n    creator_name:               Minh Phan\n    creator_type:               person\n    date_created:               2023-07-19\n    geospatial_lat_max:         32.0\n    geospatial_lat_min:         -12.0\n    ...                         ...\n    geospatial_lon_units:       degrees_east\n    source:                     Earth & Space Research (ESR), Copernicus Clim...\n    summary:                    Daily mean of 0.25 x 0.25 degrees gridded dat...\n    time_coverage_end:          2022-12-31T23:59:59\n    time_coverage_start:        1979-01-01T00:00:00\n    title:                      Climate Data for Coastal Upwelling Machine Le...xarray.DatasetDimensions:time: 16071lat: 177lon: 241Coordinates: (3)lat(lat)float3232.0 31.75 31.5 ... -11.75 -12.0long_name :latitudestandard_name :latitudeunits :degrees_northarray([ 32.  ,  31.75,  31.5 ,  31.25,  31.  ,  30.75,  30.5 ,  30.25,  30.  ,\n        29.75,  29.5 ,  29.25,  29.  ,  28.75,  28.5 ,  28.25,  28.  ,  27.75,\n        27.5 ,  27.25,  27.  ,  26.75,  26.5 ,  26.25,  26.  ,  25.75,  25.5 ,\n        25.25,  25.  ,  24.75,  24.5 ,  24.25,  24.  ,  23.75,  23.5 ,  23.25,\n        23.  ,  22.75,  22.5 ,  22.25,  22.  ,  21.75,  21.5 ,  21.25,  21.  ,\n        20.75,  20.5 ,  20.25,  20.  ,  19.75,  19.5 ,  19.25,  19.  ,  18.75,\n        18.5 ,  18.25,  18.  ,  17.75,  17.5 ,  17.25,  17.  ,  16.75,  16.5 ,\n        16.25,  16.  ,  15.75,  15.5 ,  15.25,  15.  ,  14.75,  14.5 ,  14.25,\n        14.  ,  13.75,  13.5 ,  13.25,  13.  ,  12.75,  12.5 ,  12.25,  12.  ,\n        11.75,  11.5 ,  11.25,  11.  ,  10.75,  10.5 ,  10.25,  10.  ,   9.75,\n         9.5 ,   9.25,   9.  ,   8.75,   8.5 ,   8.25,   8.  ,   7.75,   7.5 ,\n         7.25,   7.  ,   6.75,   6.5 ,   6.25,   6.  ,   5.75,   5.5 ,   5.25,\n         5.  ,   4.75,   4.5 ,   4.25,   4.  ,   3.75,   3.5 ,   3.25,   3.  ,\n         2.75,   2.5 ,   2.25,   2.  ,   1.75,   1.5 ,   1.25,   1.  ,   0.75,\n         0.5 ,   0.25,   0.  ,  -0.25,  -0.5 ,  -0.75,  -1.  ,  -1.25,  -1.5 ,\n        -1.75,  -2.  ,  -2.25,  -2.5 ,  -2.75,  -3.  ,  -3.25,  -3.5 ,  -3.75,\n        -4.  ,  -4.25,  -4.5 ,  -4.75,  -5.  ,  -5.25,  -5.5 ,  -5.75,  -6.  ,\n        -6.25,  -6.5 ,  -6.75,  -7.  ,  -7.25,  -7.5 ,  -7.75,  -8.  ,  -8.25,\n        -8.5 ,  -8.75,  -9.  ,  -9.25,  -9.5 ,  -9.75, -10.  , -10.25, -10.5 ,\n       -10.75, -11.  , -11.25, -11.5 , -11.75, -12.  ], dtype=float32)lon(lon)float3242.0 42.25 42.5 ... 101.8 102.0long_name :longitudestandard_name :longitudeunits :degrees_eastarray([ 42.  ,  42.25,  42.5 , ..., 101.5 , 101.75, 102.  ], dtype=float32)time(time)datetime64[ns]1979-01-01 ... 2022-12-31axis :Tcomment :Data is averaged over the daylong_name :time centered on the daystandard_name :timetime_bounds :2000-01-01 00:00:00 to 2000-01-01 23:59:59array(['1979-01-01T00:00:00.000000000', '1979-01-02T00:00:00.000000000',\n       '1979-01-03T00:00:00.000000000', ..., '2022-12-29T00:00:00.000000000',\n       '2022-12-30T00:00:00.000000000', '2022-12-31T00:00:00.000000000'],\n      dtype='datetime64[ns]')Data variables: (19)CHL(time, lat, lon)float32dask.array&lt;chunksize=(100, 177, 241), meta=np.ndarray&gt;_ChunkSizes :[1, 256, 256]ancillary_variables :flags CHL_uncertaintycoverage_content_type :modelResultinput_files_reprocessings :Processors versions: MODIS R2022.0NRT/VIIRSN R2022.0NRT/OLCIA 07.02/VIIRSJ1 R2022.0NRT/OLCIB 07.02long_name :Chlorophyll-a concentration - Mean of the binned pixelsstandard_name :mass_concentration_of_chlorophyll_a_in_sea_watertype :surfaceunits :milligram m-3valid_max :1000.0valid_min :0.0\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n2.55 GiB\n16.27 MiB\n\n\nShape\n(16071, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n161 chunks in 2 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\nCHL_uncertainty\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 177, 241), meta=np.ndarray&gt;\n\n\n\n\n_ChunkSizes :\n\n[1, 256, 256]\n\ncoverage_content_type :\n\nqualityInformation\n\nlong_name :\n\nChlorophyll-a concentration - Uncertainty estimation\n\nunits :\n\n%\n\nvalid_max :\n\n32767\n\nvalid_min :\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n2.55 GiB\n16.27 MiB\n\n\nShape\n(16071, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n161 chunks in 2 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nadt\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 177, 241), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nThe absolute dynamic topography is the sea surface height above geoid; the adt is obtained as follows: adt=sla+mdt where mdt is the mean dynamic topography; see the product user manual for details\n\ngrid_mapping :\n\ncrs\n\nlong_name :\n\nAbsolute dynamic topography\n\nstandard_name :\n\nsea_surface_height_above_geoid\n\nunits :\n\nm\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n2.55 GiB\n16.27 MiB\n\n\nShape\n(16071, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n161 chunks in 2 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nair_temp\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 177, 241), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n2 metre temperature\n\nnameCDM :\n\n2_metre_temperature_surface\n\nnameECMWF :\n\n2 metre temperature\n\nproduct_type :\n\nanalysis\n\nshortNameECMWF :\n\n2t\n\nstandard_name :\n\nair_temperature\n\nunits :\n\nK\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n2.55 GiB\n16.27 MiB\n\n\nShape\n(16071, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n161 chunks in 2 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\ncurr_dir\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 177, 241), meta=np.ndarray&gt;\n\n\n\n\ncomments :\n\nComputed from total surface current velocity elements. Velocities are an average over the top 30m of the mixed layer\n\ndepth :\n\n15m\n\nlong_name :\n\naverage direction of total surface currents\n\nunits :\n\ndegrees\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n2.55 GiB\n16.27 MiB\n\n\nShape\n(16071, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n161 chunks in 2 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\ncurr_speed\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 177, 241), meta=np.ndarray&gt;\n\n\n\n\ncomments :\n\nVelocities are an average over the top 30m of the mixed layer\n\ndepth :\n\n15m\n\nlong_name :\n\naverage total surface current speed\n\nunits :\n\nm s**-1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n2.55 GiB\n16.27 MiB\n\n\nShape\n(16071, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n161 chunks in 2 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nmlotst\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(500, 177, 241), meta=np.ndarray&gt;\n\n\n\n\n_ChunkSizes :\n\n[1, 681, 1440]\n\ncell_methods :\n\narea: mean\n\nlong_name :\n\nDensity ocean mixed layer thickness\n\nstandard_name :\n\nocean_mixed_layer_thickness_defined_by_sigma_theta\n\nunit_long :\n\nMeters\n\nunits :\n\nm\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n2.55 GiB\n81.36 MiB\n\n\nShape\n(16071, 177, 241)\n(500, 177, 241)\n\n\nDask graph\n33 chunks in 2 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nsla\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 177, 241), meta=np.ndarray&gt;\n\n\n\n\nancillary_variables :\n\nerr_sla\n\ncomment :\n\nThe sea level anomaly is the sea surface height above mean sea surface; it is referenced to the [1993, 2012] period; see the product user manual for details\n\ngrid_mapping :\n\ncrs\n\nlong_name :\n\nSea level anomaly\n\nstandard_name :\n\nsea_surface_height_above_sea_level\n\nunits :\n\nm\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n2.55 GiB\n16.27 MiB\n\n\nShape\n(16071, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n161 chunks in 2 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nso\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(500, 177, 241), meta=np.ndarray&gt;\n\n\n\n\n_ChunkSizes :\n\n[1, 7, 341, 720]\n\ncell_methods :\n\narea: mean\n\nlong_name :\n\nmean sea water salinity at 0.49 metres below ocean surface\n\nstandard_name :\n\nsea_water_salinity\n\nunit_long :\n\nPractical Salinity Unit\n\nunits :\n\n1e-3\n\nvalid_max :\n\n28336\n\nvalid_min :\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n2.55 GiB\n81.36 MiB\n\n\nShape\n(16071, 177, 241)\n(500, 177, 241)\n\n\nDask graph\n33 chunks in 2 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nsst\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 177, 241), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\nSea surface temperature\n\nnameCDM :\n\nSea_surface_temperature_surface\n\nnameECMWF :\n\nSea surface temperature\n\nproduct_type :\n\nanalysis\n\nshortNameECMWF :\n\nsst\n\nstandard_name :\n\nsea_surface_temperature\n\nunits :\n\nK\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n2.55 GiB\n16.27 MiB\n\n\nShape\n(16071, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n161 chunks in 2 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\ntopo\n\n\n(lat, lon)\n\n\nfloat64\n\n\ndask.array&lt;chunksize=(177, 241), meta=np.ndarray&gt;\n\n\n\n\ncolorBarMaximum :\n\n8000.0\n\ncolorBarMinimum :\n\n-8000.0\n\ncolorBarPalette :\n\nTopography\n\ngrid_mapping :\n\nGDAL_Geographics\n\nioos_category :\n\nLocation\n\nlong_name :\n\nTopography\n\nstandard_name :\n\naltitude\n\nunits :\n\nmeters\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n333.26 kiB\n333.26 kiB\n\n\nShape\n(177, 241)\n(177, 241)\n\n\nDask graph\n1 chunks in 2 graph layers\n\n\nData type\nfloat64 numpy.ndarray\n\n\n\n\n\n\n\n\n\nu_curr\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 177, 241), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nVelocities are an average over the top 30m of the mixed layer\n\ncoverage_content_type :\n\nmodelResult\n\ndepth :\n\n15m\n\nlong_name :\n\nzonal total surface current\n\nsource :\n\nSSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148 ; WIND source: ECMWF ERA5 10m wind DOI: 10.24381/cds.adbb2d47 ; SST source: CMC 0.2 deg SST V2.0 DOI: 10.5067/GHCMC-4FM02\n\nstandard_name :\n\neastward_sea_water_velocity\n\nunits :\n\nm s-1\n\nvalid_max :\n\n3.0\n\nvalid_min :\n\n-3.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n2.55 GiB\n16.27 MiB\n\n\nShape\n(16071, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n161 chunks in 2 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nu_wind\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 177, 241), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n10 metre U wind component\n\nnameCDM :\n\n10_metre_U_wind_component_surface\n\nnameECMWF :\n\n10 metre U wind component\n\nproduct_type :\n\nanalysis\n\nshortNameECMWF :\n\n10u\n\nstandard_name :\n\neastward_wind\n\nunits :\n\nm s**-1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n2.55 GiB\n16.27 MiB\n\n\nShape\n(16071, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n161 chunks in 2 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nug_curr\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 177, 241), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nGeostrophic velocities calculated from absolute dynamic topography\n\ndepth :\n\n15m\n\nlong_name :\n\nzonal geostrophic surface current\n\nsource :\n\nSSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148\n\nstandard_name :\n\ngeostrophic_eastward_sea_water_velocity\n\nunits :\n\nm s-1\n\nvalid_max :\n\n3.0\n\nvalid_min :\n\n-3.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n2.55 GiB\n16.27 MiB\n\n\nShape\n(16071, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n161 chunks in 2 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nv_curr\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 177, 241), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nVelocities are an average over the top 30m of the mixed layer\n\ncoverage_content_type :\n\nmodelResult\n\ndepth :\n\n15m\n\nlong_name :\n\nmeridional total surface current\n\nsource :\n\nSSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148 ; WIND source: ECMWF ERA5 10m wind DOI: 10.24381/cds.adbb2d47 ; SST source: CMC 0.2 deg SST V2.0 DOI: 10.5067/GHCMC-4FM02\n\nstandard_name :\n\nnorthward_sea_water_velocity\n\nunits :\n\nm s-1\n\nvalid_max :\n\n3.0\n\nvalid_min :\n\n-3.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n2.55 GiB\n16.27 MiB\n\n\nShape\n(16071, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n161 chunks in 2 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nv_wind\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 177, 241), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n10 metre V wind component\n\nnameCDM :\n\n10_metre_V_wind_component_surface\n\nnameECMWF :\n\n10 metre V wind component\n\nproduct_type :\n\nanalysis\n\nshortNameECMWF :\n\n10v\n\nstandard_name :\n\nnorthward_wind\n\nunits :\n\nm s**-1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n2.55 GiB\n16.27 MiB\n\n\nShape\n(16071, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n161 chunks in 2 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nvg_curr\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 177, 241), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nGeostrophic velocities calculated from absolute dynamic topography\n\ndepth :\n\n15m\n\nlong_name :\n\nmeridional geostrophic surface current\n\nsource :\n\nSSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148\n\nstandard_name :\n\ngeostrophic_northward_sea_water_velocity\n\nunits :\n\nm s-1\n\nvalid_max :\n\n3.0\n\nvalid_min :\n\n-3.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n2.55 GiB\n16.27 MiB\n\n\nShape\n(16071, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n161 chunks in 2 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nwind_dir\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 177, 241), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n10 metre wind direction\n\nunits :\n\ndegrees\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n2.55 GiB\n16.27 MiB\n\n\nShape\n(16071, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n161 chunks in 2 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nwind_speed\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 177, 241), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n10 metre absolute speed\n\nunits :\n\nm s**-1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n2.55 GiB\n16.27 MiB\n\n\nShape\n(16071, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n161 chunks in 2 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\nIndexes: (3)latPandasIndexPandasIndex(Index([  32.0,  31.75,   31.5,  31.25,   31.0,  30.75,   30.5,  30.25,   30.0,\n        29.75,\n       ...\n        -9.75,  -10.0, -10.25,  -10.5, -10.75,  -11.0, -11.25,  -11.5, -11.75,\n        -12.0],\n      dtype='float32', name='lat', length=177))lonPandasIndexPandasIndex(Index([  42.0,  42.25,   42.5,  42.75,   43.0,  43.25,   43.5,  43.75,   44.0,\n        44.25,\n       ...\n        99.75,  100.0, 100.25,  100.5, 100.75,  101.0, 101.25,  101.5, 101.75,\n        102.0],\n      dtype='float32', name='lon', length=241))timePandasIndexPandasIndex(DatetimeIndex(['1979-01-01', '1979-01-02', '1979-01-03', '1979-01-04',\n               '1979-01-05', '1979-01-06', '1979-01-07', '1979-01-08',\n               '1979-01-09', '1979-01-10',\n               ...\n               '2022-12-22', '2022-12-23', '2022-12-24', '2022-12-25',\n               '2022-12-26', '2022-12-27', '2022-12-28', '2022-12-29',\n               '2022-12-30', '2022-12-31'],\n              dtype='datetime64[ns]', name='time', length=16071, freq=None))Attributes: (17)creator_email :minhphan@uw.educreator_name :Minh Phancreator_type :persondate_created :2023-07-19geospatial_lat_max :32.0geospatial_lat_min :-12.0geospatial_lat_resolution :0.25geospatial_lat_units :degrees_northgeospatial_lon_max :102.0geospatial_lon_min :42.0geospatial_lon_resolution :0.25geospatial_lon_units :degrees_eastsource :Earth & Space Research (ESR), Copernicus Climate Change Service (C3S), Copernicus Marine Environment Monitoring Service (CMEMS), United States Geological Survey (USGS)summary :Daily mean of 0.25 x 0.25 degrees gridded data from multiple climate variables that may influence the patterns of coastal upwelling in the focused areatime_coverage_end :2022-12-31T23:59:59time_coverage_start :1979-01-01T00:00:00title :Climate Data for Coastal Upwelling Machine Learning Project in Indian Ocean\n\n\nWe can slice data by the dimensions (latitude, longitude, time) and data variables.\n\n# slice by latitude\n# notice how we specify the range in reverse\nds.sel(lat=slice(0, -12))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:          (time: 16071, lat: 49, lon: 241)\nCoordinates:\n  * lat              (lat) float32 0.0 -0.25 -0.5 -0.75 ... -11.5 -11.75 -12.0\n  * lon              (lon) float32 42.0 42.25 42.5 42.75 ... 101.5 101.8 102.0\n  * time             (time) datetime64[ns] 1979-01-01 1979-01-02 ... 2022-12-31\nData variables: (12/19)\n    CHL              (time, lat, lon) float32 dask.array&lt;chunksize=(100, 49, 241), meta=np.ndarray&gt;\n    CHL_uncertainty  (time, lat, lon) float32 dask.array&lt;chunksize=(100, 49, 241), meta=np.ndarray&gt;\n    adt              (time, lat, lon) float32 dask.array&lt;chunksize=(100, 49, 241), meta=np.ndarray&gt;\n    air_temp         (time, lat, lon) float32 dask.array&lt;chunksize=(100, 49, 241), meta=np.ndarray&gt;\n    curr_dir         (time, lat, lon) float32 dask.array&lt;chunksize=(100, 49, 241), meta=np.ndarray&gt;\n    curr_speed       (time, lat, lon) float32 dask.array&lt;chunksize=(100, 49, 241), meta=np.ndarray&gt;\n    ...               ...\n    ug_curr          (time, lat, lon) float32 dask.array&lt;chunksize=(100, 49, 241), meta=np.ndarray&gt;\n    v_curr           (time, lat, lon) float32 dask.array&lt;chunksize=(100, 49, 241), meta=np.ndarray&gt;\n    v_wind           (time, lat, lon) float32 dask.array&lt;chunksize=(100, 49, 241), meta=np.ndarray&gt;\n    vg_curr          (time, lat, lon) float32 dask.array&lt;chunksize=(100, 49, 241), meta=np.ndarray&gt;\n    wind_dir         (time, lat, lon) float32 dask.array&lt;chunksize=(100, 49, 241), meta=np.ndarray&gt;\n    wind_speed       (time, lat, lon) float32 dask.array&lt;chunksize=(100, 49, 241), meta=np.ndarray&gt;\nAttributes: (12/17)\n    creator_email:              minhphan@uw.edu\n    creator_name:               Minh Phan\n    creator_type:               person\n    date_created:               2023-07-19\n    geospatial_lat_max:         32.0\n    geospatial_lat_min:         -12.0\n    ...                         ...\n    geospatial_lon_units:       degrees_east\n    source:                     Earth & Space Research (ESR), Copernicus Clim...\n    summary:                    Daily mean of 0.25 x 0.25 degrees gridded dat...\n    time_coverage_end:          2022-12-31T23:59:59\n    time_coverage_start:        1979-01-01T00:00:00\n    title:                      Climate Data for Coastal Upwelling Machine Le...xarray.DatasetDimensions:time: 16071lat: 49lon: 241Coordinates: (3)lat(lat)float320.0 -0.25 -0.5 ... -11.75 -12.0long_name :latitudestandard_name :latitudeunits :degrees_northarray([  0.  ,  -0.25,  -0.5 ,  -0.75,  -1.  ,  -1.25,  -1.5 ,  -1.75,  -2.  ,\n        -2.25,  -2.5 ,  -2.75,  -3.  ,  -3.25,  -3.5 ,  -3.75,  -4.  ,  -4.25,\n        -4.5 ,  -4.75,  -5.  ,  -5.25,  -5.5 ,  -5.75,  -6.  ,  -6.25,  -6.5 ,\n        -6.75,  -7.  ,  -7.25,  -7.5 ,  -7.75,  -8.  ,  -8.25,  -8.5 ,  -8.75,\n        -9.  ,  -9.25,  -9.5 ,  -9.75, -10.  , -10.25, -10.5 , -10.75, -11.  ,\n       -11.25, -11.5 , -11.75, -12.  ], dtype=float32)lon(lon)float3242.0 42.25 42.5 ... 101.8 102.0long_name :longitudestandard_name :longitudeunits :degrees_eastarray([ 42.  ,  42.25,  42.5 , ..., 101.5 , 101.75, 102.  ], dtype=float32)time(time)datetime64[ns]1979-01-01 ... 2022-12-31axis :Tcomment :Data is averaged over the daylong_name :time centered on the daystandard_name :timetime_bounds :2000-01-01 00:00:00 to 2000-01-01 23:59:59array(['1979-01-01T00:00:00.000000000', '1979-01-02T00:00:00.000000000',\n       '1979-01-03T00:00:00.000000000', ..., '2022-12-29T00:00:00.000000000',\n       '2022-12-30T00:00:00.000000000', '2022-12-31T00:00:00.000000000'],\n      dtype='datetime64[ns]')Data variables: (19)CHL(time, lat, lon)float32dask.array&lt;chunksize=(100, 49, 241), meta=np.ndarray&gt;_ChunkSizes :[1, 256, 256]ancillary_variables :flags CHL_uncertaintycoverage_content_type :modelResultinput_files_reprocessings :Processors versions: MODIS R2022.0NRT/VIIRSN R2022.0NRT/OLCIA 07.02/VIIRSJ1 R2022.0NRT/OLCIB 07.02long_name :Chlorophyll-a concentration - Mean of the binned pixelsstandard_name :mass_concentration_of_chlorophyll_a_in_sea_watertype :surfaceunits :milligram m-3valid_max :1000.0valid_min :0.0\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n723.96 MiB\n4.50 MiB\n\n\nShape\n(16071, 49, 241)\n(100, 49, 241)\n\n\nDask graph\n161 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\nCHL_uncertainty\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 49, 241), meta=np.ndarray&gt;\n\n\n\n\n_ChunkSizes :\n\n[1, 256, 256]\n\ncoverage_content_type :\n\nqualityInformation\n\nlong_name :\n\nChlorophyll-a concentration - Uncertainty estimation\n\nunits :\n\n%\n\nvalid_max :\n\n32767\n\nvalid_min :\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n723.96 MiB\n4.50 MiB\n\n\nShape\n(16071, 49, 241)\n(100, 49, 241)\n\n\nDask graph\n161 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nadt\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 49, 241), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nThe absolute dynamic topography is the sea surface height above geoid; the adt is obtained as follows: adt=sla+mdt where mdt is the mean dynamic topography; see the product user manual for details\n\ngrid_mapping :\n\ncrs\n\nlong_name :\n\nAbsolute dynamic topography\n\nstandard_name :\n\nsea_surface_height_above_geoid\n\nunits :\n\nm\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n723.96 MiB\n4.50 MiB\n\n\nShape\n(16071, 49, 241)\n(100, 49, 241)\n\n\nDask graph\n161 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nair_temp\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 49, 241), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n2 metre temperature\n\nnameCDM :\n\n2_metre_temperature_surface\n\nnameECMWF :\n\n2 metre temperature\n\nproduct_type :\n\nanalysis\n\nshortNameECMWF :\n\n2t\n\nstandard_name :\n\nair_temperature\n\nunits :\n\nK\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n723.96 MiB\n4.50 MiB\n\n\nShape\n(16071, 49, 241)\n(100, 49, 241)\n\n\nDask graph\n161 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\ncurr_dir\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 49, 241), meta=np.ndarray&gt;\n\n\n\n\ncomments :\n\nComputed from total surface current velocity elements. Velocities are an average over the top 30m of the mixed layer\n\ndepth :\n\n15m\n\nlong_name :\n\naverage direction of total surface currents\n\nunits :\n\ndegrees\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n723.96 MiB\n4.50 MiB\n\n\nShape\n(16071, 49, 241)\n(100, 49, 241)\n\n\nDask graph\n161 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\ncurr_speed\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 49, 241), meta=np.ndarray&gt;\n\n\n\n\ncomments :\n\nVelocities are an average over the top 30m of the mixed layer\n\ndepth :\n\n15m\n\nlong_name :\n\naverage total surface current speed\n\nunits :\n\nm s**-1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n723.96 MiB\n4.50 MiB\n\n\nShape\n(16071, 49, 241)\n(100, 49, 241)\n\n\nDask graph\n161 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nmlotst\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(500, 49, 241), meta=np.ndarray&gt;\n\n\n\n\n_ChunkSizes :\n\n[1, 681, 1440]\n\ncell_methods :\n\narea: mean\n\nlong_name :\n\nDensity ocean mixed layer thickness\n\nstandard_name :\n\nocean_mixed_layer_thickness_defined_by_sigma_theta\n\nunit_long :\n\nMeters\n\nunits :\n\nm\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n723.96 MiB\n22.52 MiB\n\n\nShape\n(16071, 49, 241)\n(500, 49, 241)\n\n\nDask graph\n33 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nsla\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 49, 241), meta=np.ndarray&gt;\n\n\n\n\nancillary_variables :\n\nerr_sla\n\ncomment :\n\nThe sea level anomaly is the sea surface height above mean sea surface; it is referenced to the [1993, 2012] period; see the product user manual for details\n\ngrid_mapping :\n\ncrs\n\nlong_name :\n\nSea level anomaly\n\nstandard_name :\n\nsea_surface_height_above_sea_level\n\nunits :\n\nm\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n723.96 MiB\n4.50 MiB\n\n\nShape\n(16071, 49, 241)\n(100, 49, 241)\n\n\nDask graph\n161 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nso\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(500, 49, 241), meta=np.ndarray&gt;\n\n\n\n\n_ChunkSizes :\n\n[1, 7, 341, 720]\n\ncell_methods :\n\narea: mean\n\nlong_name :\n\nmean sea water salinity at 0.49 metres below ocean surface\n\nstandard_name :\n\nsea_water_salinity\n\nunit_long :\n\nPractical Salinity Unit\n\nunits :\n\n1e-3\n\nvalid_max :\n\n28336\n\nvalid_min :\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n723.96 MiB\n22.52 MiB\n\n\nShape\n(16071, 49, 241)\n(500, 49, 241)\n\n\nDask graph\n33 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nsst\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 49, 241), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\nSea surface temperature\n\nnameCDM :\n\nSea_surface_temperature_surface\n\nnameECMWF :\n\nSea surface temperature\n\nproduct_type :\n\nanalysis\n\nshortNameECMWF :\n\nsst\n\nstandard_name :\n\nsea_surface_temperature\n\nunits :\n\nK\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n723.96 MiB\n4.50 MiB\n\n\nShape\n(16071, 49, 241)\n(100, 49, 241)\n\n\nDask graph\n161 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\ntopo\n\n\n(lat, lon)\n\n\nfloat64\n\n\ndask.array&lt;chunksize=(49, 241), meta=np.ndarray&gt;\n\n\n\n\ncolorBarMaximum :\n\n8000.0\n\ncolorBarMinimum :\n\n-8000.0\n\ncolorBarPalette :\n\nTopography\n\ngrid_mapping :\n\nGDAL_Geographics\n\nioos_category :\n\nLocation\n\nlong_name :\n\nTopography\n\nstandard_name :\n\naltitude\n\nunits :\n\nmeters\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n92.26 kiB\n92.26 kiB\n\n\nShape\n(49, 241)\n(49, 241)\n\n\nDask graph\n1 chunks in 3 graph layers\n\n\nData type\nfloat64 numpy.ndarray\n\n\n\n\n\n\n\n\n\nu_curr\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 49, 241), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nVelocities are an average over the top 30m of the mixed layer\n\ncoverage_content_type :\n\nmodelResult\n\ndepth :\n\n15m\n\nlong_name :\n\nzonal total surface current\n\nsource :\n\nSSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148 ; WIND source: ECMWF ERA5 10m wind DOI: 10.24381/cds.adbb2d47 ; SST source: CMC 0.2 deg SST V2.0 DOI: 10.5067/GHCMC-4FM02\n\nstandard_name :\n\neastward_sea_water_velocity\n\nunits :\n\nm s-1\n\nvalid_max :\n\n3.0\n\nvalid_min :\n\n-3.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n723.96 MiB\n4.50 MiB\n\n\nShape\n(16071, 49, 241)\n(100, 49, 241)\n\n\nDask graph\n161 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nu_wind\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 49, 241), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n10 metre U wind component\n\nnameCDM :\n\n10_metre_U_wind_component_surface\n\nnameECMWF :\n\n10 metre U wind component\n\nproduct_type :\n\nanalysis\n\nshortNameECMWF :\n\n10u\n\nstandard_name :\n\neastward_wind\n\nunits :\n\nm s**-1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n723.96 MiB\n4.50 MiB\n\n\nShape\n(16071, 49, 241)\n(100, 49, 241)\n\n\nDask graph\n161 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nug_curr\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 49, 241), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nGeostrophic velocities calculated from absolute dynamic topography\n\ndepth :\n\n15m\n\nlong_name :\n\nzonal geostrophic surface current\n\nsource :\n\nSSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148\n\nstandard_name :\n\ngeostrophic_eastward_sea_water_velocity\n\nunits :\n\nm s-1\n\nvalid_max :\n\n3.0\n\nvalid_min :\n\n-3.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n723.96 MiB\n4.50 MiB\n\n\nShape\n(16071, 49, 241)\n(100, 49, 241)\n\n\nDask graph\n161 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nv_curr\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 49, 241), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nVelocities are an average over the top 30m of the mixed layer\n\ncoverage_content_type :\n\nmodelResult\n\ndepth :\n\n15m\n\nlong_name :\n\nmeridional total surface current\n\nsource :\n\nSSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148 ; WIND source: ECMWF ERA5 10m wind DOI: 10.24381/cds.adbb2d47 ; SST source: CMC 0.2 deg SST V2.0 DOI: 10.5067/GHCMC-4FM02\n\nstandard_name :\n\nnorthward_sea_water_velocity\n\nunits :\n\nm s-1\n\nvalid_max :\n\n3.0\n\nvalid_min :\n\n-3.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n723.96 MiB\n4.50 MiB\n\n\nShape\n(16071, 49, 241)\n(100, 49, 241)\n\n\nDask graph\n161 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nv_wind\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 49, 241), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n10 metre V wind component\n\nnameCDM :\n\n10_metre_V_wind_component_surface\n\nnameECMWF :\n\n10 metre V wind component\n\nproduct_type :\n\nanalysis\n\nshortNameECMWF :\n\n10v\n\nstandard_name :\n\nnorthward_wind\n\nunits :\n\nm s**-1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n723.96 MiB\n4.50 MiB\n\n\nShape\n(16071, 49, 241)\n(100, 49, 241)\n\n\nDask graph\n161 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nvg_curr\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 49, 241), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nGeostrophic velocities calculated from absolute dynamic topography\n\ndepth :\n\n15m\n\nlong_name :\n\nmeridional geostrophic surface current\n\nsource :\n\nSSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148\n\nstandard_name :\n\ngeostrophic_northward_sea_water_velocity\n\nunits :\n\nm s-1\n\nvalid_max :\n\n3.0\n\nvalid_min :\n\n-3.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n723.96 MiB\n4.50 MiB\n\n\nShape\n(16071, 49, 241)\n(100, 49, 241)\n\n\nDask graph\n161 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nwind_dir\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 49, 241), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n10 metre wind direction\n\nunits :\n\ndegrees\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n723.96 MiB\n4.50 MiB\n\n\nShape\n(16071, 49, 241)\n(100, 49, 241)\n\n\nDask graph\n161 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nwind_speed\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 49, 241), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n10 metre absolute speed\n\nunits :\n\nm s**-1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n723.96 MiB\n4.50 MiB\n\n\nShape\n(16071, 49, 241)\n(100, 49, 241)\n\n\nDask graph\n161 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\nIndexes: (3)latPandasIndexPandasIndex(Index([   0.0,  -0.25,   -0.5,  -0.75,   -1.0,  -1.25,   -1.5,  -1.75,   -2.0,\n        -2.25,   -2.5,  -2.75,   -3.0,  -3.25,   -3.5,  -3.75,   -4.0,  -4.25,\n         -4.5,  -4.75,   -5.0,  -5.25,   -5.5,  -5.75,   -6.0,  -6.25,   -6.5,\n        -6.75,   -7.0,  -7.25,   -7.5,  -7.75,   -8.0,  -8.25,   -8.5,  -8.75,\n         -9.0,  -9.25,   -9.5,  -9.75,  -10.0, -10.25,  -10.5, -10.75,  -11.0,\n       -11.25,  -11.5, -11.75,  -12.0],\n      dtype='float32', name='lat'))lonPandasIndexPandasIndex(Index([  42.0,  42.25,   42.5,  42.75,   43.0,  43.25,   43.5,  43.75,   44.0,\n        44.25,\n       ...\n        99.75,  100.0, 100.25,  100.5, 100.75,  101.0, 101.25,  101.5, 101.75,\n        102.0],\n      dtype='float32', name='lon', length=241))timePandasIndexPandasIndex(DatetimeIndex(['1979-01-01', '1979-01-02', '1979-01-03', '1979-01-04',\n               '1979-01-05', '1979-01-06', '1979-01-07', '1979-01-08',\n               '1979-01-09', '1979-01-10',\n               ...\n               '2022-12-22', '2022-12-23', '2022-12-24', '2022-12-25',\n               '2022-12-26', '2022-12-27', '2022-12-28', '2022-12-29',\n               '2022-12-30', '2022-12-31'],\n              dtype='datetime64[ns]', name='time', length=16071, freq=None))Attributes: (17)creator_email :minhphan@uw.educreator_name :Minh Phancreator_type :persondate_created :2023-07-19geospatial_lat_max :32.0geospatial_lat_min :-12.0geospatial_lat_resolution :0.25geospatial_lat_units :degrees_northgeospatial_lon_max :102.0geospatial_lon_min :42.0geospatial_lon_resolution :0.25geospatial_lon_units :degrees_eastsource :Earth & Space Research (ESR), Copernicus Climate Change Service (C3S), Copernicus Marine Environment Monitoring Service (CMEMS), United States Geological Survey (USGS)summary :Daily mean of 0.25 x 0.25 degrees gridded data from multiple climate variables that may influence the patterns of coastal upwelling in the focused areatime_coverage_end :2022-12-31T23:59:59time_coverage_start :1979-01-01T00:00:00title :Climate Data for Coastal Upwelling Machine Learning Project in Indian Ocean\n\n\n\n# slice by longitude\nds.sel(lon=slice(42, 45))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:          (time: 16071, lat: 177, lon: 13)\nCoordinates:\n  * lat              (lat) float32 32.0 31.75 31.5 31.25 ... -11.5 -11.75 -12.0\n  * lon              (lon) float32 42.0 42.25 42.5 42.75 ... 44.5 44.75 45.0\n  * time             (time) datetime64[ns] 1979-01-01 1979-01-02 ... 2022-12-31\nData variables: (12/19)\n    CHL              (time, lat, lon) float32 dask.array&lt;chunksize=(100, 177, 13), meta=np.ndarray&gt;\n    CHL_uncertainty  (time, lat, lon) float32 dask.array&lt;chunksize=(100, 177, 13), meta=np.ndarray&gt;\n    adt              (time, lat, lon) float32 dask.array&lt;chunksize=(100, 177, 13), meta=np.ndarray&gt;\n    air_temp         (time, lat, lon) float32 dask.array&lt;chunksize=(100, 177, 13), meta=np.ndarray&gt;\n    curr_dir         (time, lat, lon) float32 dask.array&lt;chunksize=(100, 177, 13), meta=np.ndarray&gt;\n    curr_speed       (time, lat, lon) float32 dask.array&lt;chunksize=(100, 177, 13), meta=np.ndarray&gt;\n    ...               ...\n    ug_curr          (time, lat, lon) float32 dask.array&lt;chunksize=(100, 177, 13), meta=np.ndarray&gt;\n    v_curr           (time, lat, lon) float32 dask.array&lt;chunksize=(100, 177, 13), meta=np.ndarray&gt;\n    v_wind           (time, lat, lon) float32 dask.array&lt;chunksize=(100, 177, 13), meta=np.ndarray&gt;\n    vg_curr          (time, lat, lon) float32 dask.array&lt;chunksize=(100, 177, 13), meta=np.ndarray&gt;\n    wind_dir         (time, lat, lon) float32 dask.array&lt;chunksize=(100, 177, 13), meta=np.ndarray&gt;\n    wind_speed       (time, lat, lon) float32 dask.array&lt;chunksize=(100, 177, 13), meta=np.ndarray&gt;\nAttributes: (12/17)\n    creator_email:              minhphan@uw.edu\n    creator_name:               Minh Phan\n    creator_type:               person\n    date_created:               2023-07-19\n    geospatial_lat_max:         32.0\n    geospatial_lat_min:         -12.0\n    ...                         ...\n    geospatial_lon_units:       degrees_east\n    source:                     Earth & Space Research (ESR), Copernicus Clim...\n    summary:                    Daily mean of 0.25 x 0.25 degrees gridded dat...\n    time_coverage_end:          2022-12-31T23:59:59\n    time_coverage_start:        1979-01-01T00:00:00\n    title:                      Climate Data for Coastal Upwelling Machine Le...xarray.DatasetDimensions:time: 16071lat: 177lon: 13Coordinates: (3)lat(lat)float3232.0 31.75 31.5 ... -11.75 -12.0long_name :latitudestandard_name :latitudeunits :degrees_northarray([ 32.  ,  31.75,  31.5 ,  31.25,  31.  ,  30.75,  30.5 ,  30.25,  30.  ,\n        29.75,  29.5 ,  29.25,  29.  ,  28.75,  28.5 ,  28.25,  28.  ,  27.75,\n        27.5 ,  27.25,  27.  ,  26.75,  26.5 ,  26.25,  26.  ,  25.75,  25.5 ,\n        25.25,  25.  ,  24.75,  24.5 ,  24.25,  24.  ,  23.75,  23.5 ,  23.25,\n        23.  ,  22.75,  22.5 ,  22.25,  22.  ,  21.75,  21.5 ,  21.25,  21.  ,\n        20.75,  20.5 ,  20.25,  20.  ,  19.75,  19.5 ,  19.25,  19.  ,  18.75,\n        18.5 ,  18.25,  18.  ,  17.75,  17.5 ,  17.25,  17.  ,  16.75,  16.5 ,\n        16.25,  16.  ,  15.75,  15.5 ,  15.25,  15.  ,  14.75,  14.5 ,  14.25,\n        14.  ,  13.75,  13.5 ,  13.25,  13.  ,  12.75,  12.5 ,  12.25,  12.  ,\n        11.75,  11.5 ,  11.25,  11.  ,  10.75,  10.5 ,  10.25,  10.  ,   9.75,\n         9.5 ,   9.25,   9.  ,   8.75,   8.5 ,   8.25,   8.  ,   7.75,   7.5 ,\n         7.25,   7.  ,   6.75,   6.5 ,   6.25,   6.  ,   5.75,   5.5 ,   5.25,\n         5.  ,   4.75,   4.5 ,   4.25,   4.  ,   3.75,   3.5 ,   3.25,   3.  ,\n         2.75,   2.5 ,   2.25,   2.  ,   1.75,   1.5 ,   1.25,   1.  ,   0.75,\n         0.5 ,   0.25,   0.  ,  -0.25,  -0.5 ,  -0.75,  -1.  ,  -1.25,  -1.5 ,\n        -1.75,  -2.  ,  -2.25,  -2.5 ,  -2.75,  -3.  ,  -3.25,  -3.5 ,  -3.75,\n        -4.  ,  -4.25,  -4.5 ,  -4.75,  -5.  ,  -5.25,  -5.5 ,  -5.75,  -6.  ,\n        -6.25,  -6.5 ,  -6.75,  -7.  ,  -7.25,  -7.5 ,  -7.75,  -8.  ,  -8.25,\n        -8.5 ,  -8.75,  -9.  ,  -9.25,  -9.5 ,  -9.75, -10.  , -10.25, -10.5 ,\n       -10.75, -11.  , -11.25, -11.5 , -11.75, -12.  ], dtype=float32)lon(lon)float3242.0 42.25 42.5 ... 44.5 44.75 45.0long_name :longitudestandard_name :longitudeunits :degrees_eastarray([42.  , 42.25, 42.5 , 42.75, 43.  , 43.25, 43.5 , 43.75, 44.  , 44.25,\n       44.5 , 44.75, 45.  ], dtype=float32)time(time)datetime64[ns]1979-01-01 ... 2022-12-31axis :Tcomment :Data is averaged over the daylong_name :time centered on the daystandard_name :timetime_bounds :2000-01-01 00:00:00 to 2000-01-01 23:59:59array(['1979-01-01T00:00:00.000000000', '1979-01-02T00:00:00.000000000',\n       '1979-01-03T00:00:00.000000000', ..., '2022-12-29T00:00:00.000000000',\n       '2022-12-30T00:00:00.000000000', '2022-12-31T00:00:00.000000000'],\n      dtype='datetime64[ns]')Data variables: (19)CHL(time, lat, lon)float32dask.array&lt;chunksize=(100, 177, 13), meta=np.ndarray&gt;_ChunkSizes :[1, 256, 256]ancillary_variables :flags CHL_uncertaintycoverage_content_type :modelResultinput_files_reprocessings :Processors versions: MODIS R2022.0NRT/VIIRSN R2022.0NRT/OLCIA 07.02/VIIRSJ1 R2022.0NRT/OLCIB 07.02long_name :Chlorophyll-a concentration - Mean of the binned pixelsstandard_name :mass_concentration_of_chlorophyll_a_in_sea_watertype :surfaceunits :milligram m-3valid_max :1000.0valid_min :0.0\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n141.07 MiB\n898.83 kiB\n\n\nShape\n(16071, 177, 13)\n(100, 177, 13)\n\n\nDask graph\n161 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\nCHL_uncertainty\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 177, 13), meta=np.ndarray&gt;\n\n\n\n\n_ChunkSizes :\n\n[1, 256, 256]\n\ncoverage_content_type :\n\nqualityInformation\n\nlong_name :\n\nChlorophyll-a concentration - Uncertainty estimation\n\nunits :\n\n%\n\nvalid_max :\n\n32767\n\nvalid_min :\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n141.07 MiB\n898.83 kiB\n\n\nShape\n(16071, 177, 13)\n(100, 177, 13)\n\n\nDask graph\n161 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nadt\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 177, 13), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nThe absolute dynamic topography is the sea surface height above geoid; the adt is obtained as follows: adt=sla+mdt where mdt is the mean dynamic topography; see the product user manual for details\n\ngrid_mapping :\n\ncrs\n\nlong_name :\n\nAbsolute dynamic topography\n\nstandard_name :\n\nsea_surface_height_above_geoid\n\nunits :\n\nm\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n141.07 MiB\n898.83 kiB\n\n\nShape\n(16071, 177, 13)\n(100, 177, 13)\n\n\nDask graph\n161 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nair_temp\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 177, 13), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n2 metre temperature\n\nnameCDM :\n\n2_metre_temperature_surface\n\nnameECMWF :\n\n2 metre temperature\n\nproduct_type :\n\nanalysis\n\nshortNameECMWF :\n\n2t\n\nstandard_name :\n\nair_temperature\n\nunits :\n\nK\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n141.07 MiB\n898.83 kiB\n\n\nShape\n(16071, 177, 13)\n(100, 177, 13)\n\n\nDask graph\n161 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\ncurr_dir\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 177, 13), meta=np.ndarray&gt;\n\n\n\n\ncomments :\n\nComputed from total surface current velocity elements. Velocities are an average over the top 30m of the mixed layer\n\ndepth :\n\n15m\n\nlong_name :\n\naverage direction of total surface currents\n\nunits :\n\ndegrees\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n141.07 MiB\n898.83 kiB\n\n\nShape\n(16071, 177, 13)\n(100, 177, 13)\n\n\nDask graph\n161 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\ncurr_speed\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 177, 13), meta=np.ndarray&gt;\n\n\n\n\ncomments :\n\nVelocities are an average over the top 30m of the mixed layer\n\ndepth :\n\n15m\n\nlong_name :\n\naverage total surface current speed\n\nunits :\n\nm s**-1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n141.07 MiB\n898.83 kiB\n\n\nShape\n(16071, 177, 13)\n(100, 177, 13)\n\n\nDask graph\n161 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nmlotst\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(500, 177, 13), meta=np.ndarray&gt;\n\n\n\n\n_ChunkSizes :\n\n[1, 681, 1440]\n\ncell_methods :\n\narea: mean\n\nlong_name :\n\nDensity ocean mixed layer thickness\n\nstandard_name :\n\nocean_mixed_layer_thickness_defined_by_sigma_theta\n\nunit_long :\n\nMeters\n\nunits :\n\nm\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n141.07 MiB\n4.39 MiB\n\n\nShape\n(16071, 177, 13)\n(500, 177, 13)\n\n\nDask graph\n33 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nsla\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 177, 13), meta=np.ndarray&gt;\n\n\n\n\nancillary_variables :\n\nerr_sla\n\ncomment :\n\nThe sea level anomaly is the sea surface height above mean sea surface; it is referenced to the [1993, 2012] period; see the product user manual for details\n\ngrid_mapping :\n\ncrs\n\nlong_name :\n\nSea level anomaly\n\nstandard_name :\n\nsea_surface_height_above_sea_level\n\nunits :\n\nm\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n141.07 MiB\n898.83 kiB\n\n\nShape\n(16071, 177, 13)\n(100, 177, 13)\n\n\nDask graph\n161 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nso\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(500, 177, 13), meta=np.ndarray&gt;\n\n\n\n\n_ChunkSizes :\n\n[1, 7, 341, 720]\n\ncell_methods :\n\narea: mean\n\nlong_name :\n\nmean sea water salinity at 0.49 metres below ocean surface\n\nstandard_name :\n\nsea_water_salinity\n\nunit_long :\n\nPractical Salinity Unit\n\nunits :\n\n1e-3\n\nvalid_max :\n\n28336\n\nvalid_min :\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n141.07 MiB\n4.39 MiB\n\n\nShape\n(16071, 177, 13)\n(500, 177, 13)\n\n\nDask graph\n33 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nsst\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 177, 13), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\nSea surface temperature\n\nnameCDM :\n\nSea_surface_temperature_surface\n\nnameECMWF :\n\nSea surface temperature\n\nproduct_type :\n\nanalysis\n\nshortNameECMWF :\n\nsst\n\nstandard_name :\n\nsea_surface_temperature\n\nunits :\n\nK\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n141.07 MiB\n898.83 kiB\n\n\nShape\n(16071, 177, 13)\n(100, 177, 13)\n\n\nDask graph\n161 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\ntopo\n\n\n(lat, lon)\n\n\nfloat64\n\n\ndask.array&lt;chunksize=(177, 13), meta=np.ndarray&gt;\n\n\n\n\ncolorBarMaximum :\n\n8000.0\n\ncolorBarMinimum :\n\n-8000.0\n\ncolorBarPalette :\n\nTopography\n\ngrid_mapping :\n\nGDAL_Geographics\n\nioos_category :\n\nLocation\n\nlong_name :\n\nTopography\n\nstandard_name :\n\naltitude\n\nunits :\n\nmeters\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n17.98 kiB\n17.98 kiB\n\n\nShape\n(177, 13)\n(177, 13)\n\n\nDask graph\n1 chunks in 3 graph layers\n\n\nData type\nfloat64 numpy.ndarray\n\n\n\n\n\n\n\n\n\nu_curr\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 177, 13), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nVelocities are an average over the top 30m of the mixed layer\n\ncoverage_content_type :\n\nmodelResult\n\ndepth :\n\n15m\n\nlong_name :\n\nzonal total surface current\n\nsource :\n\nSSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148 ; WIND source: ECMWF ERA5 10m wind DOI: 10.24381/cds.adbb2d47 ; SST source: CMC 0.2 deg SST V2.0 DOI: 10.5067/GHCMC-4FM02\n\nstandard_name :\n\neastward_sea_water_velocity\n\nunits :\n\nm s-1\n\nvalid_max :\n\n3.0\n\nvalid_min :\n\n-3.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n141.07 MiB\n898.83 kiB\n\n\nShape\n(16071, 177, 13)\n(100, 177, 13)\n\n\nDask graph\n161 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nu_wind\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 177, 13), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n10 metre U wind component\n\nnameCDM :\n\n10_metre_U_wind_component_surface\n\nnameECMWF :\n\n10 metre U wind component\n\nproduct_type :\n\nanalysis\n\nshortNameECMWF :\n\n10u\n\nstandard_name :\n\neastward_wind\n\nunits :\n\nm s**-1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n141.07 MiB\n898.83 kiB\n\n\nShape\n(16071, 177, 13)\n(100, 177, 13)\n\n\nDask graph\n161 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nug_curr\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 177, 13), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nGeostrophic velocities calculated from absolute dynamic topography\n\ndepth :\n\n15m\n\nlong_name :\n\nzonal geostrophic surface current\n\nsource :\n\nSSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148\n\nstandard_name :\n\ngeostrophic_eastward_sea_water_velocity\n\nunits :\n\nm s-1\n\nvalid_max :\n\n3.0\n\nvalid_min :\n\n-3.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n141.07 MiB\n898.83 kiB\n\n\nShape\n(16071, 177, 13)\n(100, 177, 13)\n\n\nDask graph\n161 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nv_curr\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 177, 13), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nVelocities are an average over the top 30m of the mixed layer\n\ncoverage_content_type :\n\nmodelResult\n\ndepth :\n\n15m\n\nlong_name :\n\nmeridional total surface current\n\nsource :\n\nSSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148 ; WIND source: ECMWF ERA5 10m wind DOI: 10.24381/cds.adbb2d47 ; SST source: CMC 0.2 deg SST V2.0 DOI: 10.5067/GHCMC-4FM02\n\nstandard_name :\n\nnorthward_sea_water_velocity\n\nunits :\n\nm s-1\n\nvalid_max :\n\n3.0\n\nvalid_min :\n\n-3.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n141.07 MiB\n898.83 kiB\n\n\nShape\n(16071, 177, 13)\n(100, 177, 13)\n\n\nDask graph\n161 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nv_wind\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 177, 13), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n10 metre V wind component\n\nnameCDM :\n\n10_metre_V_wind_component_surface\n\nnameECMWF :\n\n10 metre V wind component\n\nproduct_type :\n\nanalysis\n\nshortNameECMWF :\n\n10v\n\nstandard_name :\n\nnorthward_wind\n\nunits :\n\nm s**-1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n141.07 MiB\n898.83 kiB\n\n\nShape\n(16071, 177, 13)\n(100, 177, 13)\n\n\nDask graph\n161 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nvg_curr\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 177, 13), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nGeostrophic velocities calculated from absolute dynamic topography\n\ndepth :\n\n15m\n\nlong_name :\n\nmeridional geostrophic surface current\n\nsource :\n\nSSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148\n\nstandard_name :\n\ngeostrophic_northward_sea_water_velocity\n\nunits :\n\nm s-1\n\nvalid_max :\n\n3.0\n\nvalid_min :\n\n-3.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n141.07 MiB\n898.83 kiB\n\n\nShape\n(16071, 177, 13)\n(100, 177, 13)\n\n\nDask graph\n161 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nwind_dir\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 177, 13), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n10 metre wind direction\n\nunits :\n\ndegrees\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n141.07 MiB\n898.83 kiB\n\n\nShape\n(16071, 177, 13)\n(100, 177, 13)\n\n\nDask graph\n161 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nwind_speed\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 177, 13), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n10 metre absolute speed\n\nunits :\n\nm s**-1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n141.07 MiB\n898.83 kiB\n\n\nShape\n(16071, 177, 13)\n(100, 177, 13)\n\n\nDask graph\n161 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\nIndexes: (3)latPandasIndexPandasIndex(Index([  32.0,  31.75,   31.5,  31.25,   31.0,  30.75,   30.5,  30.25,   30.0,\n        29.75,\n       ...\n        -9.75,  -10.0, -10.25,  -10.5, -10.75,  -11.0, -11.25,  -11.5, -11.75,\n        -12.0],\n      dtype='float32', name='lat', length=177))lonPandasIndexPandasIndex(Index([ 42.0, 42.25,  42.5, 42.75,  43.0, 43.25,  43.5, 43.75,  44.0, 44.25,\n        44.5, 44.75,  45.0],\n      dtype='float32', name='lon'))timePandasIndexPandasIndex(DatetimeIndex(['1979-01-01', '1979-01-02', '1979-01-03', '1979-01-04',\n               '1979-01-05', '1979-01-06', '1979-01-07', '1979-01-08',\n               '1979-01-09', '1979-01-10',\n               ...\n               '2022-12-22', '2022-12-23', '2022-12-24', '2022-12-25',\n               '2022-12-26', '2022-12-27', '2022-12-28', '2022-12-29',\n               '2022-12-30', '2022-12-31'],\n              dtype='datetime64[ns]', name='time', length=16071, freq=None))Attributes: (17)creator_email :minhphan@uw.educreator_name :Minh Phancreator_type :persondate_created :2023-07-19geospatial_lat_max :32.0geospatial_lat_min :-12.0geospatial_lat_resolution :0.25geospatial_lat_units :degrees_northgeospatial_lon_max :102.0geospatial_lon_min :42.0geospatial_lon_resolution :0.25geospatial_lon_units :degrees_eastsource :Earth & Space Research (ESR), Copernicus Climate Change Service (C3S), Copernicus Marine Environment Monitoring Service (CMEMS), United States Geological Survey (USGS)summary :Daily mean of 0.25 x 0.25 degrees gridded data from multiple climate variables that may influence the patterns of coastal upwelling in the focused areatime_coverage_end :2022-12-31T23:59:59time_coverage_start :1979-01-01T00:00:00title :Climate Data for Coastal Upwelling Machine Learning Project in Indian Ocean\n\n\n\n# slice by time\nds.sel(time=slice('1998', '1999'))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:          (time: 730, lat: 177, lon: 241)\nCoordinates:\n  * lat              (lat) float32 32.0 31.75 31.5 31.25 ... -11.5 -11.75 -12.0\n  * lon              (lon) float32 42.0 42.25 42.5 42.75 ... 101.5 101.8 102.0\n  * time             (time) datetime64[ns] 1998-01-01 1998-01-02 ... 1999-12-31\nData variables: (12/19)\n    CHL              (time, lat, lon) float32 dask.array&lt;chunksize=(60, 177, 241), meta=np.ndarray&gt;\n    CHL_uncertainty  (time, lat, lon) float32 dask.array&lt;chunksize=(60, 177, 241), meta=np.ndarray&gt;\n    adt              (time, lat, lon) float32 dask.array&lt;chunksize=(60, 177, 241), meta=np.ndarray&gt;\n    air_temp         (time, lat, lon) float32 dask.array&lt;chunksize=(60, 177, 241), meta=np.ndarray&gt;\n    curr_dir         (time, lat, lon) float32 dask.array&lt;chunksize=(60, 177, 241), meta=np.ndarray&gt;\n    curr_speed       (time, lat, lon) float32 dask.array&lt;chunksize=(60, 177, 241), meta=np.ndarray&gt;\n    ...               ...\n    ug_curr          (time, lat, lon) float32 dask.array&lt;chunksize=(60, 177, 241), meta=np.ndarray&gt;\n    v_curr           (time, lat, lon) float32 dask.array&lt;chunksize=(60, 177, 241), meta=np.ndarray&gt;\n    v_wind           (time, lat, lon) float32 dask.array&lt;chunksize=(60, 177, 241), meta=np.ndarray&gt;\n    vg_curr          (time, lat, lon) float32 dask.array&lt;chunksize=(60, 177, 241), meta=np.ndarray&gt;\n    wind_dir         (time, lat, lon) float32 dask.array&lt;chunksize=(60, 177, 241), meta=np.ndarray&gt;\n    wind_speed       (time, lat, lon) float32 dask.array&lt;chunksize=(60, 177, 241), meta=np.ndarray&gt;\nAttributes: (12/17)\n    creator_email:              minhphan@uw.edu\n    creator_name:               Minh Phan\n    creator_type:               person\n    date_created:               2023-07-19\n    geospatial_lat_max:         32.0\n    geospatial_lat_min:         -12.0\n    ...                         ...\n    geospatial_lon_units:       degrees_east\n    source:                     Earth & Space Research (ESR), Copernicus Clim...\n    summary:                    Daily mean of 0.25 x 0.25 degrees gridded dat...\n    time_coverage_end:          2022-12-31T23:59:59\n    time_coverage_start:        1979-01-01T00:00:00\n    title:                      Climate Data for Coastal Upwelling Machine Le...xarray.DatasetDimensions:time: 730lat: 177lon: 241Coordinates: (3)lat(lat)float3232.0 31.75 31.5 ... -11.75 -12.0long_name :latitudestandard_name :latitudeunits :degrees_northarray([ 32.  ,  31.75,  31.5 ,  31.25,  31.  ,  30.75,  30.5 ,  30.25,  30.  ,\n        29.75,  29.5 ,  29.25,  29.  ,  28.75,  28.5 ,  28.25,  28.  ,  27.75,\n        27.5 ,  27.25,  27.  ,  26.75,  26.5 ,  26.25,  26.  ,  25.75,  25.5 ,\n        25.25,  25.  ,  24.75,  24.5 ,  24.25,  24.  ,  23.75,  23.5 ,  23.25,\n        23.  ,  22.75,  22.5 ,  22.25,  22.  ,  21.75,  21.5 ,  21.25,  21.  ,\n        20.75,  20.5 ,  20.25,  20.  ,  19.75,  19.5 ,  19.25,  19.  ,  18.75,\n        18.5 ,  18.25,  18.  ,  17.75,  17.5 ,  17.25,  17.  ,  16.75,  16.5 ,\n        16.25,  16.  ,  15.75,  15.5 ,  15.25,  15.  ,  14.75,  14.5 ,  14.25,\n        14.  ,  13.75,  13.5 ,  13.25,  13.  ,  12.75,  12.5 ,  12.25,  12.  ,\n        11.75,  11.5 ,  11.25,  11.  ,  10.75,  10.5 ,  10.25,  10.  ,   9.75,\n         9.5 ,   9.25,   9.  ,   8.75,   8.5 ,   8.25,   8.  ,   7.75,   7.5 ,\n         7.25,   7.  ,   6.75,   6.5 ,   6.25,   6.  ,   5.75,   5.5 ,   5.25,\n         5.  ,   4.75,   4.5 ,   4.25,   4.  ,   3.75,   3.5 ,   3.25,   3.  ,\n         2.75,   2.5 ,   2.25,   2.  ,   1.75,   1.5 ,   1.25,   1.  ,   0.75,\n         0.5 ,   0.25,   0.  ,  -0.25,  -0.5 ,  -0.75,  -1.  ,  -1.25,  -1.5 ,\n        -1.75,  -2.  ,  -2.25,  -2.5 ,  -2.75,  -3.  ,  -3.25,  -3.5 ,  -3.75,\n        -4.  ,  -4.25,  -4.5 ,  -4.75,  -5.  ,  -5.25,  -5.5 ,  -5.75,  -6.  ,\n        -6.25,  -6.5 ,  -6.75,  -7.  ,  -7.25,  -7.5 ,  -7.75,  -8.  ,  -8.25,\n        -8.5 ,  -8.75,  -9.  ,  -9.25,  -9.5 ,  -9.75, -10.  , -10.25, -10.5 ,\n       -10.75, -11.  , -11.25, -11.5 , -11.75, -12.  ], dtype=float32)lon(lon)float3242.0 42.25 42.5 ... 101.8 102.0long_name :longitudestandard_name :longitudeunits :degrees_eastarray([ 42.  ,  42.25,  42.5 , ..., 101.5 , 101.75, 102.  ], dtype=float32)time(time)datetime64[ns]1998-01-01 ... 1999-12-31axis :Tcomment :Data is averaged over the daylong_name :time centered on the daystandard_name :timetime_bounds :2000-01-01 00:00:00 to 2000-01-01 23:59:59array(['1998-01-01T00:00:00.000000000', '1998-01-02T00:00:00.000000000',\n       '1998-01-03T00:00:00.000000000', ..., '1999-12-29T00:00:00.000000000',\n       '1999-12-30T00:00:00.000000000', '1999-12-31T00:00:00.000000000'],\n      dtype='datetime64[ns]')Data variables: (19)CHL(time, lat, lon)float32dask.array&lt;chunksize=(60, 177, 241), meta=np.ndarray&gt;_ChunkSizes :[1, 256, 256]ancillary_variables :flags CHL_uncertaintycoverage_content_type :modelResultinput_files_reprocessings :Processors versions: MODIS R2022.0NRT/VIIRSN R2022.0NRT/OLCIA 07.02/VIIRSJ1 R2022.0NRT/OLCIB 07.02long_name :Chlorophyll-a concentration - Mean of the binned pixelsstandard_name :mass_concentration_of_chlorophyll_a_in_sea_watertype :surfaceunits :milligram m-3valid_max :1000.0valid_min :0.0\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n118.79 MiB\n16.27 MiB\n\n\nShape\n(730, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n8 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\nCHL_uncertainty\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(60, 177, 241), meta=np.ndarray&gt;\n\n\n\n\n_ChunkSizes :\n\n[1, 256, 256]\n\ncoverage_content_type :\n\nqualityInformation\n\nlong_name :\n\nChlorophyll-a concentration - Uncertainty estimation\n\nunits :\n\n%\n\nvalid_max :\n\n32767\n\nvalid_min :\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n118.79 MiB\n16.27 MiB\n\n\nShape\n(730, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n8 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nadt\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(60, 177, 241), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nThe absolute dynamic topography is the sea surface height above geoid; the adt is obtained as follows: adt=sla+mdt where mdt is the mean dynamic topography; see the product user manual for details\n\ngrid_mapping :\n\ncrs\n\nlong_name :\n\nAbsolute dynamic topography\n\nstandard_name :\n\nsea_surface_height_above_geoid\n\nunits :\n\nm\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n118.79 MiB\n16.27 MiB\n\n\nShape\n(730, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n8 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nair_temp\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(60, 177, 241), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n2 metre temperature\n\nnameCDM :\n\n2_metre_temperature_surface\n\nnameECMWF :\n\n2 metre temperature\n\nproduct_type :\n\nanalysis\n\nshortNameECMWF :\n\n2t\n\nstandard_name :\n\nair_temperature\n\nunits :\n\nK\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n118.79 MiB\n16.27 MiB\n\n\nShape\n(730, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n8 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\ncurr_dir\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(60, 177, 241), meta=np.ndarray&gt;\n\n\n\n\ncomments :\n\nComputed from total surface current velocity elements. Velocities are an average over the top 30m of the mixed layer\n\ndepth :\n\n15m\n\nlong_name :\n\naverage direction of total surface currents\n\nunits :\n\ndegrees\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n118.79 MiB\n16.27 MiB\n\n\nShape\n(730, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n8 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\ncurr_speed\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(60, 177, 241), meta=np.ndarray&gt;\n\n\n\n\ncomments :\n\nVelocities are an average over the top 30m of the mixed layer\n\ndepth :\n\n15m\n\nlong_name :\n\naverage total surface current speed\n\nunits :\n\nm s**-1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n118.79 MiB\n16.27 MiB\n\n\nShape\n(730, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n8 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nmlotst\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(60, 177, 241), meta=np.ndarray&gt;\n\n\n\n\n_ChunkSizes :\n\n[1, 681, 1440]\n\ncell_methods :\n\narea: mean\n\nlong_name :\n\nDensity ocean mixed layer thickness\n\nstandard_name :\n\nocean_mixed_layer_thickness_defined_by_sigma_theta\n\nunit_long :\n\nMeters\n\nunits :\n\nm\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n118.79 MiB\n81.36 MiB\n\n\nShape\n(730, 177, 241)\n(500, 177, 241)\n\n\nDask graph\n3 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nsla\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(60, 177, 241), meta=np.ndarray&gt;\n\n\n\n\nancillary_variables :\n\nerr_sla\n\ncomment :\n\nThe sea level anomaly is the sea surface height above mean sea surface; it is referenced to the [1993, 2012] period; see the product user manual for details\n\ngrid_mapping :\n\ncrs\n\nlong_name :\n\nSea level anomaly\n\nstandard_name :\n\nsea_surface_height_above_sea_level\n\nunits :\n\nm\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n118.79 MiB\n16.27 MiB\n\n\nShape\n(730, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n8 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nso\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(60, 177, 241), meta=np.ndarray&gt;\n\n\n\n\n_ChunkSizes :\n\n[1, 7, 341, 720]\n\ncell_methods :\n\narea: mean\n\nlong_name :\n\nmean sea water salinity at 0.49 metres below ocean surface\n\nstandard_name :\n\nsea_water_salinity\n\nunit_long :\n\nPractical Salinity Unit\n\nunits :\n\n1e-3\n\nvalid_max :\n\n28336\n\nvalid_min :\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n118.79 MiB\n81.36 MiB\n\n\nShape\n(730, 177, 241)\n(500, 177, 241)\n\n\nDask graph\n3 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nsst\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(60, 177, 241), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\nSea surface temperature\n\nnameCDM :\n\nSea_surface_temperature_surface\n\nnameECMWF :\n\nSea surface temperature\n\nproduct_type :\n\nanalysis\n\nshortNameECMWF :\n\nsst\n\nstandard_name :\n\nsea_surface_temperature\n\nunits :\n\nK\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n118.79 MiB\n16.27 MiB\n\n\nShape\n(730, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n8 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\ntopo\n\n\n(lat, lon)\n\n\nfloat64\n\n\ndask.array&lt;chunksize=(177, 241), meta=np.ndarray&gt;\n\n\n\n\ncolorBarMaximum :\n\n8000.0\n\ncolorBarMinimum :\n\n-8000.0\n\ncolorBarPalette :\n\nTopography\n\ngrid_mapping :\n\nGDAL_Geographics\n\nioos_category :\n\nLocation\n\nlong_name :\n\nTopography\n\nstandard_name :\n\naltitude\n\nunits :\n\nmeters\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n333.26 kiB\n333.26 kiB\n\n\nShape\n(177, 241)\n(177, 241)\n\n\nDask graph\n1 chunks in 2 graph layers\n\n\nData type\nfloat64 numpy.ndarray\n\n\n\n\n\n\n\n\n\nu_curr\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(60, 177, 241), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nVelocities are an average over the top 30m of the mixed layer\n\ncoverage_content_type :\n\nmodelResult\n\ndepth :\n\n15m\n\nlong_name :\n\nzonal total surface current\n\nsource :\n\nSSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148 ; WIND source: ECMWF ERA5 10m wind DOI: 10.24381/cds.adbb2d47 ; SST source: CMC 0.2 deg SST V2.0 DOI: 10.5067/GHCMC-4FM02\n\nstandard_name :\n\neastward_sea_water_velocity\n\nunits :\n\nm s-1\n\nvalid_max :\n\n3.0\n\nvalid_min :\n\n-3.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n118.79 MiB\n16.27 MiB\n\n\nShape\n(730, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n8 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nu_wind\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(60, 177, 241), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n10 metre U wind component\n\nnameCDM :\n\n10_metre_U_wind_component_surface\n\nnameECMWF :\n\n10 metre U wind component\n\nproduct_type :\n\nanalysis\n\nshortNameECMWF :\n\n10u\n\nstandard_name :\n\neastward_wind\n\nunits :\n\nm s**-1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n118.79 MiB\n16.27 MiB\n\n\nShape\n(730, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n8 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nug_curr\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(60, 177, 241), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nGeostrophic velocities calculated from absolute dynamic topography\n\ndepth :\n\n15m\n\nlong_name :\n\nzonal geostrophic surface current\n\nsource :\n\nSSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148\n\nstandard_name :\n\ngeostrophic_eastward_sea_water_velocity\n\nunits :\n\nm s-1\n\nvalid_max :\n\n3.0\n\nvalid_min :\n\n-3.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n118.79 MiB\n16.27 MiB\n\n\nShape\n(730, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n8 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nv_curr\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(60, 177, 241), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nVelocities are an average over the top 30m of the mixed layer\n\ncoverage_content_type :\n\nmodelResult\n\ndepth :\n\n15m\n\nlong_name :\n\nmeridional total surface current\n\nsource :\n\nSSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148 ; WIND source: ECMWF ERA5 10m wind DOI: 10.24381/cds.adbb2d47 ; SST source: CMC 0.2 deg SST V2.0 DOI: 10.5067/GHCMC-4FM02\n\nstandard_name :\n\nnorthward_sea_water_velocity\n\nunits :\n\nm s-1\n\nvalid_max :\n\n3.0\n\nvalid_min :\n\n-3.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n118.79 MiB\n16.27 MiB\n\n\nShape\n(730, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n8 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nv_wind\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(60, 177, 241), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n10 metre V wind component\n\nnameCDM :\n\n10_metre_V_wind_component_surface\n\nnameECMWF :\n\n10 metre V wind component\n\nproduct_type :\n\nanalysis\n\nshortNameECMWF :\n\n10v\n\nstandard_name :\n\nnorthward_wind\n\nunits :\n\nm s**-1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n118.79 MiB\n16.27 MiB\n\n\nShape\n(730, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n8 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nvg_curr\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(60, 177, 241), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nGeostrophic velocities calculated from absolute dynamic topography\n\ndepth :\n\n15m\n\nlong_name :\n\nmeridional geostrophic surface current\n\nsource :\n\nSSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148\n\nstandard_name :\n\ngeostrophic_northward_sea_water_velocity\n\nunits :\n\nm s-1\n\nvalid_max :\n\n3.0\n\nvalid_min :\n\n-3.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n118.79 MiB\n16.27 MiB\n\n\nShape\n(730, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n8 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nwind_dir\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(60, 177, 241), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n10 metre wind direction\n\nunits :\n\ndegrees\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n118.79 MiB\n16.27 MiB\n\n\nShape\n(730, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n8 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nwind_speed\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(60, 177, 241), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n10 metre absolute speed\n\nunits :\n\nm s**-1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n118.79 MiB\n16.27 MiB\n\n\nShape\n(730, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n8 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\nIndexes: (3)latPandasIndexPandasIndex(Index([  32.0,  31.75,   31.5,  31.25,   31.0,  30.75,   30.5,  30.25,   30.0,\n        29.75,\n       ...\n        -9.75,  -10.0, -10.25,  -10.5, -10.75,  -11.0, -11.25,  -11.5, -11.75,\n        -12.0],\n      dtype='float32', name='lat', length=177))lonPandasIndexPandasIndex(Index([  42.0,  42.25,   42.5,  42.75,   43.0,  43.25,   43.5,  43.75,   44.0,\n        44.25,\n       ...\n        99.75,  100.0, 100.25,  100.5, 100.75,  101.0, 101.25,  101.5, 101.75,\n        102.0],\n      dtype='float32', name='lon', length=241))timePandasIndexPandasIndex(DatetimeIndex(['1998-01-01', '1998-01-02', '1998-01-03', '1998-01-04',\n               '1998-01-05', '1998-01-06', '1998-01-07', '1998-01-08',\n               '1998-01-09', '1998-01-10',\n               ...\n               '1999-12-22', '1999-12-23', '1999-12-24', '1999-12-25',\n               '1999-12-26', '1999-12-27', '1999-12-28', '1999-12-29',\n               '1999-12-30', '1999-12-31'],\n              dtype='datetime64[ns]', name='time', length=730, freq=None))Attributes: (17)creator_email :minhphan@uw.educreator_name :Minh Phancreator_type :persondate_created :2023-07-19geospatial_lat_max :32.0geospatial_lat_min :-12.0geospatial_lat_resolution :0.25geospatial_lat_units :degrees_northgeospatial_lon_max :102.0geospatial_lon_min :42.0geospatial_lon_resolution :0.25geospatial_lon_units :degrees_eastsource :Earth & Space Research (ESR), Copernicus Climate Change Service (C3S), Copernicus Marine Environment Monitoring Service (CMEMS), United States Geological Survey (USGS)summary :Daily mean of 0.25 x 0.25 degrees gridded data from multiple climate variables that may influence the patterns of coastal upwelling in the focused areatime_coverage_end :2022-12-31T23:59:59time_coverage_start :1979-01-01T00:00:00title :Climate Data for Coastal Upwelling Machine Learning Project in Indian Ocean\n\n\n\n# slice by variable\nds[['u_curr', 'u_wind']]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:  (time: 16071, lat: 177, lon: 241)\nCoordinates:\n  * lat      (lat) float32 32.0 31.75 31.5 31.25 ... -11.25 -11.5 -11.75 -12.0\n  * lon      (lon) float32 42.0 42.25 42.5 42.75 ... 101.2 101.5 101.8 102.0\n  * time     (time) datetime64[ns] 1979-01-01 1979-01-02 ... 2022-12-31\nData variables:\n    u_curr   (time, lat, lon) float32 dask.array&lt;chunksize=(100, 177, 241), meta=np.ndarray&gt;\n    u_wind   (time, lat, lon) float32 dask.array&lt;chunksize=(100, 177, 241), meta=np.ndarray&gt;\nAttributes: (12/17)\n    creator_email:              minhphan@uw.edu\n    creator_name:               Minh Phan\n    creator_type:               person\n    date_created:               2023-07-19\n    geospatial_lat_max:         32.0\n    geospatial_lat_min:         -12.0\n    ...                         ...\n    geospatial_lon_units:       degrees_east\n    source:                     Earth & Space Research (ESR), Copernicus Clim...\n    summary:                    Daily mean of 0.25 x 0.25 degrees gridded dat...\n    time_coverage_end:          2022-12-31T23:59:59\n    time_coverage_start:        1979-01-01T00:00:00\n    title:                      Climate Data for Coastal Upwelling Machine Le...xarray.DatasetDimensions:time: 16071lat: 177lon: 241Coordinates: (3)lat(lat)float3232.0 31.75 31.5 ... -11.75 -12.0long_name :latitudestandard_name :latitudeunits :degrees_northarray([ 32.  ,  31.75,  31.5 ,  31.25,  31.  ,  30.75,  30.5 ,  30.25,  30.  ,\n        29.75,  29.5 ,  29.25,  29.  ,  28.75,  28.5 ,  28.25,  28.  ,  27.75,\n        27.5 ,  27.25,  27.  ,  26.75,  26.5 ,  26.25,  26.  ,  25.75,  25.5 ,\n        25.25,  25.  ,  24.75,  24.5 ,  24.25,  24.  ,  23.75,  23.5 ,  23.25,\n        23.  ,  22.75,  22.5 ,  22.25,  22.  ,  21.75,  21.5 ,  21.25,  21.  ,\n        20.75,  20.5 ,  20.25,  20.  ,  19.75,  19.5 ,  19.25,  19.  ,  18.75,\n        18.5 ,  18.25,  18.  ,  17.75,  17.5 ,  17.25,  17.  ,  16.75,  16.5 ,\n        16.25,  16.  ,  15.75,  15.5 ,  15.25,  15.  ,  14.75,  14.5 ,  14.25,\n        14.  ,  13.75,  13.5 ,  13.25,  13.  ,  12.75,  12.5 ,  12.25,  12.  ,\n        11.75,  11.5 ,  11.25,  11.  ,  10.75,  10.5 ,  10.25,  10.  ,   9.75,\n         9.5 ,   9.25,   9.  ,   8.75,   8.5 ,   8.25,   8.  ,   7.75,   7.5 ,\n         7.25,   7.  ,   6.75,   6.5 ,   6.25,   6.  ,   5.75,   5.5 ,   5.25,\n         5.  ,   4.75,   4.5 ,   4.25,   4.  ,   3.75,   3.5 ,   3.25,   3.  ,\n         2.75,   2.5 ,   2.25,   2.  ,   1.75,   1.5 ,   1.25,   1.  ,   0.75,\n         0.5 ,   0.25,   0.  ,  -0.25,  -0.5 ,  -0.75,  -1.  ,  -1.25,  -1.5 ,\n        -1.75,  -2.  ,  -2.25,  -2.5 ,  -2.75,  -3.  ,  -3.25,  -3.5 ,  -3.75,\n        -4.  ,  -4.25,  -4.5 ,  -4.75,  -5.  ,  -5.25,  -5.5 ,  -5.75,  -6.  ,\n        -6.25,  -6.5 ,  -6.75,  -7.  ,  -7.25,  -7.5 ,  -7.75,  -8.  ,  -8.25,\n        -8.5 ,  -8.75,  -9.  ,  -9.25,  -9.5 ,  -9.75, -10.  , -10.25, -10.5 ,\n       -10.75, -11.  , -11.25, -11.5 , -11.75, -12.  ], dtype=float32)lon(lon)float3242.0 42.25 42.5 ... 101.8 102.0long_name :longitudestandard_name :longitudeunits :degrees_eastarray([ 42.  ,  42.25,  42.5 , ..., 101.5 , 101.75, 102.  ], dtype=float32)time(time)datetime64[ns]1979-01-01 ... 2022-12-31axis :Tcomment :Data is averaged over the daylong_name :time centered on the daystandard_name :timetime_bounds :2000-01-01 00:00:00 to 2000-01-01 23:59:59array(['1979-01-01T00:00:00.000000000', '1979-01-02T00:00:00.000000000',\n       '1979-01-03T00:00:00.000000000', ..., '2022-12-29T00:00:00.000000000',\n       '2022-12-30T00:00:00.000000000', '2022-12-31T00:00:00.000000000'],\n      dtype='datetime64[ns]')Data variables: (2)u_curr(time, lat, lon)float32dask.array&lt;chunksize=(100, 177, 241), meta=np.ndarray&gt;comment :Velocities are an average over the top 30m of the mixed layercoverage_content_type :modelResultdepth :15mlong_name :zonal total surface currentsource :SSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148 ; WIND source: ECMWF ERA5 10m wind DOI: 10.24381/cds.adbb2d47 ; SST source: CMC 0.2 deg SST V2.0 DOI: 10.5067/GHCMC-4FM02standard_name :eastward_sea_water_velocityunits :m s-1valid_max :3.0valid_min :-3.0\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n2.55 GiB\n16.27 MiB\n\n\nShape\n(16071, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n161 chunks in 2 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\nu_wind\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 177, 241), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n10 metre U wind component\n\nnameCDM :\n\n10_metre_U_wind_component_surface\n\nnameECMWF :\n\n10 metre U wind component\n\nproduct_type :\n\nanalysis\n\nshortNameECMWF :\n\n10u\n\nstandard_name :\n\neastward_wind\n\nunits :\n\nm s**-1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n2.55 GiB\n16.27 MiB\n\n\nShape\n(16071, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n161 chunks in 2 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\nIndexes: (3)latPandasIndexPandasIndex(Index([  32.0,  31.75,   31.5,  31.25,   31.0,  30.75,   30.5,  30.25,   30.0,\n        29.75,\n       ...\n        -9.75,  -10.0, -10.25,  -10.5, -10.75,  -11.0, -11.25,  -11.5, -11.75,\n        -12.0],\n      dtype='float32', name='lat', length=177))lonPandasIndexPandasIndex(Index([  42.0,  42.25,   42.5,  42.75,   43.0,  43.25,   43.5,  43.75,   44.0,\n        44.25,\n       ...\n        99.75,  100.0, 100.25,  100.5, 100.75,  101.0, 101.25,  101.5, 101.75,\n        102.0],\n      dtype='float32', name='lon', length=241))timePandasIndexPandasIndex(DatetimeIndex(['1979-01-01', '1979-01-02', '1979-01-03', '1979-01-04',\n               '1979-01-05', '1979-01-06', '1979-01-07', '1979-01-08',\n               '1979-01-09', '1979-01-10',\n               ...\n               '2022-12-22', '2022-12-23', '2022-12-24', '2022-12-25',\n               '2022-12-26', '2022-12-27', '2022-12-28', '2022-12-29',\n               '2022-12-30', '2022-12-31'],\n              dtype='datetime64[ns]', name='time', length=16071, freq=None))Attributes: (17)creator_email :minhphan@uw.educreator_name :Minh Phancreator_type :persondate_created :2023-07-19geospatial_lat_max :32.0geospatial_lat_min :-12.0geospatial_lat_resolution :0.25geospatial_lat_units :degrees_northgeospatial_lon_max :102.0geospatial_lon_min :42.0geospatial_lon_resolution :0.25geospatial_lon_units :degrees_eastsource :Earth & Space Research (ESR), Copernicus Climate Change Service (C3S), Copernicus Marine Environment Monitoring Service (CMEMS), United States Geological Survey (USGS)summary :Daily mean of 0.25 x 0.25 degrees gridded data from multiple climate variables that may influence the patterns of coastal upwelling in the focused areatime_coverage_end :2022-12-31T23:59:59time_coverage_start :1979-01-01T00:00:00title :Climate Data for Coastal Upwelling Machine Learning Project in Indian Ocean\n\n\n\n# combine multiple slicing options all at once\nds[['u_curr', 'u_wind']].sel(time=slice('1998', '1999'), \n                             lat=slice(0, -12), \n                             lon=slice(42, 45))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:  (time: 730, lat: 49, lon: 13)\nCoordinates:\n  * lat      (lat) float32 0.0 -0.25 -0.5 -0.75 ... -11.25 -11.5 -11.75 -12.0\n  * lon      (lon) float32 42.0 42.25 42.5 42.75 43.0 ... 44.25 44.5 44.75 45.0\n  * time     (time) datetime64[ns] 1998-01-01 1998-01-02 ... 1999-12-31\nData variables:\n    u_curr   (time, lat, lon) float32 dask.array&lt;chunksize=(60, 49, 13), meta=np.ndarray&gt;\n    u_wind   (time, lat, lon) float32 dask.array&lt;chunksize=(60, 49, 13), meta=np.ndarray&gt;\nAttributes: (12/17)\n    creator_email:              minhphan@uw.edu\n    creator_name:               Minh Phan\n    creator_type:               person\n    date_created:               2023-07-19\n    geospatial_lat_max:         32.0\n    geospatial_lat_min:         -12.0\n    ...                         ...\n    geospatial_lon_units:       degrees_east\n    source:                     Earth & Space Research (ESR), Copernicus Clim...\n    summary:                    Daily mean of 0.25 x 0.25 degrees gridded dat...\n    time_coverage_end:          2022-12-31T23:59:59\n    time_coverage_start:        1979-01-01T00:00:00\n    title:                      Climate Data for Coastal Upwelling Machine Le...xarray.DatasetDimensions:time: 730lat: 49lon: 13Coordinates: (3)lat(lat)float320.0 -0.25 -0.5 ... -11.75 -12.0long_name :latitudestandard_name :latitudeunits :degrees_northarray([  0.  ,  -0.25,  -0.5 ,  -0.75,  -1.  ,  -1.25,  -1.5 ,  -1.75,  -2.  ,\n        -2.25,  -2.5 ,  -2.75,  -3.  ,  -3.25,  -3.5 ,  -3.75,  -4.  ,  -4.25,\n        -4.5 ,  -4.75,  -5.  ,  -5.25,  -5.5 ,  -5.75,  -6.  ,  -6.25,  -6.5 ,\n        -6.75,  -7.  ,  -7.25,  -7.5 ,  -7.75,  -8.  ,  -8.25,  -8.5 ,  -8.75,\n        -9.  ,  -9.25,  -9.5 ,  -9.75, -10.  , -10.25, -10.5 , -10.75, -11.  ,\n       -11.25, -11.5 , -11.75, -12.  ], dtype=float32)lon(lon)float3242.0 42.25 42.5 ... 44.5 44.75 45.0long_name :longitudestandard_name :longitudeunits :degrees_eastarray([42.  , 42.25, 42.5 , 42.75, 43.  , 43.25, 43.5 , 43.75, 44.  , 44.25,\n       44.5 , 44.75, 45.  ], dtype=float32)time(time)datetime64[ns]1998-01-01 ... 1999-12-31axis :Tcomment :Data is averaged over the daylong_name :time centered on the daystandard_name :timetime_bounds :2000-01-01 00:00:00 to 2000-01-01 23:59:59array(['1998-01-01T00:00:00.000000000', '1998-01-02T00:00:00.000000000',\n       '1998-01-03T00:00:00.000000000', ..., '1999-12-29T00:00:00.000000000',\n       '1999-12-30T00:00:00.000000000', '1999-12-31T00:00:00.000000000'],\n      dtype='datetime64[ns]')Data variables: (2)u_curr(time, lat, lon)float32dask.array&lt;chunksize=(60, 49, 13), meta=np.ndarray&gt;comment :Velocities are an average over the top 30m of the mixed layercoverage_content_type :modelResultdepth :15mlong_name :zonal total surface currentsource :SSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148 ; WIND source: ECMWF ERA5 10m wind DOI: 10.24381/cds.adbb2d47 ; SST source: CMC 0.2 deg SST V2.0 DOI: 10.5067/GHCMC-4FM02standard_name :eastward_sea_water_velocityunits :m s-1valid_max :3.0valid_min :-3.0\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n1.77 MiB\n248.83 kiB\n\n\nShape\n(730, 49, 13)\n(100, 49, 13)\n\n\nDask graph\n8 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\nu_wind\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(60, 49, 13), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n10 metre U wind component\n\nnameCDM :\n\n10_metre_U_wind_component_surface\n\nnameECMWF :\n\n10 metre U wind component\n\nproduct_type :\n\nanalysis\n\nshortNameECMWF :\n\n10u\n\nstandard_name :\n\neastward_wind\n\nunits :\n\nm s**-1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n1.77 MiB\n248.83 kiB\n\n\nShape\n(730, 49, 13)\n(100, 49, 13)\n\n\nDask graph\n8 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\nIndexes: (3)latPandasIndexPandasIndex(Index([   0.0,  -0.25,   -0.5,  -0.75,   -1.0,  -1.25,   -1.5,  -1.75,   -2.0,\n        -2.25,   -2.5,  -2.75,   -3.0,  -3.25,   -3.5,  -3.75,   -4.0,  -4.25,\n         -4.5,  -4.75,   -5.0,  -5.25,   -5.5,  -5.75,   -6.0,  -6.25,   -6.5,\n        -6.75,   -7.0,  -7.25,   -7.5,  -7.75,   -8.0,  -8.25,   -8.5,  -8.75,\n         -9.0,  -9.25,   -9.5,  -9.75,  -10.0, -10.25,  -10.5, -10.75,  -11.0,\n       -11.25,  -11.5, -11.75,  -12.0],\n      dtype='float32', name='lat'))lonPandasIndexPandasIndex(Index([ 42.0, 42.25,  42.5, 42.75,  43.0, 43.25,  43.5, 43.75,  44.0, 44.25,\n        44.5, 44.75,  45.0],\n      dtype='float32', name='lon'))timePandasIndexPandasIndex(DatetimeIndex(['1998-01-01', '1998-01-02', '1998-01-03', '1998-01-04',\n               '1998-01-05', '1998-01-06', '1998-01-07', '1998-01-08',\n               '1998-01-09', '1998-01-10',\n               ...\n               '1999-12-22', '1999-12-23', '1999-12-24', '1999-12-25',\n               '1999-12-26', '1999-12-27', '1999-12-28', '1999-12-29',\n               '1999-12-30', '1999-12-31'],\n              dtype='datetime64[ns]', name='time', length=730, freq=None))Attributes: (17)creator_email :minhphan@uw.educreator_name :Minh Phancreator_type :persondate_created :2023-07-19geospatial_lat_max :32.0geospatial_lat_min :-12.0geospatial_lat_resolution :0.25geospatial_lat_units :degrees_northgeospatial_lon_max :102.0geospatial_lon_min :42.0geospatial_lon_resolution :0.25geospatial_lon_units :degrees_eastsource :Earth & Space Research (ESR), Copernicus Climate Change Service (C3S), Copernicus Marine Environment Monitoring Service (CMEMS), United States Geological Survey (USGS)summary :Daily mean of 0.25 x 0.25 degrees gridded data from multiple climate variables that may influence the patterns of coastal upwelling in the focused areatime_coverage_end :2022-12-31T23:59:59time_coverage_start :1979-01-01T00:00:00title :Climate Data for Coastal Upwelling Machine Learning Project in Indian Ocean\n\n\nWe can also graph the data right from slicing, especially heatmaps from 2D arrays, or line charts. This is especially useful when we want to inspect elements on the go.\n\n# make sure that the array you slice for a heatmap visualization is a 2D array\nheatmap_arr = ds['wind_speed'].sel(time='2000-01-02')\nheatmap_arr\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray 'wind_speed' (lat: 177, lon: 241)&gt;\ndask.array&lt;getitem, shape=(177, 241), dtype=float32, chunksize=(177, 241), chunktype=numpy.ndarray&gt;\nCoordinates:\n  * lat      (lat) float32 32.0 31.75 31.5 31.25 ... -11.25 -11.5 -11.75 -12.0\n  * lon      (lon) float32 42.0 42.25 42.5 42.75 ... 101.2 101.5 101.8 102.0\n    time     datetime64[ns] 2000-01-02\nAttributes:\n    long_name:  10 metre absolute speed\n    units:      m s**-1xarray.DataArray'wind_speed'lat: 177lon: 241dask.array&lt;chunksize=(177, 241), meta=np.ndarray&gt;\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n166.63 kiB\n166.63 kiB\n\n\nShape\n(177, 241)\n(177, 241)\n\n\nDask graph\n1 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\nCoordinates: (3)lat(lat)float3232.0 31.75 31.5 ... -11.75 -12.0long_name :latitudestandard_name :latitudeunits :degrees_northarray([ 32.  ,  31.75,  31.5 ,  31.25,  31.  ,  30.75,  30.5 ,  30.25,  30.  ,\n        29.75,  29.5 ,  29.25,  29.  ,  28.75,  28.5 ,  28.25,  28.  ,  27.75,\n        27.5 ,  27.25,  27.  ,  26.75,  26.5 ,  26.25,  26.  ,  25.75,  25.5 ,\n        25.25,  25.  ,  24.75,  24.5 ,  24.25,  24.  ,  23.75,  23.5 ,  23.25,\n        23.  ,  22.75,  22.5 ,  22.25,  22.  ,  21.75,  21.5 ,  21.25,  21.  ,\n        20.75,  20.5 ,  20.25,  20.  ,  19.75,  19.5 ,  19.25,  19.  ,  18.75,\n        18.5 ,  18.25,  18.  ,  17.75,  17.5 ,  17.25,  17.  ,  16.75,  16.5 ,\n        16.25,  16.  ,  15.75,  15.5 ,  15.25,  15.  ,  14.75,  14.5 ,  14.25,\n        14.  ,  13.75,  13.5 ,  13.25,  13.  ,  12.75,  12.5 ,  12.25,  12.  ,\n        11.75,  11.5 ,  11.25,  11.  ,  10.75,  10.5 ,  10.25,  10.  ,   9.75,\n         9.5 ,   9.25,   9.  ,   8.75,   8.5 ,   8.25,   8.  ,   7.75,   7.5 ,\n         7.25,   7.  ,   6.75,   6.5 ,   6.25,   6.  ,   5.75,   5.5 ,   5.25,\n         5.  ,   4.75,   4.5 ,   4.25,   4.  ,   3.75,   3.5 ,   3.25,   3.  ,\n         2.75,   2.5 ,   2.25,   2.  ,   1.75,   1.5 ,   1.25,   1.  ,   0.75,\n         0.5 ,   0.25,   0.  ,  -0.25,  -0.5 ,  -0.75,  -1.  ,  -1.25,  -1.5 ,\n        -1.75,  -2.  ,  -2.25,  -2.5 ,  -2.75,  -3.  ,  -3.25,  -3.5 ,  -3.75,\n        -4.  ,  -4.25,  -4.5 ,  -4.75,  -5.  ,  -5.25,  -5.5 ,  -5.75,  -6.  ,\n        -6.25,  -6.5 ,  -6.75,  -7.  ,  -7.25,  -7.5 ,  -7.75,  -8.  ,  -8.25,\n        -8.5 ,  -8.75,  -9.  ,  -9.25,  -9.5 ,  -9.75, -10.  , -10.25, -10.5 ,\n       -10.75, -11.  , -11.25, -11.5 , -11.75, -12.  ], dtype=float32)lon(lon)float3242.0 42.25 42.5 ... 101.8 102.0long_name :longitudestandard_name :longitudeunits :degrees_eastarray([ 42.  ,  42.25,  42.5 , ..., 101.5 , 101.75, 102.  ], dtype=float32)time()datetime64[ns]2000-01-02axis :Tcomment :Data is averaged over the daylong_name :time centered on the daystandard_name :timetime_bounds :2000-01-01 00:00:00 to 2000-01-01 23:59:59array('2000-01-02T00:00:00.000000000', dtype='datetime64[ns]')Indexes: (2)latPandasIndexPandasIndex(Index([  32.0,  31.75,   31.5,  31.25,   31.0,  30.75,   30.5,  30.25,   30.0,\n        29.75,\n       ...\n        -9.75,  -10.0, -10.25,  -10.5, -10.75,  -11.0, -11.25,  -11.5, -11.75,\n        -12.0],\n      dtype='float32', name='lat', length=177))lonPandasIndexPandasIndex(Index([  42.0,  42.25,   42.5,  42.75,   43.0,  43.25,   43.5,  43.75,   44.0,\n        44.25,\n       ...\n        99.75,  100.0, 100.25,  100.5, 100.75,  101.0, 101.25,  101.5, 101.75,\n        102.0],\n      dtype='float32', name='lon', length=241))Attributes: (2)long_name :10 metre absolute speedunits :m s**-1\n\n\n\nheatmap_arr.plot.imshow()\n\n\n\n\n\n# contour map with no filling\nheatmap_arr.plot.contour()\n\n\n\n\n\n# contour map with color filling\nheatmap_arr.plot.contourf()\n\n\n\n\n\nheatmap_arr.plot.surface()\n\n\n\n\n\nLine plots\n\nds['wind_speed'].mean(dim=['lat', 'lon']).plot(figsize=(10, 5))\n\n\n\n\nWe can add in parameters to customize our graphs, as additional arguments are passed to the underlying matplotlib plot() function.\n\nds['air_temp'].mean(dim=['lat', 'lon']).sel(time=slice('2007', '2009')).plot.line('r-o', figsize=(10,5), markersize=1)\n\n\n\n\n\n\nHistogram\n\n# creating a new Axe object if there is no currently\n# available one\nax = plt.gca() \nds['wind_dir'].plot.hist(ax = ax)\nax.set_xlabel('10 metre wind direction (degrees east)')\nax.set_ylabel('frequency')\nax.set_title('Daily average wind direction distribution over covered area (1979-2022)')\n\nText(0.5, 1.0, 'Daily average wind direction distribution over covered area (1979-2022)')\n\n\n\n\n\n\n# scroll along the axes to stretch the graph\nheatmap_arr.hvplot().options(cmap='bgy', width=600, height=500)",
    "crumbs": [
      "Data Tutorials",
      "Indian Ocean Zarr",
      "IO Zarr file"
    ]
  },
  {
    "objectID": "notebooks-data/02_IO_Zarr.html#resampling",
    "href": "notebooks-data/02_IO_Zarr.html#resampling",
    "title": "IO Zarr file",
    "section": "Resampling",
    "text": "Resampling\n\nWith xarray\nIf your xarray version works just fine with resample(), here’s the most straightforward way to resample your data temporally. It may take a long while for the data to finish resampling, especially if your dataset is big and your resampling frequency is small.\n\nds_resampled = ds['CHL'].resample(time='1M').mean()\n\n\n\nWithout xarray\nIf not, which was the case we encountered for a bit during the documentation, we developed a roundabout using Pandas’ equivalent function with the same name, which also happened to also be the underlying function that the library itself depends on (of course, more optimized), to help us perform resampling on our dataset.\n\n# resampling is having issues, so this is a temporary solution using Pandas \n# to perform resampling by month on one range...\n\n# choose a small range just in case overloadding happens...\n\nds_to_resample = ds['CHL'].sel(lat=slice(10, 5), lon=slice(75, 80)).to_dataframe()\n\n\ndf_resampled = ds_to_resample.groupby([pd.Grouper(freq='1M', level='time'),\n                        pd.Grouper(level='lon'),\n                        pd.Grouper(level='lat')]).mean()\n\n\nds_resampled = xr.Dataset.from_dataframe(df_resampled)\n\nWe can see that after resampling, our time dimension size is reduced from 8523 (days) to 280 (months). Resampling is successful!\n\n# original ds_to_resample object before converting to dataframe\nds['CHL'].sel(lat=slice(10, 5), lon=slice(75, 80))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray 'CHL' (time: 16071, lat: 21, lon: 21)&gt;\ndask.array&lt;getitem, shape=(16071, 21, 21), dtype=float32, chunksize=(100, 21, 21), chunktype=numpy.ndarray&gt;\nCoordinates:\n  * lat      (lat) float32 10.0 9.75 9.5 9.25 9.0 8.75 ... 6.0 5.75 5.5 5.25 5.0\n  * lon      (lon) float32 75.0 75.25 75.5 75.75 76.0 ... 79.25 79.5 79.75 80.0\n  * time     (time) datetime64[ns] 1979-01-01 1979-01-02 ... 2022-12-31\nAttributes:\n    _ChunkSizes:                [1, 256, 256]\n    ancillary_variables:        flags CHL_uncertainty\n    coverage_content_type:      modelResult\n    input_files_reprocessings:  Processors versions: MODIS R2022.0NRT/VIIRSN ...\n    long_name:                  Chlorophyll-a concentration - Mean of the bin...\n    standard_name:              mass_concentration_of_chlorophyll_a_in_sea_water\n    type:                       surface\n    units:                      milligram m-3\n    valid_max:                  1000.0\n    valid_min:                  0.0xarray.DataArray'CHL'time: 16071lat: 21lon: 21dask.array&lt;chunksize=(100, 21, 21), meta=np.ndarray&gt;\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n27.04 MiB\n172.27 kiB\n\n\nShape\n(16071, 21, 21)\n(100, 21, 21)\n\n\nDask graph\n161 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\nCoordinates: (3)lat(lat)float3210.0 9.75 9.5 9.25 ... 5.5 5.25 5.0long_name :latitudestandard_name :latitudeunits :degrees_northarray([10.  ,  9.75,  9.5 ,  9.25,  9.  ,  8.75,  8.5 ,  8.25,  8.  ,  7.75,\n        7.5 ,  7.25,  7.  ,  6.75,  6.5 ,  6.25,  6.  ,  5.75,  5.5 ,  5.25,\n        5.  ], dtype=float32)lon(lon)float3275.0 75.25 75.5 ... 79.5 79.75 80.0long_name :longitudestandard_name :longitudeunits :degrees_eastarray([75.  , 75.25, 75.5 , 75.75, 76.  , 76.25, 76.5 , 76.75, 77.  , 77.25,\n       77.5 , 77.75, 78.  , 78.25, 78.5 , 78.75, 79.  , 79.25, 79.5 , 79.75,\n       80.  ], dtype=float32)time(time)datetime64[ns]1979-01-01 ... 2022-12-31axis :Tcomment :Data is averaged over the daylong_name :time centered on the daystandard_name :timetime_bounds :2000-01-01 00:00:00 to 2000-01-01 23:59:59array(['1979-01-01T00:00:00.000000000', '1979-01-02T00:00:00.000000000',\n       '1979-01-03T00:00:00.000000000', ..., '2022-12-29T00:00:00.000000000',\n       '2022-12-30T00:00:00.000000000', '2022-12-31T00:00:00.000000000'],\n      dtype='datetime64[ns]')Indexes: (3)latPandasIndexPandasIndex(Index([10.0, 9.75,  9.5, 9.25,  9.0, 8.75,  8.5, 8.25,  8.0, 7.75,  7.5, 7.25,\n        7.0, 6.75,  6.5, 6.25,  6.0, 5.75,  5.5, 5.25,  5.0],\n      dtype='float32', name='lat'))lonPandasIndexPandasIndex(Index([ 75.0, 75.25,  75.5, 75.75,  76.0, 76.25,  76.5, 76.75,  77.0, 77.25,\n        77.5, 77.75,  78.0, 78.25,  78.5, 78.75,  79.0, 79.25,  79.5, 79.75,\n        80.0],\n      dtype='float32', name='lon'))timePandasIndexPandasIndex(DatetimeIndex(['1979-01-01', '1979-01-02', '1979-01-03', '1979-01-04',\n               '1979-01-05', '1979-01-06', '1979-01-07', '1979-01-08',\n               '1979-01-09', '1979-01-10',\n               ...\n               '2022-12-22', '2022-12-23', '2022-12-24', '2022-12-25',\n               '2022-12-26', '2022-12-27', '2022-12-28', '2022-12-29',\n               '2022-12-30', '2022-12-31'],\n              dtype='datetime64[ns]', name='time', length=16071, freq=None))Attributes: (10)_ChunkSizes :[1, 256, 256]ancillary_variables :flags CHL_uncertaintycoverage_content_type :modelResultinput_files_reprocessings :Processors versions: MODIS R2022.0NRT/VIIRSN R2022.0NRT/OLCIA 07.02/VIIRSJ1 R2022.0NRT/OLCIB 07.02long_name :Chlorophyll-a concentration - Mean of the binned pixelsstandard_name :mass_concentration_of_chlorophyll_a_in_sea_watertype :surfaceunits :milligram m-3valid_max :1000.0valid_min :0.0\n\n\n\nds_resampled\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:  (time: 528, lon: 21, lat: 21)\nCoordinates:\n  * time     (time) datetime64[ns] 1979-01-31 1979-02-28 ... 2022-12-31\n  * lon      (lon) float32 75.0 75.25 75.5 75.75 76.0 ... 79.25 79.5 79.75 80.0\n  * lat      (lat) float32 5.0 5.25 5.5 5.75 6.0 6.25 ... 9.0 9.25 9.5 9.75 10.0\nData variables:\n    CHL      (time, lon, lat) float32 nan nan nan nan ... 3.221 2.768 nan 1.353xarray.DatasetDimensions:time: 528lon: 21lat: 21Coordinates: (3)time(time)datetime64[ns]1979-01-31 ... 2022-12-31array(['1979-01-31T00:00:00.000000000', '1979-02-28T00:00:00.000000000',\n       '1979-03-31T00:00:00.000000000', ..., '2022-10-31T00:00:00.000000000',\n       '2022-11-30T00:00:00.000000000', '2022-12-31T00:00:00.000000000'],\n      dtype='datetime64[ns]')lon(lon)float3275.0 75.25 75.5 ... 79.5 79.75 80.0array([75.  , 75.25, 75.5 , 75.75, 76.  , 76.25, 76.5 , 76.75, 77.  , 77.25,\n       77.5 , 77.75, 78.  , 78.25, 78.5 , 78.75, 79.  , 79.25, 79.5 , 79.75,\n       80.  ], dtype=float32)lat(lat)float325.0 5.25 5.5 5.75 ... 9.5 9.75 10.0array([ 5.  ,  5.25,  5.5 ,  5.75,  6.  ,  6.25,  6.5 ,  6.75,  7.  ,  7.25,\n        7.5 ,  7.75,  8.  ,  8.25,  8.5 ,  8.75,  9.  ,  9.25,  9.5 ,  9.75,\n       10.  ], dtype=float32)Data variables: (1)CHL(time, lon, lat)float32nan nan nan nan ... 2.768 nan 1.353array([[[       nan,        nan,        nan, ...,        nan,\n                nan,        nan],\n        [       nan,        nan,        nan, ...,        nan,\n                nan,        nan],\n        [       nan,        nan,        nan, ...,        nan,\n                nan,        nan],\n        ...,\n        [       nan,        nan,        nan, ...,        nan,\n                nan,        nan],\n        [       nan,        nan,        nan, ...,        nan,\n                nan,        nan],\n        [       nan,        nan,        nan, ...,        nan,\n                nan,        nan]],\n\n       [[       nan,        nan,        nan, ...,        nan,\n                nan,        nan],\n        [       nan,        nan,        nan, ...,        nan,\n                nan,        nan],\n        [       nan,        nan,        nan, ...,        nan,\n                nan,        nan],\n...\n        [0.2705628 , 0.25798783, 0.25561604, ..., 1.4041072 ,\n         1.4939387 , 1.8776367 ],\n        [0.32376617, 0.2919578 , 0.28656372, ..., 1.7322022 ,\n         1.8477138 , 1.8143107 ],\n        [0.30853522, 0.3436496 , 0.3281598 , ..., 2.5401766 ,\n                nan, 1.3396835 ]],\n\n       [[0.23880072, 0.24270938, 0.24283718, ..., 0.20560512,\n         0.22738725, 0.3117161 ],\n        [0.2311706 , 0.2247422 , 0.23030376, ..., 0.21133746,\n         0.24978474, 0.3144625 ],\n        [0.22994642, 0.2216043 , 0.21443008, ..., 0.23380966,\n         0.27335462, 0.33697778],\n        ...,\n        [0.2801102 , 0.27076766, 0.28496662, ..., 1.4887002 ,\n         1.4666241 , 1.7220622 ],\n        [0.3205243 , 0.2954306 , 0.31341806, ..., 1.9154898 ,\n         1.42821   , 1.6312736 ],\n        [0.45734957, 0.3265505 , 0.33142075, ..., 2.7675717 ,\n                nan, 1.3527689 ]]], dtype=float32)Indexes: (3)timePandasIndexPandasIndex(DatetimeIndex(['1979-01-31', '1979-02-28', '1979-03-31', '1979-04-30',\n               '1979-05-31', '1979-06-30', '1979-07-31', '1979-08-31',\n               '1979-09-30', '1979-10-31',\n               ...\n               '2022-03-31', '2022-04-30', '2022-05-31', '2022-06-30',\n               '2022-07-31', '2022-08-31', '2022-09-30', '2022-10-31',\n               '2022-11-30', '2022-12-31'],\n              dtype='datetime64[ns]', name='time', length=528, freq='M'))lonPandasIndexPandasIndex(Index([ 75.0, 75.25,  75.5, 75.75,  76.0, 76.25,  76.5, 76.75,  77.0, 77.25,\n        77.5, 77.75,  78.0, 78.25,  78.5, 78.75,  79.0, 79.25,  79.5, 79.75,\n        80.0],\n      dtype='float32', name='lon'))latPandasIndexPandasIndex(Index([ 5.0, 5.25,  5.5, 5.75,  6.0, 6.25,  6.5, 6.75,  7.0, 7.25,  7.5, 7.75,\n        8.0, 8.25,  8.5, 8.75,  9.0, 9.25,  9.5, 9.75, 10.0],\n      dtype='float32', name='lat'))Attributes: (0)\n\n\n… and as a matter of fact, we can graph this data, too!\n\nCHL_month = ds_resampled.mean(dim=['lat', 'lon']).hvplot(label='monthly resampling').options(color='red', )\n\n\nCHL_day = ds['CHL'].sel(lat=slice(10, 5), lon=slice(75, 80)).mean(dim=['lat', 'lon']).hvplot(label='daily resampling').options(color='blue')\n\n\n(CHL_day*CHL_month).options(title='Monthly vs Daily resampling of chlorophyll-a levels', xlabel='year')",
    "crumbs": [
      "Data Tutorials",
      "Indian Ocean Zarr",
      "IO Zarr file"
    ]
  },
  {
    "objectID": "notebooks-data/02_Get_Points.html",
    "href": "notebooks-data/02_Get_Points.html",
    "title": "Getting Environmental Variables’ Data at a Time-Space instance",
    "section": "",
    "text": "You have a pandas dataframe with time, lat, lon that you got from say reading a csv file.\nYou have a xarray dataset from reading in the zarr file\nGoal is a pandas data from with time, lat, lon, values for all the environmental varables at that time, lat, lon\n\n\nimport xarray as xr\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport holoviews as hv\nimport hvplot.xarray\n\n\n\n\n\n\n\n\n\n\n\n# Change the file path accordingly\nda = xr.open_zarr('/home/jovyan/shared/data/INDIAN_OCEAN_025GRID_DAILY.zarr/')\n\n\ndf = pd.read_csv('/home/jovyan/shared/data/species_occ/io-sea-turtles.csv')\n\n\ndf.head()\n\n\n\n\n\n\n\n\noccurrenceID\nscientificName\ndateIdentified\neventDate\ndecimalLatitude\ndecimalLongitude\ncoordinateUncertaintyInMeters\nindividualCount\nlifeStage\nsex\nbathymetry\nshoredistance\nsst\nsss\ndate\n\n\n\n\n0\n1014_8853\nCaretta caretta\n2012-03-30T08:55:10\n2012-03-30T08:55:10\n9.14804\n50.69448\n0.11\n1.0\nJuvenile\nNaN\n35\n4680\n26.21\n35.63\n2012-03-30\n\n\n1\n1014_9766\nCaretta caretta\n2011-04-12T19:12:41\n2011-04-12T19:12:41\n6.40193\n59.87883\n0.11\n1.0\nJuvenile\nNaN\n3051\n899682\n28.67\n35.74\n2011-04-12\n\n\n2\n2069_333\nChelonia mydas\n2016-07-24T15:18:00\n2016-07-24T15:18:00\n25.69900\n55.78900\n111.32\n1.0\nNaN\nNaN\n8\n-67\n28.19\n38.72\n2016-07-24\n\n\n3\n1014_8861\nCaretta caretta\n2012-03-31T02:43:31\n2012-03-31T02:43:31\n9.21307\n50.82211\n0.11\n1.0\nJuvenile\nNaN\n136\n12208\n26.21\n35.65\n2012-03-31\n\n\n4\n1014_15706\nCaretta caretta\n2011-05-14T17:53:55\n2011-05-14T17:53:55\n15.39172\n55.71303\n0.11\n1.0\nJuvenile\nNaN\n2784\n193567\n27.00\n36.09\n2011-05-14\n\n\n\n\n\n\n\n\ndf = df[:20]\n\n\ndf['occurrenceID']\n\n0      1014_8853\n1      1014_9766\n2       2069_333\n3      1014_8861\n4     1014_15706\n5      2069_4254\n6      2069_3631\n7      2069_4910\n8     1014_16785\n9      2069_3419\n10     2069_5265\n11      2069_442\n12     2069_4668\n13    1014_15473\n14    1014_16862\n15    1014_16860\n16     1014_2087\n17    1014_16484\n18    1014_16899\n19    1014_16669\nName: occurrenceID, dtype: object\n\n\n\nptime = xr.DataArray(df['date'], dims=['point']) # data is from 1979-01-01 to 2022-12-31\nplat = xr.DataArray(df['decimalLatitude'], dims=['point'])  # Points to select need common dimensions\nplon = xr.DataArray(df['decimalLongitude'], dims=['point'])\n\n\nda.sel(time=ptime, lat=plat, lon=plon, method='nearest').squeeze().to_pandas()\n\n\n\n\n\n\n\n\nCHL\nCHL_uncertainty\nadt\nair_temp\ncurr_dir\ncurr_speed\nlat\nlon\nmlotst\nsla\n...\ntime\ntopo\nu_curr\nu_wind\nug_curr\nv_curr\nv_wind\nvg_curr\nwind_dir\nwind_speed\n\n\npoint\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n0.077778\n53.305443\nNaN\n299.421875\nNaN\nNaN\n9.25\n50.75\n13.046663\nNaN\n...\n2012-03-30\n-32.0\nNaN\n-2.179688\nNaN\nNaN\n1.361979\nNaN\n148.000763\n2.570219\n\n\n1\n0.087336\n38.892536\n0.842800\n301.322906\n164.178543\n0.183589\n6.50\n60.00\n21.820736\n0.097500\n...\n2011-04-12\n-2685.0\n-0.176634\n-4.575521\n-0.114507\n0.050054\n-2.950521\n0.011828\n-147.184082\n5.444352\n\n\n2\n1.637924\n53.872570\nNaN\n306.830719\nNaN\nNaN\n25.75\n55.75\n11.291849\nNaN\n...\n2016-07-24\n-9.0\nNaN\n-6.393229\nNaN\nNaN\n2.523438\nNaN\n158.460617\n6.873217\n\n\n3\n0.201034\n43.664085\nNaN\n299.718750\nNaN\nNaN\n9.25\n50.75\n12.817775\nNaN\n...\n2012-03-31\n-32.0\nNaN\n-2.481771\nNaN\nNaN\n1.101562\nNaN\n156.065399\n2.715258\n\n\n4\n0.099818\n38.205021\n0.754650\n301.520844\n49.900036\n0.530751\n15.50\n55.75\n11.520738\n0.164175\n...\n2011-05-14\n-3001.0\n0.341869\n-1.447917\n0.343384\n0.405983\n2.841146\n0.416438\n117.004478\n3.188820\n\n\n5\n0.689319\n28.379957\n0.462725\n298.252594\n70.057045\n0.139277\n24.50\n53.00\n7.171850\n-0.046750\n...\n2018-03-31\n-8.0\n0.047505\n3.419271\n0.053919\n0.130925\n-4.880208\n0.138531\n-54.983360\n5.958846\n\n\n6\n0.738169\n35.419315\n0.472050\n298.463531\n82.680542\n0.163747\n24.50\n53.25\n7.782220\n-0.038450\n...\n2018-03-31\n-10.0\n0.020862\n3.609375\n0.032643\n0.162413\n-4.356771\n0.158398\n-50.359882\n5.657653\n\n\n7\n2.898179\n48.014732\n0.678450\n306.979156\n83.276283\n0.146953\n24.75\n53.00\n11.978516\n0.166025\n...\n2019-08-16\n-14.0\n0.017206\n0.359375\n0.028725\n0.145943\n-2.687500\n0.140182\n-82.383530\n2.711421\n\n\n8\n0.139877\n31.482536\n0.752725\n298.158844\n132.076324\n0.093470\n15.50\n53.75\n11.291849\n0.220450\n...\n2011-04-05\n-2440.0\n-0.062636\n-0.677083\n-0.059925\n0.069378\n2.070312\n0.064436\n108.110016\n2.178218\n\n\n9\n0.922149\n21.962460\n0.450300\n300.229156\n-94.786385\n0.117982\n24.50\n53.00\n7.171850\n-0.059225\n...\n2017-04-27\n-8.0\n-0.009845\n2.500000\n0.023389\n-0.117570\n-2.994792\n-0.083020\n-50.145458\n3.901125\n\n\n10\nNaN\nNaN\nNaN\n305.799469\nNaN\nNaN\n24.25\n51.75\nNaN\n0.209875\n...\n2019-10-07\n20.0\nNaN\n-5.515625\nNaN\nNaN\n-0.151042\nNaN\n-178.431381\n5.517693\n\n\n11\nNaN\nNaN\nNaN\n304.533844\nNaN\nNaN\n25.75\n56.00\nNaN\nNaN\n...\n2016-09-24\n15.0\nNaN\n1.070312\nNaN\nNaN\n0.791667\nNaN\n36.488827\n1.331280\n\n\n12\n2.525344\n40.379536\n0.554250\n304.059906\n-166.844086\n0.089691\n24.50\n53.00\n7.171850\n0.044725\n...\n2019-05-28\n-8.0\n-0.087337\n-1.195312\n-0.069366\n-0.020414\n-1.648438\n-0.018889\n-125.946548\n2.036202\n\n\n13\n0.131018\n31.812517\n0.766250\n299.195312\n-24.765293\n0.264651\n16.00\n54.25\n19.074070\n0.230625\n...\n2011-04-11\n-2732.0\n0.240311\n1.335938\n0.209158\n-0.110863\n4.286458\n-0.100357\n72.689590\n4.489817\n\n\n14\n0.153894\n35.990002\n0.736325\n299.567719\n-132.773819\n0.464942\n14.50\n53.50\n15.182960\n0.152625\n...\n2011-04-13\n-2407.0\n-0.315745\n-1.312500\n-0.326198\n-0.341286\n2.192708\n-0.356120\n120.903671\n2.555509\n\n\n15\n0.153894\n35.990002\n0.736325\n299.567719\n-132.773819\n0.464942\n14.50\n53.50\n15.182960\n0.152625\n...\n2011-04-13\n-2407.0\n-0.315745\n-1.312500\n-0.326198\n-0.341286\n2.192708\n-0.356120\n120.903671\n2.555509\n\n\n16\n0.164712\n40.660110\n0.642800\n301.687500\n-17.193645\n0.117679\n16.75\n54.75\n12.588886\n0.092950\n...\n2012-05-13\n-2268.0\n0.112420\n6.015625\n0.092263\n-0.034786\n2.247396\n-0.001633\n20.485338\n6.421723\n\n\n17\n0.164154\n30.657511\n0.639750\n298.781250\n91.528801\n0.122125\n5.25\n54.00\n22.049625\n-0.079750\n...\n2011-02-10\n-4884.0\n-0.003258\n-4.299479\n0.094443\n0.122081\n-1.971354\n0.049081\n-155.368073\n4.729879\n\n\n18\n0.140080\n31.470005\n0.657150\n300.768219\n-103.054863\n0.217463\n13.50\n52.75\n13.809626\n0.037550\n...\n2011-04-16\n-2609.0\n-0.049121\n-2.177083\n-0.053068\n-0.211842\n0.380208\n-0.216044\n170.093689\n2.210034\n\n\n19\n0.182036\n30.130001\n0.736275\n298.018219\n151.549240\n0.114068\n16.50\n53.75\n16.174812\n0.193825\n...\n2011-03-24\n-2329.0\n-0.100291\n2.276042\n-0.100962\n0.054342\n2.364583\n0.063244\n46.093052\n3.282015\n\n\n\n\n20 rows × 22 columns\n\n\n\n\n# side check\n# add occurence ID for points (database)\n\npoints = pd.read_csv('/home/jovyan/shared-readwrite/data/species_occ/result.csv')\n\n\npoints\n\n\n\n\n\n\n\n\nCHL\nCHL_uncertainty\nadt\nair_temp\ncurr_dir\ncurr_speed\nlat\nlon\nmlotst\nsla\n...\ntopo\nu_curr\nu_wind\nug_curr\nv_curr\nv_wind\nvg_curr\nwind_dir\nwind_speed\noccurrenceID\n\n\n\n\n0\n0.077778\n53.305443\nNaN\n299.42188\nNaN\nNaN\n9.25\n50.75\n13.046663\nNaN\n...\n-32.0\nNaN\n-2.179688\nNaN\nNaN\n1.361979\nNaN\n148.000760\n2.570219\n1014_8853\n\n\n1\n0.087336\n38.892536\n0.842800\n301.32290\n164.178540\n0.183589\n6.50\n60.00\n21.820736\n0.097500\n...\n-2685.0\n-0.176634\n-4.575521\n-0.114507\n0.050054\n-2.950521\n0.011828\n-147.184080\n5.444352\n1014_9766\n\n\n2\n1.637924\n53.872570\nNaN\n306.83072\nNaN\nNaN\n25.75\n55.75\n11.291849\nNaN\n...\n-9.0\nNaN\n-6.393229\nNaN\nNaN\n2.523438\nNaN\n158.460620\n6.873217\n2069_333\n\n\n3\n0.201034\n43.664085\nNaN\n299.71875\nNaN\nNaN\n9.25\n50.75\n12.817775\nNaN\n...\n-32.0\nNaN\n-2.481771\nNaN\nNaN\n1.101562\nNaN\n156.065400\n2.715258\n1014_8861\n\n\n4\n0.099818\n38.205020\n0.754650\n301.52084\n49.900036\n0.530751\n15.50\n55.75\n11.520738\n0.164175\n...\n-3001.0\n0.341869\n-1.447917\n0.343384\n0.405983\n2.841146\n0.416438\n117.004480\n3.188820\n1014_15706\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n13205\n0.134301\n74.170000\n0.717500\n301.84116\n-91.168960\n0.037919\n19.75\n61.50\n36.469620\n0.063825\n...\n-3553.0\n-0.000774\n9.335938\n-0.130193\n-0.037911\n9.286458\n0.006756\n44.847763\n13.168069\n1014_2555\n\n\n13206\n0.705127\n28.212389\n0.620425\n300.71094\n108.626130\n0.072745\n24.75\n53.00\n11.139257\n0.108000\n...\n-14.0\n-0.023234\n2.289062\n-0.026993\n0.068935\n-2.375000\n0.052721\n-46.055580\n3.298550\n2069_7427\n\n\n13207\n0.974497\n32.285313\nNaN\n305.82553\nNaN\nNaN\n25.75\n55.75\n11.673330\nNaN\n...\n-9.0\nNaN\n1.078125\nNaN\nNaN\n-0.213542\nNaN\n-11.203434\n1.099069\n2069_587\n\n\n13208\n0.411613\n36.068120\n0.597650\n304.20572\n-107.023180\n0.112533\n24.75\n53.00\n12.741478\n0.085250\n...\n-14.0\n-0.032945\n2.906250\n-0.009166\n-0.107603\n-1.510417\n-0.094187\n-27.461494\n3.275309\n2069_272\n\n\n13209\n0.254070\n43.014880\n0.697400\n299.09897\n-94.746110\n0.627941\n15.50\n55.50\n12.207404\n0.109350\n...\n-2929.0\n-0.051956\n-1.369792\n-0.054724\n-0.625787\n0.901042\n-0.642169\n146.663280\n1.639575\n1014_1635\n\n\n\n\n13210 rows × 23 columns\n\n\n\n\npoints['occurrenceID'] = df['occurrenceID']\n\n\npoints.to_csv('/home/jovyan/shared-readwrite/data/species_occ/result2.csv', index=False)\n\n\npoints = points.drop(columns=['point'])",
    "crumbs": [
      "Data Tutorials",
      "Data viz and use",
      "Getting Environmental Variables' Data at a Time-Space instance"
    ]
  },
  {
    "objectID": "notebooks-data/01_OPeNDAP_Downloader.html#import-necessary-libraries",
    "href": "notebooks-data/01_OPeNDAP_Downloader.html#import-necessary-libraries",
    "title": "Download Data using OPeNDAP",
    "section": "Import necessary libraries",
    "text": "Import necessary libraries\n\nimport xarray as xr\nimport getpass\nfrom pydap.client import open_url\nfrom pydap.cas.get_cookies import setup_session\n\n\nUSERNAME = 'mphan'\nPASSWORD = getpass.getpass('Enter your password: ')\n\nEnter your password:  ········\n\n\nFor this notebook we want to stream data from the Copernicus Marine Environment Monitoring Service’s Global Ocean Physics Analysis\n\n# change your Dataset ID accordingly\nDATASET_ID = 'cmems_mod_glo_phy_my_0.083_P1D-m'\n\nIn the function below, we utilize a PydapDataStore, an Xarray store object used for accessing OpenDAP datasets. For this dataset, you need to log in your credentials using the name and password provided above. Note that not all OpenDAP datasets will require the same steps, so you should look up appropriate methods to access data.\n\ndef copernicusmarine_datastore(dataset, username, password):\n    cas_url = 'https://cmems-cas.cls.fr/cas/login'\n    session = setup_session(cas_url, username, password)\n    session.cookies.set(\"CASTGC\", session.cookies.get_dict()['CASTGC'])\n    database = ['my', 'nrt']\n    url = f'https://{database[0]}.cmems-du.eu/thredds/dodsC/{dataset}'\n    try:\n        data_store = xr.backends.PydapDataStore(open_url(url, session=session, user_charset='utf-8')) # needs PyDAP &gt;= v3.3.0 see https://github.com/pydap/pydap/pull/223/commits \n    except:\n        url = f'https://{database[1]}.cmems-du.eu/thredds/dodsC/{dataset}'\n        data_store = xr.backends.PydapDataStore(open_url(url, session=session, user_charset='utf-8')) # needs PyDAP &gt;= v3.3.0 see https://github.com/pydap/pydap/pull/223/commits\n    return data_store\n\n\ndata_store = copernicusmarine_datastore(DATASET_ID, USERNAME, PASSWORD)\n\nWhen you open a dataset from PyDAP’s Data Store object, only the “shell” of the dataset is streamed into our local machine. The rest of the data shall be remote, so if we want to process further outside of slicing/inspecting, we need to stream the additional data, which occupies lots of memory. The streaming/downloading speed is also very slow, so proceed with caution.\n\nDS = xr.open_dataset(data_store)\n\n\nDS\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:    (longitude: 4320, latitude: 2041, depth: 50, time: 10227)\nCoordinates:\n  * longitude  (longitude) float32 -180.0 -179.9 -179.8 ... 179.8 179.8 179.9\n  * latitude   (latitude) float32 -80.0 -79.92 -79.83 ... 89.83 89.92 90.0\n  * depth      (depth) float32 0.494 1.541 2.646 ... 5.275e+03 5.728e+03\n  * time       (time) datetime64[ns] 1993-01-01T12:00:00 ... 2020-12-31T12:00:00\nData variables:\n    mlotst     (time, latitude, longitude) float32 ...\n    zos        (time, latitude, longitude) float32 ...\n    bottomT    (time, latitude, longitude) float32 ...\n    sithick    (time, latitude, longitude) float32 ...\n    siconc     (time, latitude, longitude) float32 ...\n    usi        (time, latitude, longitude) float32 ...\n    vsi        (time, latitude, longitude) float32 ...\n    thetao     (time, depth, latitude, longitude) float32 ...\n    so         (time, depth, latitude, longitude) float32 ...\n    uo         (time, depth, latitude, longitude) float32 ...\n    vo         (time, depth, latitude, longitude) float32 ...\nAttributes: (12/24)\n    title:              daily mean fields from Global Ocean Physics Analysis ...\n    easting:            longitude\n    northing:           latitude\n    history:            2022/05/25 21:54:07 MERCATOR OCEAN Netcdf creation\n    source:             MERCATOR GLORYS12V1\n    institution:        MERCATOR OCEAN\n    ...                 ...\n    longitude_min:      -180.0\n    longitude_max:      179.91667\n    latitude_min:       -80.0\n    latitude_max:       90.0\n    z_min:              0.494025\n    z_max:              5727.917xarray.DatasetDimensions:longitude: 4320latitude: 2041depth: 50time: 10227Coordinates: (4)longitude(longitude)float32-180.0 -179.9 ... 179.8 179.9valid_min :-180.0valid_max :179.91667step :0.08332825units :degrees_eastunit_long :Degrees Eastlong_name :Longitudestandard_name :longitudeaxis :X_ChunkSizes :4320array([-180.     , -179.91667, -179.83333, ...,  179.75   ,  179.83333,\n        179.91667], dtype=float32)latitude(latitude)float32-80.0 -79.92 -79.83 ... 89.92 90.0valid_min :-80.0valid_max :90.0step :0.08333588units :degrees_northunit_long :Degrees Northlong_name :Latitudestandard_name :latitudeaxis :Y_ChunkSizes :2041array([-80.      , -79.916664, -79.833336, ...,  89.833336,  89.916664,\n        90.      ], dtype=float32)depth(depth)float320.494 1.541 ... 5.275e+03 5.728e+03valid_min :0.494025valid_max :5727.917units :mpositive :downunit_long :Meterslong_name :Depthstandard_name :depthaxis :Z_ChunkSizes :50array([4.940250e-01, 1.541375e+00, 2.645669e+00, 3.819495e+00, 5.078224e+00,\n       6.440614e+00, 7.929560e+00, 9.572997e+00, 1.140500e+01, 1.346714e+01,\n       1.581007e+01, 1.849556e+01, 2.159882e+01, 2.521141e+01, 2.944473e+01,\n       3.443415e+01, 4.034405e+01, 4.737369e+01, 5.576429e+01, 6.580727e+01,\n       7.785385e+01, 9.232607e+01, 1.097293e+02, 1.306660e+02, 1.558507e+02,\n       1.861256e+02, 2.224752e+02, 2.660403e+02, 3.181274e+02, 3.802130e+02,\n       4.539377e+02, 5.410889e+02, 6.435668e+02, 7.633331e+02, 9.023393e+02,\n       1.062440e+03, 1.245291e+03, 1.452251e+03, 1.684284e+03, 1.941893e+03,\n       2.225078e+03, 2.533336e+03, 2.865703e+03, 3.220820e+03, 3.597032e+03,\n       3.992484e+03, 4.405224e+03, 4.833291e+03, 5.274784e+03, 5.727917e+03],\n      dtype=float32)time(time)datetime64[ns]1993-01-01T12:00:00 ... 2020-12-...long_name :Time (hours since 1950-01-01)standard_name :timeaxis :T_ChunkSizes :1024array(['1993-01-01T12:00:00.000000000', '1993-01-02T12:00:00.000000000',\n       '1993-01-03T12:00:00.000000000', ..., '2020-12-29T12:00:00.000000000',\n       '2020-12-30T12:00:00.000000000', '2020-12-31T12:00:00.000000000'],\n      dtype='datetime64[ns]')Data variables: (11)mlotst(time, latitude, longitude)float32...long_name :Density ocean mixed layer thicknessstandard_name :ocean_mixed_layer_thickness_defined_by_sigma_thetaunits :munit_long :Metersvalid_min :1valid_max :6447cell_methods :area: mean_ChunkSizes :[1, 681, 1440][90172686240 values with dtype=float32]zos(time, latitude, longitude)float32...long_name :Sea surface heightstandard_name :sea_surface_height_above_geoidunits :munit_long :Metersvalid_min :-6181valid_max :5039cell_methods :area: mean_ChunkSizes :[1, 681, 1440][90172686240 values with dtype=float32]bottomT(time, latitude, longitude)float32...long_name :Sea floor potential temperaturestandard_name :sea_water_potential_temperature_at_sea_floorunits :degrees_Cunit_long :Degrees Celsiusvalid_min :-32757valid_max :21318cell_methods :area: mean_ChunkSizes :[1, 681, 1440][90172686240 values with dtype=float32]sithick(time, latitude, longitude)float32...long_name :Sea ice thicknessstandard_name :sea_ice_thicknessunits :munit_long :Metersvalid_min :1valid_max :4618cell_methods :area: mean where sea_ice_ChunkSizes :[1, 681, 1440][90172686240 values with dtype=float32]siconc(time, latitude, longitude)float32...long_name :Ice concentrationstandard_name :sea_ice_area_fractionunits :1unit_long :Fractionvalid_min :1valid_max :28060cell_methods :area: mean where sea_ice_ChunkSizes :[1, 681, 1440][90172686240 values with dtype=float32]usi(time, latitude, longitude)float32...long_name :Sea ice eastward velocitystandard_name :eastward_sea_ice_velocityunits :m s-1unit_long :Meters per secondvalid_min :-32707valid_max :32144cell_methods :area: mean where sea_ice_ChunkSizes :[1, 681, 1440][90172686240 values with dtype=float32]vsi(time, latitude, longitude)float32...long_name :Sea ice northward velocitystandard_name :northward_sea_ice_velocityunits :m s-1unit_long :Meters per secondvalid_min :-31907valid_max :31690cell_methods :area: mean where sea_ice_ChunkSizes :[1, 681, 1440][90172686240 values with dtype=float32]thetao(time, depth, latitude, longitude)float32...long_name :Temperaturestandard_name :sea_water_potential_temperatureunits :degrees_Cunit_long :Degrees Celsiusvalid_min :-32764valid_max :21298cell_methods :area: mean_ChunkSizes :[1, 7, 341, 720][4508634312000 values with dtype=float32]so(time, depth, latitude, longitude)float32...long_name :Salinitystandard_name :sea_water_salinityunits :1e-3unit_long :Practical Salinity Unitvalid_min :1valid_max :28336cell_methods :area: mean_ChunkSizes :[1, 7, 341, 720][4508634312000 values with dtype=float32]uo(time, depth, latitude, longitude)float32...long_name :Eastward velocitystandard_name :eastward_sea_water_velocityunits :m s-1unit_long :Meters per secondvalid_min :-3573valid_max :3559cell_methods :area: mean_ChunkSizes :[1, 7, 341, 720][4508634312000 values with dtype=float32]vo(time, depth, latitude, longitude)float32...long_name :Northward velocitystandard_name :northward_sea_water_velocityunits :m s-1unit_long :Meters per secondvalid_min :-3300valid_max :3399cell_methods :area: mean_ChunkSizes :[1, 7, 341, 720][4508634312000 values with dtype=float32]Indexes: (4)longitudePandasIndexPandasIndex(Index([            -180.0, -179.9166717529297, -179.8333282470703,\n                  -179.75, -179.6666717529297, -179.5833282470703,\n                   -179.5, -179.4166717529297, -179.3333282470703,\n                  -179.25,\n       ...\n        179.1666717529297,             179.25,  179.3333282470703,\n        179.4166717529297,              179.5,  179.5833282470703,\n        179.6666717529297,             179.75,  179.8333282470703,\n        179.9166717529297],\n      dtype='float32', name='longitude', length=4320))latitudePandasIndexPandasIndex(Index([             -80.0, -79.91666412353516, -79.83333587646484,\n                   -79.75, -79.66666412353516, -79.58333587646484,\n                    -79.5, -79.41666412353516, -79.33333587646484,\n                   -79.25,\n       ...\n                    89.25,  89.33333587646484,  89.41666412353516,\n                     89.5,  89.58333587646484,  89.66666412353516,\n                    89.75,  89.83333587646484,  89.91666412353516,\n                     90.0],\n      dtype='float32', name='latitude', length=2041))depthPandasIndexPandasIndex(Index([0.49402499198913574,  1.5413750410079956,  2.6456689834594727,\n        3.8194949626922607,   5.078224182128906,   6.440614223480225,\n          7.92956018447876,   9.572997093200684,  11.404999732971191,\n        13.467140197753906,  15.810070037841797,  18.495559692382812,\n        21.598819732666016,  25.211410522460938,  29.444730758666992,\n         34.43415069580078,  40.344051361083984,   47.37369155883789,\n         55.76428985595703,   65.80726623535156,   77.85385131835938,\n          92.3260726928711,  109.72930145263672,  130.66600036621094,\n        155.85069274902344,  186.12559509277344,  222.47520446777344,\n         266.0403137207031,   318.1274108886719,   380.2130126953125,\n         453.9377136230469,   541.0889282226562,   643.5667724609375,\n         763.3331298828125,   902.3392944335938,    1062.43994140625,\n            1245.291015625,     1452.2509765625,  1684.2840576171875,\n        1941.8929443359375,   2225.077880859375,        2533.3359375,\n         2865.702880859375,   3220.820068359375,   3597.031982421875,\n          3992.48388671875,    4405.22412109375,      4833.291015625,\n           5274.7841796875,     5727.9169921875],\n      dtype='float32', name='depth'))timePandasIndexPandasIndex(DatetimeIndex(['1993-01-01 12:00:00', '1993-01-02 12:00:00',\n               '1993-01-03 12:00:00', '1993-01-04 12:00:00',\n               '1993-01-05 12:00:00', '1993-01-06 12:00:00',\n               '1993-01-07 12:00:00', '1993-01-08 12:00:00',\n               '1993-01-09 12:00:00', '1993-01-10 12:00:00',\n               ...\n               '2020-12-22 12:00:00', '2020-12-23 12:00:00',\n               '2020-12-24 12:00:00', '2020-12-25 12:00:00',\n               '2020-12-26 12:00:00', '2020-12-27 12:00:00',\n               '2020-12-28 12:00:00', '2020-12-29 12:00:00',\n               '2020-12-30 12:00:00', '2020-12-31 12:00:00'],\n              dtype='datetime64[ns]', name='time', length=10227, freq=None))Attributes: (24)title :daily mean fields from Global Ocean Physics Analysis and Forecast updated Dailyeasting :longitudenorthing :latitudehistory :2022/05/25 21:54:07 MERCATOR OCEAN Netcdf creationsource :MERCATOR GLORYS12V1institution :MERCATOR OCEANreferences :http://www.mercator-ocean.frcomment :CMEMS productConventions :CF-1.4domain_name :GL12field_type :meanfield_date :2020-12-31 00:00:00field_julian_date :25932.0julian_day_unit :days since 1950-01-01 00:00:00forecast_range :forecast_type :bulletin_date :2021-01-06 00:00:00bulletin_type :operationallongitude_min :-180.0longitude_max :179.91667latitude_min :-80.0latitude_max :90.0z_min :0.494025z_max :5727.917\n\n\nWe can slice and get the portion of data we need. In consistency with the other notebooks, let’s get data from Jan-March 2003 for salinity at the most shallow level, within our region of interest (60-80 deg E, 5-25 deg N)\nDISCLAIMER: DO NOT LOAD DATASET IN ITS ENTIRETY BEFORE SLICING IF YOU DO NOT WANT TO OVERFLOW YOUR MEMORY. Actual data is only loaded when you slice the dataset.\n\nDS_sliced = DS['so'].isel(depth=0).sel(longitude=slice(60, 80), latitude=slice(5, 25), time=slice('2003-01', '2003-02'))\n\n\nDS_sliced\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray 'so' (time: 59, latitude: 241, longitude: 241)&gt;\narray([[[35.399944, 35.389263, ..., 33.65581 , 33.680225],\n        [35.425884, 35.407574, ..., 33.587147, 33.597828],\n        ...,\n        [36.52913 , 36.526077, ...,       nan,       nan],\n        [36.552017, 36.53981 , ...,       nan,       nan]],\n\n       [[35.384686, 35.380108, ..., 33.7611  , 33.78399 ],\n        [35.387737, 35.38316 , ..., 33.9259  , 34.067814],\n        ...,\n        [36.52913 , 36.527603, ...,       nan,       nan],\n        [36.545914, 36.54744 , ...,       nan,       nan]],\n\n       ...,\n\n       [[35.245827, 35.22599 , ..., 33.957947, 33.991516],\n        [35.254982, 35.24125 , ..., 33.898434, 33.935055],\n        ...,\n        [36.530655, 36.52913 , ...,       nan,       nan],\n        [36.552017, 36.57033 , ...,       nan,       nan]],\n\n       [[35.242775, 35.221413, ..., 34.06018 , 34.083073],\n        [35.26261 , 35.245827, ..., 34.0083  , 34.040344],\n        ...,\n        [36.562702, 36.57491 , ...,       nan,       nan],\n        [36.590168, 36.602375, ...,       nan,       nan]]], dtype=float32)\nCoordinates:\n  * longitude  (longitude) float32 60.0 60.08 60.17 60.25 ... 79.83 79.92 80.0\n  * latitude   (latitude) float32 5.0 5.083 5.167 5.25 ... 24.83 24.92 25.0\n    depth      float32 0.494\n  * time       (time) datetime64[ns] 2003-01-01T12:00:00 ... 2003-02-28T12:00:00\nAttributes:\n    long_name:      Salinity\n    standard_name:  sea_water_salinity\n    units:          1e-3\n    unit_long:      Practical Salinity Unit\n    valid_min:      1\n    valid_max:      28336\n    cell_methods:   area: mean\n    _ChunkSizes:    [1, 7, 341, 720]xarray.DataArray'so'time: 59latitude: 241longitude: 24135.4 35.39 35.38 35.37 35.37 35.37 35.36 ... nan nan nan nan nan nanarray([[[35.399944, 35.389263, ..., 33.65581 , 33.680225],\n        [35.425884, 35.407574, ..., 33.587147, 33.597828],\n        ...,\n        [36.52913 , 36.526077, ...,       nan,       nan],\n        [36.552017, 36.53981 , ...,       nan,       nan]],\n\n       [[35.384686, 35.380108, ..., 33.7611  , 33.78399 ],\n        [35.387737, 35.38316 , ..., 33.9259  , 34.067814],\n        ...,\n        [36.52913 , 36.527603, ...,       nan,       nan],\n        [36.545914, 36.54744 , ...,       nan,       nan]],\n\n       ...,\n\n       [[35.245827, 35.22599 , ..., 33.957947, 33.991516],\n        [35.254982, 35.24125 , ..., 33.898434, 33.935055],\n        ...,\n        [36.530655, 36.52913 , ...,       nan,       nan],\n        [36.552017, 36.57033 , ...,       nan,       nan]],\n\n       [[35.242775, 35.221413, ..., 34.06018 , 34.083073],\n        [35.26261 , 35.245827, ..., 34.0083  , 34.040344],\n        ...,\n        [36.562702, 36.57491 , ...,       nan,       nan],\n        [36.590168, 36.602375, ...,       nan,       nan]]], dtype=float32)Coordinates: (4)longitude(longitude)float3260.0 60.08 60.17 ... 79.92 80.0valid_min :-180.0valid_max :179.91667step :0.08332825units :degrees_eastunit_long :Degrees Eastlong_name :Longitudestandard_name :longitudeaxis :X_ChunkSizes :4320array([60.      , 60.083332, 60.166668, ..., 79.833336, 79.916664, 80.      ],\n      dtype=float32)latitude(latitude)float325.0 5.083 5.167 ... 24.92 25.0valid_min :-80.0valid_max :90.0step :0.08333588units :degrees_northunit_long :Degrees Northlong_name :Latitudestandard_name :latitudeaxis :Y_ChunkSizes :2041array([ 5.      ,  5.083333,  5.166667, ..., 24.833334, 24.916666, 25.      ],\n      dtype=float32)depth()float320.494valid_min :0.494025valid_max :5727.917units :mpositive :downunit_long :Meterslong_name :Depthstandard_name :depthaxis :Z_ChunkSizes :50array(0.494025, dtype=float32)time(time)datetime64[ns]2003-01-01T12:00:00 ... 2003-02-...long_name :Time (hours since 1950-01-01)standard_name :timeaxis :T_ChunkSizes :1024array(['2003-01-01T12:00:00.000000000', '2003-01-02T12:00:00.000000000',\n       '2003-01-03T12:00:00.000000000', '2003-01-04T12:00:00.000000000',\n       '2003-01-05T12:00:00.000000000', '2003-01-06T12:00:00.000000000',\n       '2003-01-07T12:00:00.000000000', '2003-01-08T12:00:00.000000000',\n       '2003-01-09T12:00:00.000000000', '2003-01-10T12:00:00.000000000',\n       '2003-01-11T12:00:00.000000000', '2003-01-12T12:00:00.000000000',\n       '2003-01-13T12:00:00.000000000', '2003-01-14T12:00:00.000000000',\n       '2003-01-15T12:00:00.000000000', '2003-01-16T12:00:00.000000000',\n       '2003-01-17T12:00:00.000000000', '2003-01-18T12:00:00.000000000',\n       '2003-01-19T12:00:00.000000000', '2003-01-20T12:00:00.000000000',\n       '2003-01-21T12:00:00.000000000', '2003-01-22T12:00:00.000000000',\n       '2003-01-23T12:00:00.000000000', '2003-01-24T12:00:00.000000000',\n       '2003-01-25T12:00:00.000000000', '2003-01-26T12:00:00.000000000',\n       '2003-01-27T12:00:00.000000000', '2003-01-28T12:00:00.000000000',\n       '2003-01-29T12:00:00.000000000', '2003-01-30T12:00:00.000000000',\n       '2003-01-31T12:00:00.000000000', '2003-02-01T12:00:00.000000000',\n       '2003-02-02T12:00:00.000000000', '2003-02-03T12:00:00.000000000',\n       '2003-02-04T12:00:00.000000000', '2003-02-05T12:00:00.000000000',\n       '2003-02-06T12:00:00.000000000', '2003-02-07T12:00:00.000000000',\n       '2003-02-08T12:00:00.000000000', '2003-02-09T12:00:00.000000000',\n       '2003-02-10T12:00:00.000000000', '2003-02-11T12:00:00.000000000',\n       '2003-02-12T12:00:00.000000000', '2003-02-13T12:00:00.000000000',\n       '2003-02-14T12:00:00.000000000', '2003-02-15T12:00:00.000000000',\n       '2003-02-16T12:00:00.000000000', '2003-02-17T12:00:00.000000000',\n       '2003-02-18T12:00:00.000000000', '2003-02-19T12:00:00.000000000',\n       '2003-02-20T12:00:00.000000000', '2003-02-21T12:00:00.000000000',\n       '2003-02-22T12:00:00.000000000', '2003-02-23T12:00:00.000000000',\n       '2003-02-24T12:00:00.000000000', '2003-02-25T12:00:00.000000000',\n       '2003-02-26T12:00:00.000000000', '2003-02-27T12:00:00.000000000',\n       '2003-02-28T12:00:00.000000000'], dtype='datetime64[ns]')Indexes: (3)longitudePandasIndexPandasIndex(Index([             60.0, 60.08333206176758, 60.16666793823242,\n                   60.25, 60.33333206176758, 60.41666793823242,\n                    60.5, 60.58333206176758, 60.66666793823242,\n                   60.75,\n       ...\n                   79.25, 79.33333587646484, 79.41666412353516,\n                    79.5, 79.58333587646484, 79.66666412353516,\n                   79.75, 79.83333587646484, 79.91666412353516,\n                    80.0],\n      dtype='float32', name='longitude', length=241))latitudePandasIndexPandasIndex(Index([              5.0, 5.083333492279053, 5.166666507720947,\n                    5.25, 5.333333492279053, 5.416666507720947,\n                     5.5, 5.583333492279053, 5.666666507720947,\n                    5.75,\n       ...\n                   24.25, 24.33333396911621, 24.41666603088379,\n                    24.5, 24.58333396911621, 24.66666603088379,\n                   24.75, 24.83333396911621, 24.91666603088379,\n                    25.0],\n      dtype='float32', name='latitude', length=241))timePandasIndexPandasIndex(DatetimeIndex(['2003-01-01 12:00:00', '2003-01-02 12:00:00',\n               '2003-01-03 12:00:00', '2003-01-04 12:00:00',\n               '2003-01-05 12:00:00', '2003-01-06 12:00:00',\n               '2003-01-07 12:00:00', '2003-01-08 12:00:00',\n               '2003-01-09 12:00:00', '2003-01-10 12:00:00',\n               '2003-01-11 12:00:00', '2003-01-12 12:00:00',\n               '2003-01-13 12:00:00', '2003-01-14 12:00:00',\n               '2003-01-15 12:00:00', '2003-01-16 12:00:00',\n               '2003-01-17 12:00:00', '2003-01-18 12:00:00',\n               '2003-01-19 12:00:00', '2003-01-20 12:00:00',\n               '2003-01-21 12:00:00', '2003-01-22 12:00:00',\n               '2003-01-23 12:00:00', '2003-01-24 12:00:00',\n               '2003-01-25 12:00:00', '2003-01-26 12:00:00',\n               '2003-01-27 12:00:00', '2003-01-28 12:00:00',\n               '2003-01-29 12:00:00', '2003-01-30 12:00:00',\n               '2003-01-31 12:00:00', '2003-02-01 12:00:00',\n               '2003-02-02 12:00:00', '2003-02-03 12:00:00',\n               '2003-02-04 12:00:00', '2003-02-05 12:00:00',\n               '2003-02-06 12:00:00', '2003-02-07 12:00:00',\n               '2003-02-08 12:00:00', '2003-02-09 12:00:00',\n               '2003-02-10 12:00:00', '2003-02-11 12:00:00',\n               '2003-02-12 12:00:00', '2003-02-13 12:00:00',\n               '2003-02-14 12:00:00', '2003-02-15 12:00:00',\n               '2003-02-16 12:00:00', '2003-02-17 12:00:00',\n               '2003-02-18 12:00:00', '2003-02-19 12:00:00',\n               '2003-02-20 12:00:00', '2003-02-21 12:00:00',\n               '2003-02-22 12:00:00', '2003-02-23 12:00:00',\n               '2003-02-24 12:00:00', '2003-02-25 12:00:00',\n               '2003-02-26 12:00:00', '2003-02-27 12:00:00',\n               '2003-02-28 12:00:00'],\n              dtype='datetime64[ns]', name='time', freq=None))Attributes: (8)long_name :Salinitystandard_name :sea_water_salinityunits :1e-3unit_long :Practical Salinity Unitvalid_min :1valid_max :28336cell_methods :area: mean_ChunkSizes :[1, 7, 341, 720]\n\n\nYou can get rid of the depth since it is an empty coordinate. Make sure to note the depth of the data sampled in your attribute when you work on the data, though!\n\nDS_sliced = DS_sliced.drop('depth')\n\n\nDS_sliced\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray 'so' (time: 59, latitude: 241, longitude: 241)&gt;\narray([[[35.399944, 35.389263, ..., 33.65581 , 33.680225],\n        [35.425884, 35.407574, ..., 33.587147, 33.597828],\n        ...,\n        [36.52913 , 36.526077, ...,       nan,       nan],\n        [36.552017, 36.53981 , ...,       nan,       nan]],\n\n       [[35.384686, 35.380108, ..., 33.7611  , 33.78399 ],\n        [35.387737, 35.38316 , ..., 33.9259  , 34.067814],\n        ...,\n        [36.52913 , 36.527603, ...,       nan,       nan],\n        [36.545914, 36.54744 , ...,       nan,       nan]],\n\n       ...,\n\n       [[35.245827, 35.22599 , ..., 33.957947, 33.991516],\n        [35.254982, 35.24125 , ..., 33.898434, 33.935055],\n        ...,\n        [36.530655, 36.52913 , ...,       nan,       nan],\n        [36.552017, 36.57033 , ...,       nan,       nan]],\n\n       [[35.242775, 35.221413, ..., 34.06018 , 34.083073],\n        [35.26261 , 35.245827, ..., 34.0083  , 34.040344],\n        ...,\n        [36.562702, 36.57491 , ...,       nan,       nan],\n        [36.590168, 36.602375, ...,       nan,       nan]]], dtype=float32)\nCoordinates:\n  * longitude  (longitude) float32 60.0 60.08 60.17 60.25 ... 79.83 79.92 80.0\n  * latitude   (latitude) float32 5.0 5.083 5.167 5.25 ... 24.83 24.92 25.0\n  * time       (time) datetime64[ns] 2003-01-01T12:00:00 ... 2003-02-28T12:00:00\nAttributes:\n    long_name:      Salinity\n    standard_name:  sea_water_salinity\n    units:          1e-3\n    unit_long:      Practical Salinity Unit\n    valid_min:      1\n    valid_max:      28336\n    cell_methods:   area: mean\n    _ChunkSizes:    [1, 7, 341, 720]xarray.DataArray'so'time: 59latitude: 241longitude: 24135.4 35.39 35.38 35.37 35.37 35.37 35.36 ... nan nan nan nan nan nanarray([[[35.399944, 35.389263, ..., 33.65581 , 33.680225],\n        [35.425884, 35.407574, ..., 33.587147, 33.597828],\n        ...,\n        [36.52913 , 36.526077, ...,       nan,       nan],\n        [36.552017, 36.53981 , ...,       nan,       nan]],\n\n       [[35.384686, 35.380108, ..., 33.7611  , 33.78399 ],\n        [35.387737, 35.38316 , ..., 33.9259  , 34.067814],\n        ...,\n        [36.52913 , 36.527603, ...,       nan,       nan],\n        [36.545914, 36.54744 , ...,       nan,       nan]],\n\n       ...,\n\n       [[35.245827, 35.22599 , ..., 33.957947, 33.991516],\n        [35.254982, 35.24125 , ..., 33.898434, 33.935055],\n        ...,\n        [36.530655, 36.52913 , ...,       nan,       nan],\n        [36.552017, 36.57033 , ...,       nan,       nan]],\n\n       [[35.242775, 35.221413, ..., 34.06018 , 34.083073],\n        [35.26261 , 35.245827, ..., 34.0083  , 34.040344],\n        ...,\n        [36.562702, 36.57491 , ...,       nan,       nan],\n        [36.590168, 36.602375, ...,       nan,       nan]]], dtype=float32)Coordinates: (3)longitude(longitude)float3260.0 60.08 60.17 ... 79.92 80.0valid_min :-180.0valid_max :179.91667step :0.08332825units :degrees_eastunit_long :Degrees Eastlong_name :Longitudestandard_name :longitudeaxis :X_ChunkSizes :4320array([60.      , 60.083332, 60.166668, ..., 79.833336, 79.916664, 80.      ],\n      dtype=float32)latitude(latitude)float325.0 5.083 5.167 ... 24.92 25.0valid_min :-80.0valid_max :90.0step :0.08333588units :degrees_northunit_long :Degrees Northlong_name :Latitudestandard_name :latitudeaxis :Y_ChunkSizes :2041array([ 5.      ,  5.083333,  5.166667, ..., 24.833334, 24.916666, 25.      ],\n      dtype=float32)time(time)datetime64[ns]2003-01-01T12:00:00 ... 2003-02-...long_name :Time (hours since 1950-01-01)standard_name :timeaxis :T_ChunkSizes :1024array(['2003-01-01T12:00:00.000000000', '2003-01-02T12:00:00.000000000',\n       '2003-01-03T12:00:00.000000000', '2003-01-04T12:00:00.000000000',\n       '2003-01-05T12:00:00.000000000', '2003-01-06T12:00:00.000000000',\n       '2003-01-07T12:00:00.000000000', '2003-01-08T12:00:00.000000000',\n       '2003-01-09T12:00:00.000000000', '2003-01-10T12:00:00.000000000',\n       '2003-01-11T12:00:00.000000000', '2003-01-12T12:00:00.000000000',\n       '2003-01-13T12:00:00.000000000', '2003-01-14T12:00:00.000000000',\n       '2003-01-15T12:00:00.000000000', '2003-01-16T12:00:00.000000000',\n       '2003-01-17T12:00:00.000000000', '2003-01-18T12:00:00.000000000',\n       '2003-01-19T12:00:00.000000000', '2003-01-20T12:00:00.000000000',\n       '2003-01-21T12:00:00.000000000', '2003-01-22T12:00:00.000000000',\n       '2003-01-23T12:00:00.000000000', '2003-01-24T12:00:00.000000000',\n       '2003-01-25T12:00:00.000000000', '2003-01-26T12:00:00.000000000',\n       '2003-01-27T12:00:00.000000000', '2003-01-28T12:00:00.000000000',\n       '2003-01-29T12:00:00.000000000', '2003-01-30T12:00:00.000000000',\n       '2003-01-31T12:00:00.000000000', '2003-02-01T12:00:00.000000000',\n       '2003-02-02T12:00:00.000000000', '2003-02-03T12:00:00.000000000',\n       '2003-02-04T12:00:00.000000000', '2003-02-05T12:00:00.000000000',\n       '2003-02-06T12:00:00.000000000', '2003-02-07T12:00:00.000000000',\n       '2003-02-08T12:00:00.000000000', '2003-02-09T12:00:00.000000000',\n       '2003-02-10T12:00:00.000000000', '2003-02-11T12:00:00.000000000',\n       '2003-02-12T12:00:00.000000000', '2003-02-13T12:00:00.000000000',\n       '2003-02-14T12:00:00.000000000', '2003-02-15T12:00:00.000000000',\n       '2003-02-16T12:00:00.000000000', '2003-02-17T12:00:00.000000000',\n       '2003-02-18T12:00:00.000000000', '2003-02-19T12:00:00.000000000',\n       '2003-02-20T12:00:00.000000000', '2003-02-21T12:00:00.000000000',\n       '2003-02-22T12:00:00.000000000', '2003-02-23T12:00:00.000000000',\n       '2003-02-24T12:00:00.000000000', '2003-02-25T12:00:00.000000000',\n       '2003-02-26T12:00:00.000000000', '2003-02-27T12:00:00.000000000',\n       '2003-02-28T12:00:00.000000000'], dtype='datetime64[ns]')Indexes: (3)longitudePandasIndexPandasIndex(Index([             60.0, 60.08333206176758, 60.16666793823242,\n                   60.25, 60.33333206176758, 60.41666793823242,\n                    60.5, 60.58333206176758, 60.66666793823242,\n                   60.75,\n       ...\n                   79.25, 79.33333587646484, 79.41666412353516,\n                    79.5, 79.58333587646484, 79.66666412353516,\n                   79.75, 79.83333587646484, 79.91666412353516,\n                    80.0],\n      dtype='float32', name='longitude', length=241))latitudePandasIndexPandasIndex(Index([              5.0, 5.083333492279053, 5.166666507720947,\n                    5.25, 5.333333492279053, 5.416666507720947,\n                     5.5, 5.583333492279053, 5.666666507720947,\n                    5.75,\n       ...\n                   24.25, 24.33333396911621, 24.41666603088379,\n                    24.5, 24.58333396911621, 24.66666603088379,\n                   24.75, 24.83333396911621, 24.91666603088379,\n                    25.0],\n      dtype='float32', name='latitude', length=241))timePandasIndexPandasIndex(DatetimeIndex(['2003-01-01 12:00:00', '2003-01-02 12:00:00',\n               '2003-01-03 12:00:00', '2003-01-04 12:00:00',\n               '2003-01-05 12:00:00', '2003-01-06 12:00:00',\n               '2003-01-07 12:00:00', '2003-01-08 12:00:00',\n               '2003-01-09 12:00:00', '2003-01-10 12:00:00',\n               '2003-01-11 12:00:00', '2003-01-12 12:00:00',\n               '2003-01-13 12:00:00', '2003-01-14 12:00:00',\n               '2003-01-15 12:00:00', '2003-01-16 12:00:00',\n               '2003-01-17 12:00:00', '2003-01-18 12:00:00',\n               '2003-01-19 12:00:00', '2003-01-20 12:00:00',\n               '2003-01-21 12:00:00', '2003-01-22 12:00:00',\n               '2003-01-23 12:00:00', '2003-01-24 12:00:00',\n               '2003-01-25 12:00:00', '2003-01-26 12:00:00',\n               '2003-01-27 12:00:00', '2003-01-28 12:00:00',\n               '2003-01-29 12:00:00', '2003-01-30 12:00:00',\n               '2003-01-31 12:00:00', '2003-02-01 12:00:00',\n               '2003-02-02 12:00:00', '2003-02-03 12:00:00',\n               '2003-02-04 12:00:00', '2003-02-05 12:00:00',\n               '2003-02-06 12:00:00', '2003-02-07 12:00:00',\n               '2003-02-08 12:00:00', '2003-02-09 12:00:00',\n               '2003-02-10 12:00:00', '2003-02-11 12:00:00',\n               '2003-02-12 12:00:00', '2003-02-13 12:00:00',\n               '2003-02-14 12:00:00', '2003-02-15 12:00:00',\n               '2003-02-16 12:00:00', '2003-02-17 12:00:00',\n               '2003-02-18 12:00:00', '2003-02-19 12:00:00',\n               '2003-02-20 12:00:00', '2003-02-21 12:00:00',\n               '2003-02-22 12:00:00', '2003-02-23 12:00:00',\n               '2003-02-24 12:00:00', '2003-02-25 12:00:00',\n               '2003-02-26 12:00:00', '2003-02-27 12:00:00',\n               '2003-02-28 12:00:00'],\n              dtype='datetime64[ns]', name='time', freq=None))Attributes: (8)long_name :Salinitystandard_name :sea_water_salinityunits :1e-3unit_long :Practical Salinity Unitvalid_min :1valid_max :28336cell_methods :area: mean_ChunkSizes :[1, 7, 341, 720]\n\n\n\nDS.isel(time=0)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:    (longitude: 4320, latitude: 2041, depth: 50)\nCoordinates:\n  * longitude  (longitude) float32 -180.0 -179.9 -179.8 ... 179.8 179.8 179.9\n  * latitude   (latitude) float32 -80.0 -79.92 -79.83 ... 89.83 89.92 90.0\n  * depth      (depth) float32 0.494 1.541 2.646 ... 5.275e+03 5.728e+03\n    time       datetime64[ns] 1993-01-01T12:00:00\nData variables:\n    mlotst     (latitude, longitude) float32 ...\n    zos        (latitude, longitude) float32 ...\n    bottomT    (latitude, longitude) float32 ...\n    sithick    (latitude, longitude) float32 ...\n    siconc     (latitude, longitude) float32 ...\n    usi        (latitude, longitude) float32 ...\n    vsi        (latitude, longitude) float32 ...\n    thetao     (depth, latitude, longitude) float32 ...\n    so         (depth, latitude, longitude) float32 ...\n    uo         (depth, latitude, longitude) float32 ...\n    vo         (depth, latitude, longitude) float32 ...\nAttributes: (12/24)\n    title:              daily mean fields from Global Ocean Physics Analysis ...\n    easting:            longitude\n    northing:           latitude\n    history:            2022/05/25 21:54:07 MERCATOR OCEAN Netcdf creation\n    source:             MERCATOR GLORYS12V1\n    institution:        MERCATOR OCEAN\n    ...                 ...\n    longitude_min:      -180.0\n    longitude_max:      179.91667\n    latitude_min:       -80.0\n    latitude_max:       90.0\n    z_min:              0.494025\n    z_max:              5727.917xarray.DatasetDimensions:longitude: 4320latitude: 2041depth: 50Coordinates: (4)longitude(longitude)float32-180.0 -179.9 ... 179.8 179.9valid_min :-180.0valid_max :179.91667step :0.08332825units :degrees_eastunit_long :Degrees Eastlong_name :Longitudestandard_name :longitudeaxis :X_ChunkSizes :4320array([-180.     , -179.91667, -179.83333, ...,  179.75   ,  179.83333,\n        179.91667], dtype=float32)latitude(latitude)float32-80.0 -79.92 -79.83 ... 89.92 90.0valid_min :-80.0valid_max :90.0step :0.08333588units :degrees_northunit_long :Degrees Northlong_name :Latitudestandard_name :latitudeaxis :Y_ChunkSizes :2041array([-80.      , -79.916664, -79.833336, ...,  89.833336,  89.916664,\n        90.      ], dtype=float32)depth(depth)float320.494 1.541 ... 5.275e+03 5.728e+03valid_min :0.494025valid_max :5727.917units :mpositive :downunit_long :Meterslong_name :Depthstandard_name :depthaxis :Z_ChunkSizes :50array([4.940250e-01, 1.541375e+00, 2.645669e+00, 3.819495e+00, 5.078224e+00,\n       6.440614e+00, 7.929560e+00, 9.572997e+00, 1.140500e+01, 1.346714e+01,\n       1.581007e+01, 1.849556e+01, 2.159882e+01, 2.521141e+01, 2.944473e+01,\n       3.443415e+01, 4.034405e+01, 4.737369e+01, 5.576429e+01, 6.580727e+01,\n       7.785385e+01, 9.232607e+01, 1.097293e+02, 1.306660e+02, 1.558507e+02,\n       1.861256e+02, 2.224752e+02, 2.660403e+02, 3.181274e+02, 3.802130e+02,\n       4.539377e+02, 5.410889e+02, 6.435668e+02, 7.633331e+02, 9.023393e+02,\n       1.062440e+03, 1.245291e+03, 1.452251e+03, 1.684284e+03, 1.941893e+03,\n       2.225078e+03, 2.533336e+03, 2.865703e+03, 3.220820e+03, 3.597032e+03,\n       3.992484e+03, 4.405224e+03, 4.833291e+03, 5.274784e+03, 5.727917e+03],\n      dtype=float32)time()datetime64[ns]1993-01-01T12:00:00long_name :Time (hours since 1950-01-01)standard_name :timeaxis :T_ChunkSizes :1024array('1993-01-01T12:00:00.000000000', dtype='datetime64[ns]')Data variables: (11)mlotst(latitude, longitude)float32...long_name :Density ocean mixed layer thicknessstandard_name :ocean_mixed_layer_thickness_defined_by_sigma_thetaunits :munit_long :Metersvalid_min :1valid_max :6447cell_methods :area: mean_ChunkSizes :[1, 681, 1440][8817120 values with dtype=float32]zos(latitude, longitude)float32...long_name :Sea surface heightstandard_name :sea_surface_height_above_geoidunits :munit_long :Metersvalid_min :-6181valid_max :5039cell_methods :area: mean_ChunkSizes :[1, 681, 1440][8817120 values with dtype=float32]bottomT(latitude, longitude)float32...long_name :Sea floor potential temperaturestandard_name :sea_water_potential_temperature_at_sea_floorunits :degrees_Cunit_long :Degrees Celsiusvalid_min :-32757valid_max :21318cell_methods :area: mean_ChunkSizes :[1, 681, 1440][8817120 values with dtype=float32]sithick(latitude, longitude)float32...long_name :Sea ice thicknessstandard_name :sea_ice_thicknessunits :munit_long :Metersvalid_min :1valid_max :4618cell_methods :area: mean where sea_ice_ChunkSizes :[1, 681, 1440][8817120 values with dtype=float32]siconc(latitude, longitude)float32...long_name :Ice concentrationstandard_name :sea_ice_area_fractionunits :1unit_long :Fractionvalid_min :1valid_max :28060cell_methods :area: mean where sea_ice_ChunkSizes :[1, 681, 1440][8817120 values with dtype=float32]usi(latitude, longitude)float32...long_name :Sea ice eastward velocitystandard_name :eastward_sea_ice_velocityunits :m s-1unit_long :Meters per secondvalid_min :-32707valid_max :32144cell_methods :area: mean where sea_ice_ChunkSizes :[1, 681, 1440][8817120 values with dtype=float32]vsi(latitude, longitude)float32...long_name :Sea ice northward velocitystandard_name :northward_sea_ice_velocityunits :m s-1unit_long :Meters per secondvalid_min :-31907valid_max :31690cell_methods :area: mean where sea_ice_ChunkSizes :[1, 681, 1440][8817120 values with dtype=float32]thetao(depth, latitude, longitude)float32...long_name :Temperaturestandard_name :sea_water_potential_temperatureunits :degrees_Cunit_long :Degrees Celsiusvalid_min :-32764valid_max :21298cell_methods :area: mean_ChunkSizes :[1, 7, 341, 720][440856000 values with dtype=float32]so(depth, latitude, longitude)float32...long_name :Salinitystandard_name :sea_water_salinityunits :1e-3unit_long :Practical Salinity Unitvalid_min :1valid_max :28336cell_methods :area: mean_ChunkSizes :[1, 7, 341, 720][440856000 values with dtype=float32]uo(depth, latitude, longitude)float32...long_name :Eastward velocitystandard_name :eastward_sea_water_velocityunits :m s-1unit_long :Meters per secondvalid_min :-3573valid_max :3559cell_methods :area: mean_ChunkSizes :[1, 7, 341, 720][440856000 values with dtype=float32]vo(depth, latitude, longitude)float32...long_name :Northward velocitystandard_name :northward_sea_water_velocityunits :m s-1unit_long :Meters per secondvalid_min :-3300valid_max :3399cell_methods :area: mean_ChunkSizes :[1, 7, 341, 720][440856000 values with dtype=float32]Indexes: (3)longitudePandasIndexPandasIndex(Index([            -180.0, -179.9166717529297, -179.8333282470703,\n                  -179.75, -179.6666717529297, -179.5833282470703,\n                   -179.5, -179.4166717529297, -179.3333282470703,\n                  -179.25,\n       ...\n        179.1666717529297,             179.25,  179.3333282470703,\n        179.4166717529297,              179.5,  179.5833282470703,\n        179.6666717529297,             179.75,  179.8333282470703,\n        179.9166717529297],\n      dtype='float32', name='longitude', length=4320))latitudePandasIndexPandasIndex(Index([             -80.0, -79.91666412353516, -79.83333587646484,\n                   -79.75, -79.66666412353516, -79.58333587646484,\n                    -79.5, -79.41666412353516, -79.33333587646484,\n                   -79.25,\n       ...\n                    89.25,  89.33333587646484,  89.41666412353516,\n                     89.5,  89.58333587646484,  89.66666412353516,\n                    89.75,  89.83333587646484,  89.91666412353516,\n                     90.0],\n      dtype='float32', name='latitude', length=2041))depthPandasIndexPandasIndex(Index([0.49402499198913574,  1.5413750410079956,  2.6456689834594727,\n        3.8194949626922607,   5.078224182128906,   6.440614223480225,\n          7.92956018447876,   9.572997093200684,  11.404999732971191,\n        13.467140197753906,  15.810070037841797,  18.495559692382812,\n        21.598819732666016,  25.211410522460938,  29.444730758666992,\n         34.43415069580078,  40.344051361083984,   47.37369155883789,\n         55.76428985595703,   65.80726623535156,   77.85385131835938,\n          92.3260726928711,  109.72930145263672,  130.66600036621094,\n        155.85069274902344,  186.12559509277344,  222.47520446777344,\n         266.0403137207031,   318.1274108886719,   380.2130126953125,\n         453.9377136230469,   541.0889282226562,   643.5667724609375,\n         763.3331298828125,   902.3392944335938,    1062.43994140625,\n            1245.291015625,     1452.2509765625,  1684.2840576171875,\n        1941.8929443359375,   2225.077880859375,        2533.3359375,\n         2865.702880859375,   3220.820068359375,   3597.031982421875,\n          3992.48388671875,    4405.22412109375,      4833.291015625,\n           5274.7841796875,     5727.9169921875],\n      dtype='float32', name='depth'))Attributes: (24)title :daily mean fields from Global Ocean Physics Analysis and Forecast updated Dailyeasting :longitudenorthing :latitudehistory :2022/05/25 21:54:07 MERCATOR OCEAN Netcdf creationsource :MERCATOR GLORYS12V1institution :MERCATOR OCEANreferences :http://www.mercator-ocean.frcomment :CMEMS productConventions :CF-1.4domain_name :GL12field_type :meanfield_date :2020-12-31 00:00:00field_julian_date :25932.0julian_day_unit :days since 1950-01-01 00:00:00forecast_range :forecast_type :bulletin_date :2021-01-06 00:00:00bulletin_type :operationallongitude_min :-180.0longitude_max :179.91667latitude_min :-80.0latitude_max :90.0z_min :0.494025z_max :5727.917\n\n\nFinally, we can export this dataset to combine with the rest of the data later\n\nDS_sliced.to_netcdf('demonstrated data/salinity_at_0_49m.nc')"
  },
  {
    "objectID": "notebooks-data/01_ERDDAP_Downloader.html#get-to-know-griddap-url-link-template",
    "href": "notebooks-data/01_ERDDAP_Downloader.html#get-to-know-griddap-url-link-template",
    "title": "Download data from NOAA ERDDAP using GRIDDAP",
    "section": "Get to know GRIDDAP URL link template",
    "text": "Get to know GRIDDAP URL link template\nOne of the datasets that we used in this project is Reanalysis Data ERA5 monthly 3d Wind velocities. For the default options, select file type as .nc (NetCDF3-binary file) and click ‘Just generate the URL,’ you can see the URL is then https://apdrc.soest.hawaii.edu/erddap/griddap/hawaii_soest_66d3_10d8_0f3c.nc?u[(2023-04-01T00:00:00Z):1:(2023-04-01T00:00:00Z)][(10.0):1:(1000.0)][(-90.0):1:(90.0)][(0.0):1:(359.75)],v[(2023-04-01T00:00:00Z):1:(2023-04-01T00:00:00Z)][(10.0):1:(1000.0)][(-90.0):1:(90.0)][(0.0):1:(359.75)] and it follows this template:\n\nhttps://apdrc.soest.hawaii.edu/erddap/griddap\n\n/DATASET_ID.FILE_EXTENSION\nfollowing by\nVARIABLE_NAME1 [(START_DIM1):STRIDE_DIM1:(STOP_DIM1)][(START_DIM2):STRIDE_DIM2:(STOP_DIM2)][(START_DIM3):STRIDE_DIM3:(STOP_DIM3)]…\nand then\nVARIABLE_NAME2[(START_DIM1):STRIDE_DIM1:(STOP_DIM1)][(START_DIM2):STRIDE_DIM2:(STOP_DIM2)][(START_DIM3):STRIDE_DIM3:(STOP_DIM3)]…\nand so on for all the variables. To illustrate this template, you can liken it to downloading every variable as an Xarray DataArray, and combine them together based on the coordinates. In the URL above, the order and specifications of the dimension slicing options must be the consistent for all variables, just like how Xarray combining by coords only works if the coordinates are so.\nThe template is also well-explained in GRIDDAP documentation.\nWe can all agree that trying to write down every template for different datasets is error-prone and tedious, so you are more than welcome to copy and modify your template using the original file generator Python formatted strings to help with generating URLs for downloads. Since URLs vary greatly form dataset to dataset, there is no ideal URL template to consider, but we will still develop a function to generalize the URL generator to the best of my knowledge.\nNOTE: for the URL template, we focus on downloading smaller chunks of the dataset, sliced temporally just like downloading from the EarthData database so that the remote server would not be broken handling the request. We also recommend you to download variables together in one NetCDF3 file (multiple variable names in one URL) instead of individual variables as it takes time piecing them all together.",
    "crumbs": [
      "Data Tutorials",
      "Data provider examples",
      "Download data from NOAA ERDDAP using GRIDDAP"
    ]
  },
  {
    "objectID": "notebooks-data/01_ERDDAP_Downloader.html#import-necessary-libraries",
    "href": "notebooks-data/01_ERDDAP_Downloader.html#import-necessary-libraries",
    "title": "Download data from NOAA ERDDAP using GRIDDAP",
    "section": "Import necessary libraries",
    "text": "Import necessary libraries\n\nimport xarray as xr\nimport numpy as np\nimport pandas as pd\nimport os, glob, shutil, urllib3",
    "crumbs": [
      "Data Tutorials",
      "Data provider examples",
      "Download data from NOAA ERDDAP using GRIDDAP"
    ]
  },
  {
    "objectID": "notebooks-data/01_ERDDAP_Downloader.html#download-data",
    "href": "notebooks-data/01_ERDDAP_Downloader.html#download-data",
    "title": "Download data from NOAA ERDDAP using GRIDDAP",
    "section": "Download data",
    "text": "Download data\nUnlike NASA Earthdata, we can slice dataset spatially directly for every server request.\n\ndef download_ERDDAP_URLs(var):\n    # get list of URLs\n    URLs, months = ERDDAP_URL_template_generator(var)\n    http = urllib3.PoolManager()\n    \n    MAIN_FOLDER = 'demonstrated data/ERDDAP'\n    TEMP_FOLDER = var['datasetID']\n    path_temp_folder = os.path.join(MAIN_FOLDER, TEMP_FOLDER)\n    \n    if not os.path.exists(path_temp_folder):\n        os.makedirs(path_temp_folder)\n    \n    for URL, month in zip(URLs, months):\n        fileout = os.path.join(path_temp_folder, f\"{month.strftime('%Y%m')}.nc\")\n        \n        # download\n        with http.request('GET', URL, preload_content=False) as resp, open(fileout, 'wb') as out_file:\n            shutil.copyfileobj(resp, out_file)\n        \n        resp.release_conn()\n        \n        print('Downloaded ' + fileout)\n\n\ndef ERDDAP_URL_template_generator(var) -&gt; list():\n    \"\"\"\n    Generates a list of ERDDAP URLs for downloading\n    \n    Example of parameters shown below in next code cell.\n        - datasetID: 'erdTAgeo1day_LonPM180'\n        - variable_name ['u', 'v']\n        - coordinates: {'time': '2000-01:1:2000-03', 'altitude': '0:1:0', 'latitude': '-12:1:12', 'longitude': '42:1:102'}\n    NOTE: 'time' dimension must be listed in order (typical of ERDDAP URLs)\n    \"\"\"\n\n    list_of_URLS = []\n    time_ele = dimension_boundaries_ordered['time'].split(':')\n    start_month = time_ele[0]\n    end_month = time_ele[2]\n    stride_time = time_ele[1]\n    months = pd.date_range(start_month, end_month, freq='M')\n    for month_idx in range(len(months)):\n        URL = f'https://apdrc.soest.hawaii.edu/erddap/griddap/{var_dict['datasetID']}.nc?'\n        for var in var_dict['variable_names']:\n            URL = URL + var + f\"[({months[month_idx].strftime('%Y-%m')}-01):{stride_time}:({months[month_idx].strftime('%Y-%m-%d')})]\"\n            for d in list(var_dict['coordinates'].values())[1:]:\n                d_ele = d.split(':')\n                URL = URL + f\"[({d_ele[0]}):{d_ele[1]}:({d_ele[2]})]\"\n            URL = URL + \",\"\n        \n        # eliminate last comma\n        list_of_URLS.append(URL[:-1])\n        \n        # example\n        # url = \"https://apdrc.soest.hawaii.edu/erddap/griddap/hawaii_soest_66d3_10d8_0f3c.nc?\"\\\n        # f\"u[({months[month_idx].strftime('%Y-%m')}-01):1:({months[month_idx+1].strftime('%Y-%m')})][(10):1:(10)][(-12):1:(32)][(42):1:(102)],\"\\\n        # f\"v[({months[month_idx].strftime('%Y-%m')}-01):1:({months[month_idx+1].strftime('%Y-%m')})][(10):1:(10)][(-12):1:(32)][(42):1:(102)]\"\n    return list_of_URLS, months\n\n\nvar = {\n    'datasetID': 'hawaii_soest_66d3_10d8_0f3c',\n    'variable_names': ['u', 'v'],\n    'coordinates': {'time': '2000-01:1:2000-10', # must be in order of the ERDDAP dataset dimension list\n                    'LEV': '10:1:10', \n                    'latitude': '-12:1:12', \n                    'longitude': '42:1:102'}\n}\n\nERDDAP_URL_template_generator(datasetID='hawaii_soest_66d3_10d8_0f3c', variable_names=['u', 'v'], dimension_boundaries_ordered={'time': '2000-01:1:2000-10', 'LEV': '10:1:10', 'latitude': '-12:1:12', 'longitude': '42:1:102'})\n\n['https://apdrc.soest.hawaii.edu/erddap/griddap/hawaii_soest_66d3_10d8_0f3c.nc?u[(2000-01-01):1:(2000-01-31)][(10):1:(10)][(-12):1:(12)][(42):1:(102)],v[(2000-01-01):1:(2000-01-31)][(10):1:(10)][(-12):1:(12)][(42):1:(102)]',\n 'https://apdrc.soest.hawaii.edu/erddap/griddap/hawaii_soest_66d3_10d8_0f3c.nc?u[(2000-02-01):1:(2000-02-29)][(10):1:(10)][(-12):1:(12)][(42):1:(102)],v[(2000-02-01):1:(2000-02-29)][(10):1:(10)][(-12):1:(12)][(42):1:(102)]',\n 'https://apdrc.soest.hawaii.edu/erddap/griddap/hawaii_soest_66d3_10d8_0f3c.nc?u[(2000-03-01):1:(2000-03-31)][(10):1:(10)][(-12):1:(12)][(42):1:(102)],v[(2000-03-01):1:(2000-03-31)][(10):1:(10)][(-12):1:(12)][(42):1:(102)]',\n 'https://apdrc.soest.hawaii.edu/erddap/griddap/hawaii_soest_66d3_10d8_0f3c.nc?u[(2000-04-01):1:(2000-04-30)][(10):1:(10)][(-12):1:(12)][(42):1:(102)],v[(2000-04-01):1:(2000-04-30)][(10):1:(10)][(-12):1:(12)][(42):1:(102)]',\n 'https://apdrc.soest.hawaii.edu/erddap/griddap/hawaii_soest_66d3_10d8_0f3c.nc?u[(2000-05-01):1:(2000-05-31)][(10):1:(10)][(-12):1:(12)][(42):1:(102)],v[(2000-05-01):1:(2000-05-31)][(10):1:(10)][(-12):1:(12)][(42):1:(102)]',\n 'https://apdrc.soest.hawaii.edu/erddap/griddap/hawaii_soest_66d3_10d8_0f3c.nc?u[(2000-06-01):1:(2000-06-30)][(10):1:(10)][(-12):1:(12)][(42):1:(102)],v[(2000-06-01):1:(2000-06-30)][(10):1:(10)][(-12):1:(12)][(42):1:(102)]',\n 'https://apdrc.soest.hawaii.edu/erddap/griddap/hawaii_soest_66d3_10d8_0f3c.nc?u[(2000-07-01):1:(2000-07-31)][(10):1:(10)][(-12):1:(12)][(42):1:(102)],v[(2000-07-01):1:(2000-07-31)][(10):1:(10)][(-12):1:(12)][(42):1:(102)]',\n 'https://apdrc.soest.hawaii.edu/erddap/griddap/hawaii_soest_66d3_10d8_0f3c.nc?u[(2000-08-01):1:(2000-08-31)][(10):1:(10)][(-12):1:(12)][(42):1:(102)],v[(2000-08-01):1:(2000-08-31)][(10):1:(10)][(-12):1:(12)][(42):1:(102)]',\n 'https://apdrc.soest.hawaii.edu/erddap/griddap/hawaii_soest_66d3_10d8_0f3c.nc?u[(2000-09-01):1:(2000-09-30)][(10):1:(10)][(-12):1:(12)][(42):1:(102)],v[(2000-09-01):1:(2000-09-30)][(10):1:(10)][(-12):1:(12)][(42):1:(102)]']",
    "crumbs": [
      "Data Tutorials",
      "Data provider examples",
      "Download data from NOAA ERDDAP using GRIDDAP"
    ]
  },
  {
    "objectID": "notebooks-data/00_NASA_Earthdata_Authentication.html#summary",
    "href": "notebooks-data/00_NASA_Earthdata_Authentication.html#summary",
    "title": "Authentication for NASA Earthdata",
    "section": "Summary",
    "text": "Summary\nThis notebook creates a hidden .netrc file (_netrc for Window OS) with Earthdata login credentials in your home directory. This file is needed to access NASA Earthdata assets from a scripting environment like Python.\n\nEarthdata Login\nAn Earthdata Login account is required to access data, as well as discover restricted data, from the NASA Earthdata system. Thus, to access NASA data, you need Earthdata Login. Please visit https://urs.earthdata.nasa.gov to register and manage your Earthdata Login account. This account is free to create and only takes a moment to set up.\n\n\nAuthentication via netrc File\nYou will need a netrc file containing your NASA Earthdata Login credentials in order to execute the notebooks. A netrc file can be created manually within text editor and saved to your home directory. An example of the required content is below.\nmachine urs.earthdata.nasa.gov\nlogin &lt;USERNAME&gt;\npassword &lt;PASSWORD&gt;\n&lt;USERNAME&gt; and &lt;PASSWORD&gt; would be replaced by your actual Earthdata Login username and password respectively.",
    "crumbs": [
      "Data Tutorials",
      "Earth data basics",
      "Authentication for NASA Earthdata"
    ]
  },
  {
    "objectID": "notebooks-data/00_NASA_Earthdata_Authentication.html#import-required-packages",
    "href": "notebooks-data/00_NASA_Earthdata_Authentication.html#import-required-packages",
    "title": "Authentication for NASA Earthdata",
    "section": "Import Required Packages",
    "text": "Import Required Packages\n\nfrom netrc import netrc\nfrom subprocess import Popen\nfrom platform import system\nfrom getpass import getpass\nimport os\n\nThe code below will:\n\ncheck what operating system (OS) is being used to determine which netrc file to check for/create (.netrc or _netrc)\ncheck if you have an netrc file, and if so, varify if those credentials are for the Earthdata endpoint\ncreate a netrc file if a netrc file is not present.\n\n\nurs = 'urs.earthdata.nasa.gov'    # Earthdata URL endpoint for authentication\nprompts = ['Enter NASA Earthdata Login Username: ',\n           'Enter NASA Earthdata Login Password: ']\n\n# Determine the OS (Windows machines usually use an '_netrc' file)\nnetrc_name = \"_netrc\" if system()==\"Windows\" else \".netrc\"\n\n# Determine if netrc file exists, and if so, if it includes NASA Earthdata Login Credentials\ntry:\n    netrcDir = os.path.expanduser(f\"~/{netrc_name}\")\n    netrc(netrcDir).authenticators(urs)[0]\n\n# Below, create a netrc file and prompt user for NASA Earthdata Login Username and Password\nexcept FileNotFoundError:\n    homeDir = os.path.expanduser(\"~\")\n    Popen('touch {0}{2} | echo machine {1} &gt;&gt; {0}{2}'.format(homeDir + os.sep, urs, netrc_name), shell=True)\n    Popen('echo login {} &gt;&gt; {}{}'.format(getpass(prompt=prompts[0]), homeDir + os.sep, netrc_name), shell=True)\n    Popen('echo \\'password {} \\'&gt;&gt; {}{}'.format(getpass(prompt=prompts[1]), homeDir + os.sep, netrc_name), shell=True)\n    # Set restrictive permissions\n    Popen('chmod 0600 {0}{1}'.format(homeDir + os.sep, netrc_name), shell=True)\n\n    # Determine OS and edit netrc file if it exists but is not set up for NASA Earthdata Login\nexcept TypeError:\n    homeDir = os.path.expanduser(\"~\")\n    Popen('echo machine {1} &gt;&gt; {0}{2}'.format(homeDir + os.sep, urs, netrc_name), shell=True)\n    Popen('echo login {} &gt;&gt; {}{}'.format(getpass(prompt=prompts[0]), homeDir + os.sep, netrc_name), shell=True)\n    Popen('echo \\'password {} \\'&gt;&gt; {}{}'.format(getpass(prompt=prompts[1]), homeDir + os.sep, netrc_name), shell=True)\n\n\nSee if the file was created\nIf the file was created, we’ll see a .netrc file (_netrc for Window OS) in the list printed below. To view the contents from a Jupyter environment, click File on the top toolbar, select Open from Path…, type .netrc, and click Open. The .netrc file will open within the text editor.\n\n!!! Beware, your password will be visible if the .netrc file is opened in the text editor.\n\n\n!",
    "crumbs": [
      "Data Tutorials",
      "Earth data basics",
      "Authentication for NASA Earthdata"
    ]
  },
  {
    "objectID": "nasa-tutorials/00_Setup.html",
    "href": "nasa-tutorials/00_Setup.html",
    "title": "00. Setup for tutorials",
    "section": "",
    "text": "This tutorial will help you set up your JupyterHub (or Hub) with tutorials and other materials from our Cloud Hackathon github repository and connect your github account."
  },
  {
    "objectID": "nasa-tutorials/00_Setup.html#step-1.-login-to-the-hub",
    "href": "nasa-tutorials/00_Setup.html#step-1.-login-to-the-hub",
    "title": "00. Setup for tutorials",
    "section": "Step 1. Login to the Hub",
    "text": "Step 1. Login to the Hub\nPlease go to the Openscapes Jupyter Hub. Log in with your GitHub Account, and select “Small”.\n\n\nNote: It takes a few minutes for the Hub to load. Please be patient!\n\nWhile the Hub loads, we’ll:\n\nDiscuss cloud environments\nSee how my Desktop is setup\nFork the Hackathon repository at github.com\nDiscuss python and conda environments\n\nThen, when the Hub is loaded, we’ll get oriented in the Hub and clone the forked repository into our cloud environment."
  },
  {
    "objectID": "nasa-tutorials/00_Setup.html#discussion-cloud-environment",
    "href": "nasa-tutorials/00_Setup.html#discussion-cloud-environment",
    "title": "00. Setup for tutorials",
    "section": "Discussion: Cloud environment",
    "text": "Discussion: Cloud environment\nA brief overview about the NASA Openscapes Cloud Environment (following lessons from the Clinic).\n\nCloud infrastructure\n\nCloud: AWS us-west-2\n\nData: AWS S3 (cloud) and NASA DAAC data centers (on-prem).\nCloud compute environment: 2i2c Jupyterhub deployment\n\nIDE: JupyterLab"
  },
  {
    "objectID": "nasa-tutorials/00_Setup.html#discussion-my-desktop-setup",
    "href": "nasa-tutorials/00_Setup.html#discussion-my-desktop-setup",
    "title": "00. Setup for tutorials",
    "section": "Discussion: My desktop setup",
    "text": "Discussion: My desktop setup\nI’ll screenshare to show and/or talk through how I have oriented the following software we’re using:\n\n2i2c Jupyterhub (our main workspace)\nHackathon Repo &lt;&gt; Hackathon Book (my teaching notes, your reference material)\nZoom Chat\nSlack"
  },
  {
    "objectID": "nasa-tutorials/00_Setup.html#step-2.-fork-the-hackathon-github-repository",
    "href": "nasa-tutorials/00_Setup.html#step-2.-fork-the-hackathon-github-repository",
    "title": "00. Setup for tutorials",
    "section": "Step 2. Fork the Hackathon GitHub repository",
    "text": "Step 2. Fork the Hackathon GitHub repository\n“How do I get the tutorial repository into the Hub?”. There are 2 steps. The first is from GitHub.com to fork the tutorial repository so that there is a connected copy in your user account that you can edit and push changes that won’t affect the nasa-openscapes copy.\nGo to https://github.com/nasa-openscapes/2021-Cloud-Hackathon and fork the repository.\n\nNote: if you’ve already done this in the Pre-Hackathon Clinic, you’ll need to make sure you have the latest, following the daily setup instructions."
  },
  {
    "objectID": "nasa-tutorials/00_Setup.html#discussion-python-and-conda-environments",
    "href": "nasa-tutorials/00_Setup.html#discussion-python-and-conda-environments",
    "title": "00. Setup for tutorials",
    "section": "Discussion: Python and Conda environments",
    "text": "Discussion: Python and Conda environments\nWhy Python?\n\n\n\nPython Data Stack. Source: Jake VanderPlas, “The State of the Stack,” SciPy Keynote (SciPy 2015).\n\n\nDefault Python Environment:\nWe’ve set up the Python environment with conda.\n\n\n\n\n\n\nConda environment\n\n\n\n\n\nname: openscapes\nchannels:\n  - conda-forge\ndependencies:\n  - python=3.9\n  - pangeo-notebook\n  - awscli~=1.20\n  - boto3~=1.19\n  - gdal~=3.3\n  - rioxarray~=0.8\n  - xarray~=0.19\n  - h5netcdf~=0.11\n  - netcdf4~=1.5\n  - h5py~=2.10\n  - geoviews~=1.9\n  - matplotlib-base~=3.4\n  - hvplot~=0.7\n  - pyproj~=3.2\n  - bqplot~=0.12\n  - geopandas~=0.10\n  - zarr~=2.10\n  - cartopy~=0.20\n  - shapely==1.7.1\n  - pyresample~=1.22\n  - joblib~=1.1\n  - pystac-client~=0.3\n  - s3fs~=2021.7\n  - ipyleaflet~=0.14\n  - sidecar~=0.5\n  - jupyterlab-geojson~=3.1\n  - jupyterlab-git\n  - jupyter-resource-usage\n  - ipympl~=0.6\n  - conda-lock~=0.12\n  - pooch~=1.5\n  - pip\n  - pip:\n    - tqdm\n    - harmony-py\n    - earthdata\n    - zarr-eosdis-store\n\n\n\n\nBash terminal and installed software\nLibraries that are available from the terminal\n\ngdal 3.3 commands ( gdalinfo, gdaltransform…)\nhdf5 commands ( h5dump, h5ls..)\nnetcdf4 commands (ncdump, ncinfo …)\njq (parsing json files or streams from curl)\ncurl (fetch resources from the web)\nawscli (AWS API client, to interact with AWS cloud services)\nvim (editor)\ntree ( directory tree)\nmore …\n\n\n\nUpdating the environment\nScientific Python is a vast space and we only included libraries that are needed in our tutorials. Our default environment can be updated to include any Python library that’s available on pip or conda.\nThe project used to create our default environment is called corn (as it can include many Python kernels).\nIf we want to update a library or install a whole new environment we need to open an issue on this repository. We can help your teams do this during project hacktime.\n\n\ncorn 🌽"
  },
  {
    "objectID": "nasa-tutorials/00_Setup.html#step-3.-jupyterhub-orientation",
    "href": "nasa-tutorials/00_Setup.html#step-3.-jupyterhub-orientation",
    "title": "00. Setup for tutorials",
    "section": "Step 3. JupyterHub orientation",
    "text": "Step 3. JupyterHub orientation\nNow that the Hub is loaded, let’s get oriented.\n\n\nFirst impressions\n\nLauncher & the big blue button\n“home directory”"
  },
  {
    "objectID": "nasa-tutorials/00_Setup.html#step-4.-clone-the-hackathon-github-repository",
    "href": "nasa-tutorials/00_Setup.html#step-4.-clone-the-hackathon-github-repository",
    "title": "00. Setup for tutorials",
    "section": "Step 4. Clone the Hackathon GitHub repository",
    "text": "Step 4. Clone the Hackathon GitHub repository\nNow we’ll clone the GitHub repository, using a git extension for the JupyterHub. Go to your github account, and navigate to the repository that you just created by forking from the Openscapes repository.\nClick to copy the url for cloning the repository.\n\nNow, go to JupyterHub and click on the git extension in the left panel and then click the blue button “Clone a Repository”.\n\nThen, paste the repository link to the forked repository that you copied from your github account into the “Clone a repo” pop up window. Then click the blue “CLONE” button. It will take a few moments to clone the repository into your Hub.\nYour link should look like https://github.com/YOUR-USERNAME/2021-Cloud-Hackathon. For example, the link is https://github.com/virdi/2021-Cloud-Hackathon. Note that it include your github username in the repo link.\n\nAlternatively, you can use the terminal (command line) as per github workflows: first-time setup.\nOnce the repository is cloned, you will see a new directory in the “File Browser” panel on the left named “2021-Cloud-Hackathon”. In this directory, you have all hackathon material including the tutorials and this book to follow along during other Tutorials. You are all set.\n\n\nREMEMBER: This is your copy (or fork) of the hackathon materials and jupyter notebooks. So feel free to make any changes to the content of this repository."
  },
  {
    "objectID": "nasa-tutorials/00_Setup.html#jupyter-notebooks",
    "href": "nasa-tutorials/00_Setup.html#jupyter-notebooks",
    "title": "00. Setup for tutorials",
    "section": "Jupyter notebooks",
    "text": "Jupyter notebooks\nLet’s get oriented to Jupyter notebooks, which we’ll use in all the tutorials."
  },
  {
    "objectID": "nasa-tutorials/00_Setup.html#how-do-i-end-my-session",
    "href": "nasa-tutorials/00_Setup.html#how-do-i-end-my-session",
    "title": "00. Setup for tutorials",
    "section": "How do I end my session?",
    "text": "How do I end my session?\n(Also see How do I end my Openscapes session? Will I lose all of my work?)\nWhen you are finished working for the day it is important to explicitly log out of your Openscapes session. The reason for this is it will save us a bit of money! When you keep a session active it uses up AWS resources and keeps a series of virtual machines deployed.\nStopping the server happens automatically when you log out, so navigate to “File -&gt; Log Out” and just click “Log Out”!\n!!! NOTE “logging out” - Logging out will NOT cause any of your work to be lost or deleted. It simply shuts down some resources. It would be equivalent to turning off your desktop computer at the end of the day."
  },
  {
    "objectID": "nasa-tutorials/00_Setup.html#step-5.-tracking-changes-optional",
    "href": "nasa-tutorials/00_Setup.html#step-5.-tracking-changes-optional",
    "title": "00. Setup for tutorials",
    "section": "Step 5. Tracking changes (Optional)",
    "text": "Step 5. Tracking changes (Optional)\nNow that you have forked and cloned the repository in your Hub, you can make changes (edit, add, and/or delete content) and track these files using git. In this step, we will provide an overview of how to use git using the graphical interface (the JupyterLab git extension).\n\nStep 5.1. Configure Git (git config)\nConfigure git with your name and email address as shown here.\ngit config --global user.name \"Makhan Virdi\"\ngit config --global user.email \"Makhan.Virdi@gmail.com\"\nOpen a new terminal: File &gt;&gt; New &gt;&gt; Terminal\n\nConfigure git to store your github credentials to avoid having to enter your github username and token each time you push changes to your repository(in Step 5.5, we will describe how to use github token instead of a password)\ngit config --global credential.helper store\n\n\nStep 5.2. Create a new file\nLet’s create a new file: In the left panel on your Hub, click on the “directory” icon and then double click on “2021-Cloud-Hackathon” directory. Then, create a new file using the text editor in your 2i2c JupyterHub (File &gt;&gt; New &gt;&gt; Text File). Add some text to this file, for example: A test file. Save this file and rename it to test.txt.\n\n\n\nStep 5.3. Track the changes to the new file (git add)\nClick the git icon in the left panel. You can see that the newly added file is in the “Untracked” section. You can click the + icon next to the file name to let git track this file for changes.\n\n\n\nStep 5.4. Commit the changes to the new file (git commit)\nNow, you will see that the file is Staged, which means that git is ready to take a snapshot of this file (and the repository) with the changes that you made. This snapshot is called a commit. To commit the changes, add a note (called a commit message) by typing in the text box that say “Summary”.\nNow, click the blue “COMMIT” button to commit this change.\n\nNote: A short message indicating the type of change to this file is a good practice. Optionally, a longer description may be added to the “Description” field.\n\n\n\n\nStep 5.5. Transmit committed changes to your github (git push)\nAt this stage, you have committed the changes to your git repository on your Hub. However, these changes are still on your Hub and needs to be transmitted to your repository on github (so that both the local copy on the JupyterHub and the remote copy on github are in sync).\nAs seen in the picture below, the git extension indicates (with an orange dot on the cloud icon) that it is ready to push your changes to the remote (remote = your repository on github.com). To push to github, click the cloud button with an up arrow (circled in red in the picture).\n\nWhen you push for the first time, it will ask that you input your credentials. You will need to set this up with your Personal Access Token (PAT), explained next.\n\n\nStep 5.6. Setup your Personal Access Token (PAT)\nWhen you see the following screenshot, GitHub is asking for you to input your credentials. (Note: you see this screenshot when you have committed work to push to GitHub.com, as detailed above).\n\nThe git extension in the Hub is prompting you to enter your github.com credentials. Enter you github.com username and a Personal Access Token (PAT); DO NOT use your password.\nTo create a PAT, visit https://github.com/settings/tokens/new and create a new token with the permission as per the image below and specify its validity for 90 days.\n\nIMPORTANT: You will see this token only once, so be sure to copy this. If you do not copy your token at this stage, you will need to generate a new token.\n\nOnce you generate the token, copy it and paste in the Hub window that prompted you to enter the “Personal Access Token”.\n\nGit will show a message at the bottom right telling that the changes were “Successfully pushed”. Also, you will see that the “cloud icon with an up arrow” no longer has an orange dot, indicating that there are no more committed changes to push to the remote (github.com).\n\nNote: You have configured git extension to store your credentials. You will not be prompted for your login/token again!\n\n\nThat’s all. You can use the same workflow (add &gt; commit &gt; push) for any other new or modified files!\n\n\nNote: If you are comfortable with the command line, you can use the Terminal (In Hub, New &gt; Terminal) and follow the steps outlined in the Clinic section."
  },
  {
    "objectID": "coc.html",
    "href": "coc.html",
    "title": "Code of Conduct",
    "section": "",
    "text": "The ITCOocean Hack2week is dedicated to providing a harassment-free learning experience for everyone regardless of gender, gender identity and expression, sexual orientation, disability, physical appearance, body size, race, age or religion. We do not tolerate harassment of participants in any form. Sexual language and imagery is not appropriate either in-person or virtual form, including the Discussion boards and Slack workspace. Participants (including event volunteers and organizers) violating these rules may be sanctioned or expelled from the event at the discretion of the organizers.",
    "crumbs": [
      "Welcome",
      "Code of Conduct"
    ]
  },
  {
    "objectID": "coc.html#definition-of-harassment",
    "href": "coc.html#definition-of-harassment",
    "title": "Code of Conduct",
    "section": "Definition of Harassment",
    "text": "Definition of Harassment\nHarassment includes, but is not limited to:\n\nVerbal comments that reinforce social structures of domination related to gender, gender identity and expression, sexual orientation, disability, physical appearance, body size, race, age, religion.\nSexual images in public spaces\nDeliberate intimidation, stalking, or following\nHarassing photography or recording\nSustained disruption of talks or other events\nInappropriate physical contact\nUnwelcome sexual attention\nAdvocating for, or encouraging, any of the above behavior",
    "crumbs": [
      "Welcome",
      "Code of Conduct"
    ]
  },
  {
    "objectID": "coc.html#expectations",
    "href": "coc.html#expectations",
    "title": "Code of Conduct",
    "section": "Expectations",
    "text": "Expectations\nParticipants asked to stop any harassing behavior are expected to comply immediately. If a participant engages in harassing behavior, the organizers retain the right to take any actions to keep the event a welcoming environment for all participants. This includes warning the offender or expulsion from the event.\nThe organizers may take action to redress anything designed to, or with the clear impact of, disrupting the event or making the environment hostile for any participants. We expect participants to follow these rules at all the event venues and event-related social activities.",
    "crumbs": [
      "Welcome",
      "Code of Conduct"
    ]
  },
  {
    "objectID": "coc.html#reporting-a-violation",
    "href": "coc.html#reporting-a-violation",
    "title": "Code of Conduct",
    "section": "Reporting a violation",
    "text": "Reporting a violation\nHarassment and other code of conduct violations reduce the value of the event for everyone. If someone makes you or anyone else feel unsafe or unwelcome, please report it as soon as possible.\nIf you feel comfortable contacting someone associated with our event, you may speak with one of the event organizers in person or contact an organizer on a private Slack channel.",
    "crumbs": [
      "Welcome",
      "Code of Conduct"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Machine Learning for Fisheries: Varanasi Internship 2024",
    "section": "",
    "text": "This material will introduce you to accessing ocean remote-sensing data and using that in machine-learning models.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "index.html#links",
    "href": "index.html#links",
    "title": "Machine Learning for Fisheries: Varanasi Internship 2024",
    "section": "Links",
    "text": "Links\n\nGitHub org: https://github.com/SAFS-Varanasi-Internship\nJupyterHub: https://fish.opensci.live/\nDiscussions: https://github.com/SAFS-Varanasi-Internship/Summer-2024/discussions",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "nasa-tutorials/index.html",
    "href": "nasa-tutorials/index.html",
    "title": "Tutorials Overview",
    "section": "",
    "text": "These tutorials are written in RMarkdown (R) and Jupyter Notebooks (Python)."
  },
  {
    "objectID": "nasa-tutorials/index.html#rmarkdown",
    "href": "nasa-tutorials/index.html#rmarkdown",
    "title": "Tutorials Overview",
    "section": "RMarkdown",
    "text": "RMarkdown\n\nOpen in RStudio\nRun code by clicking on the Run icon above a code chunk"
  },
  {
    "objectID": "nasa-tutorials/index.html#jupyter-notebook",
    "href": "nasa-tutorials/index.html#jupyter-notebook",
    "title": "Tutorials Overview",
    "section": "Jupyter Notebook",
    "text": "Jupyter Notebook\n\nOpen in Jupyter Notebook\nRun code by clicking on the code and clicking the little arrow at the top or by typing shift-return."
  },
  {
    "objectID": "notebooks-data/01_ERA5_S3_Downloader.html#variables",
    "href": "notebooks-data/01_ERA5_S3_Downloader.html#variables",
    "title": "Download Copernicus ERA5 Data with S3 without logging in",
    "section": "Variables",
    "text": "Variables\nThe table below lists the 18 ERA5 variables that are available on S3. All variables are surface or single level parameters sourced from the HRES sub-daily forecast stream.\n\n\n\nVariable Name\n\n\nFile Name\n\n\nVariable type (fc/an)\n\n\n\n\n10 metre U wind component\n\n\neastward_wind_at_10_metres.nc\n\n\nan\n\n\n\n\n10 metre V wind component\n\n\nnorthward_wind_at_10_metres.nc\n\n\nan\n\n\n\n\n100 metre U wind component\n\n\neastward_wind_at_100_metres.nc\n\n\nan\n\n\n\n\n100 metre V wind component\n\n\nnorthward_wind_at_100_metres.nc\n\n\nan\n\n\n\n\n2 metre dew point temperature\n\n\ndew_point_temperature_at_2_metres.nc\n\n\nan\n\n\n\n\n2 metre temperature\n\n\nair_temperature_at_2_metres.nc\n\n\nan\n\n\n\n\n2 metres maximum temperature since previous post-processing\n\n\nair_temperature_at_2_metres_1hour_Maximum.nc\n\n\nfc\n\n\n\n\n2 metres minimum temperature since previous post-processing\n\n\nair_temperature_at_2_metres_1hour_Minimum.nc\n\n\nfc\n\n\n\n\nMean sea level pressure\n\n\nair_pressure_at_mean_sea_level.nc\n\n\nan\n\n\n\n\nSea surface temperature\n\n\nsea_surface_temperature.nc\n\n\nan\n\n\n\n\nMean wave period\n\n\nsea_surface_wave_mean_period.nc\n\n\n\n\n\n\nMean direction of waves\n\n\nsea_surface_wave_from_direction.nc\n\n\n\n\n\n\nSignificant height of combined wind waves and swell\n\n\nsignificant_height_of_wind_and_swell_waves.nc\n\n\n\n\n\n\nSnow density\n\n\nsnow_density.nc\n\n\nan\n\n\n\n\nSnow depth\n\n\nlwe_thickness_of_surface_snow_amount.nc\n\n\nan\n\n\n\n\nSurface pressure\n\n\nsurface_air_pressure.nc\n\n\nan\n\n\n\n\nSurface solar radiation downwards\n\n\nintegral_wrt_time_of_surface_direct_downwelling_shortwave_flux_in_air_1hour_Accumulation.nc\n\n\nfc\n\n\n\n\nTotal precipitation\n\n\nprecipitation_amount_1hour_Accumulation.nc\n\n\nfc\n\n\n\nFor my dataset, we collect air temperature (at 2m), sea surface temperature, and u and v wind components so that we can compute speed and direction later.",
    "crumbs": [
      "Data Tutorials",
      "Data provider examples",
      "Download Copernicus ERA5 Data with S3 without logging in"
    ]
  },
  {
    "objectID": "notebooks-data/01_ERA5_S3_Downloader.html#import-necessary-libraries",
    "href": "notebooks-data/01_ERA5_S3_Downloader.html#import-necessary-libraries",
    "title": "Download Copernicus ERA5 Data with S3 without logging in",
    "section": "Import necessary libraries",
    "text": "Import necessary libraries\n\nimport boto3\nimport botocore\nimport datetime\nimport matplotlib.pyplot as plt\nimport os\nimport xarray as xr\nimport numpy as np\nimport pandas as pd\nimport sys",
    "crumbs": [
      "Data Tutorials",
      "Data provider examples",
      "Download Copernicus ERA5 Data with S3 without logging in"
    ]
  },
  {
    "objectID": "notebooks-data/01_ERA5_S3_Downloader.html#download-data",
    "href": "notebooks-data/01_ERA5_S3_Downloader.html#download-data",
    "title": "Download Copernicus ERA5 Data with S3 without logging in",
    "section": "Download data",
    "text": "Download data\n\nera5_bucket = 'era5-pds'\nclient = boto3.client('s3', config=botocore.client.Config(signature_version=botocore.UNSIGNED))\n\n\ndef download_era5_s3(var_era5, month_start, month_end, lat1=5, lat2=25, lon1=60, lon2=80):\n    \"\"\"\n    var_era5: variable name\n    month_start: formatted as YYYY-MM \n    month_end: formatted as YYYY-MM (right-exclusive)\n    \"\"\"\n    s3_data_ptrn = '{year}/{month}/data/{var}.nc'\n    \n    path_temp_folder = 'demonstrated data/era5/temp'\n    path_var_folder = f'demonstrated data/era5/{var_era5}'\n    if not os.path.exists(path_temp_folder):\n        os.makedirs(path_temp_folder)\n    if not os.path.exists(path_var_folder):\n        os.makedirs(path_var_folder)\n    \n    data_file_ptrn = os.path.join(path_temp_folder,'{year}{month}_{var}.nc')\n    sliced_data_file_ptrn = os.path.join(path_var_folder, '{year}{month}_{var}.nc')\n    months = pd.date_range(month_start, month_end, freq='M')\n    for month in months:\n        s3_data_key = s3_data_ptrn.format(year=month.year, month=\"{:02d}\".format(month.month), var=var_era5)\n        data_file = data_file_ptrn.format(year=month.year, month=\"{:02d}\".format(month.month), var=var_era5)\n        if not os.path.isfile(data_file): # check if file already exists\n            print(\"Downloading %s from S3...\" % s3_data_key)\n            client.download_file(era5_bucket, s3_data_key, data_file)\n\n        export_file = sliced_data_file_ptrn.format(year = month.year, month = \"{:02d}\".format(month.month), var= var_era5)\n        xr.open_dataset(data_file).sel(lat=slice(lat2, lat1), lon=slice(lon1, lon2)).to_netcdf(export_file)\n        os.remove(data_file)\n\n\n# download data for 4 variables we need \n# consult available names in the table above in the file name column (remove .nc)\n\n# month_end is not included in dataset (right-exclusive)\ndownload_era5_s3(var_era5='eastward_wind_at_10_metres', month_start='2003-01', month_end='2003-03')\ndownload_era5_s3(var_era5='northward_wind_at_10_metres', month_start='2003-01', month_end='2003-03')\n\nDownloading 2003/01/data/eastward_wind_at_10_metres.nc from S3...\nDownloading 2003/02/data/eastward_wind_at_10_metres.nc from S3...\nDownloading 2003/01/data/northward_wind_at_10_metres.nc from S3...\nDownloading 2003/02/data/northward_wind_at_10_metres.nc from S3...",
    "crumbs": [
      "Data Tutorials",
      "Data provider examples",
      "Download Copernicus ERA5 Data with S3 without logging in"
    ]
  },
  {
    "objectID": "notebooks-data/01_MOTU_Downloader.html#store-credentials-in-bash",
    "href": "notebooks-data/01_MOTU_Downloader.html#store-credentials-in-bash",
    "title": "Download sliced data using MOTU-Client in Copernicus",
    "section": "Store credentials in bash",
    "text": "Store credentials in bash\nFor security purposes, you can store your account credentials in your bash profile if you don’t want others to know yours. If you fork this notebook on your local machine and are sure that your credentials cannot be exposed anywhere else, you can skip the hassle of saving them to bash and set them as Python variables, then feed them to the prompt generator.\nMake sure to change your username and password of your Copernicus/MOTU account to the two lines below for bash…\n\n! echo 'export motu_password=YOURPASSWORD' &gt;~/.bash_profile\n\n\n! echo 'export motu_username=YOURUSERNAME' &gt;&gt;~/.bash_profile\n\n\n# Vim will get stuck in this cell if you don't stop the cell. As soon as you see the two lines\n# stop the execution and move on to the next cell.\n! vim ~/.bash_profile\n\n\n! source ~/.bash_profile\n\nIMPORTANT Please restart your server for the changes to take effect\n\n# confirm that it is shown before proceeding\n! echo $motu_username",
    "crumbs": [
      "Data Tutorials",
      "Data provider examples",
      "Download sliced data using MOTU-Client in Copernicus"
    ]
  },
  {
    "objectID": "notebooks-data/01_MOTU_Downloader.html#motu-download-prompt-breakdown",
    "href": "notebooks-data/01_MOTU_Downloader.html#motu-download-prompt-breakdown",
    "title": "Download sliced data using MOTU-Client in Copernicus",
    "section": "MOTU download prompt breakdown",
    "text": "MOTU download prompt breakdown\nLike ERDDAP URLs, MOTU works by sending requests to the API server. Unlike the former, it works through command line requests instead of URLs requests. Again, to prevent overloadding, we will break down the process to smaller time ranges to download.\nHere’s an example of a MOTU API request\n\npython -m motuclient –motu https://my.cmems-du.eu/motu-web/Motu –service-id GLOBAL_MULTIYEAR_BGC_001_029-TDS –product-id cmems_mod_glo_bgc_my_0.25_P1D-m –longitude-min 60 –longitude-max 80 –latitude-min 5 –latitude-max 25 –date-min “2020-12-31 00:00:00” –date-max “2020-12-31 23:59:59” –depth-min 0.5057600140571594 –depth-max 16.525320053100586 –variable chl –variable po4 –variable no3 –out-dir [OUTPUT_DIRECTORY] –out-name [OUTPUT_FILENAME] –user [USERNAME] –pwd [PASSWORD]\n\nAs you can see, we have to provide all the parameters in order for the request to work, with temporal and lat/lon ranges being required on all datasets and depth range required only for some. We also have to provide username and password (that we have after creating the Copernicus account) , as well as where we are going to store the data (output directory and name).",
    "crumbs": [
      "Data Tutorials",
      "Data provider examples",
      "Download sliced data using MOTU-Client in Copernicus"
    ]
  },
  {
    "objectID": "notebooks-data/01_MOTU_Downloader.html#import-necessary-libraries",
    "href": "notebooks-data/01_MOTU_Downloader.html#import-necessary-libraries",
    "title": "Download sliced data using MOTU-Client in Copernicus",
    "section": "Import necessary libraries",
    "text": "Import necessary libraries\n\nimport xarray as xr\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport os, glob, subprocess",
    "crumbs": [
      "Data Tutorials",
      "Data provider examples",
      "Download sliced data using MOTU-Client in Copernicus"
    ]
  },
  {
    "objectID": "notebooks-data/01_MOTU_Downloader.html#download-data",
    "href": "notebooks-data/01_MOTU_Downloader.html#download-data",
    "title": "Download sliced data using MOTU-Client in Copernicus",
    "section": "Download data",
    "text": "Download data\n\ndef prompt_generator(params, temp_folder_path):\n    months = pd.date_range(params['coords']['date-min'], params['coords']['date-max'], freq='M')\n    prompts = []\n    \n    for m in months:\n        prompt = f\"motuclient --motu https://my.cmems-du.eu/motu-web/Motu --service-id {params['SERVICE_ID']}-TDS --product-id {params['PRODUCT_ID']} \" + \\\n        f\"--user {os.environ['motu_username']} --pwd {os.environ['motu_password']} --out-dir {temp_folder_path} --out-name {m.strftime('%Y%m')}.nc \"\n        prompt += f\"--date-min '{m.strftime('%Y-%m')}-01 00:00:00' --date-max '{m.strftime('%Y-%m-%d')} 23:59:00' \"\n        for var in params['variables']:\n            prompt += f'--variable {var} '\n        for coord_name, coord_value in params['coords'].items():\n            # since we already work \n            if coord_name not in ['date-min', 'date-max']:\n                prompt += f'--{coord_name} {coord_value} '\n        \n        prompts.append(prompt)\n        \n    return prompts\n\n\ndef download_motu_api(params):\n    # create new folder to store data\n    MAIN_FOLDER = 'demonstrated data/motu'\n    TEMP_FOLDER = params['PRODUCT_ID']\n    path_temp_folder = os.path.join(MAIN_FOLDER, TEMP_FOLDER)\n    \n    if not os.path.exists(path_temp_folder):\n        os.makedirs(path_temp_folder)\n\n    # generate prompts to feed into the downloader\n    prompts = prompt_generator(params, path_temp_folder)\n    for prompt in prompts:\n        process = subprocess.Popen(prompt.split())\n        process.wait()\n        \n\nNext, we’re going to initialize our parameters to download the data. The template is shown below, and werecommend you to choose a spatial range slightly larger than your actual region of interest due to cutoffs that may happen at the edges.\n\n# modify your parameters as you wish to feed into prompt generator\n# here's mine to download chlorophyll-a data\nvar_chlorophyll = {\n    'SERVICE_ID': 'OCEANCOLOUR_GLO_BGC_L4_MY_009_104',\n    'PRODUCT_ID': 'cmems_obs-oc_glo_bgc-plankton_my_l4-gapfree-multi-4km_P1D',\n    'variables': ['CHL', 'CHL_uncertainty'],\n    'coords': {\n        'longitude-min': 60, \n        'longitude-max': 80,\n        'latitude-min': 5,\n        'latitude-max': 25,\n        'date-min': '2000-01',\n        'date-max': '2002-01' # exclusive of last month, so in this case, we get data until DEC '02\n        # optional coordinate params for some datasets: 'depth-min', 'depth-max'\n        # consult data access page for more information\n    }\n}\n\nvar_sla = {\n    'SERVICE_ID': 'SEALEVEL_GLO_PHY_L4_MY_008_047',\n    'PRODUCT_ID': 'cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D',\n    'variables': ['adt', 'sla'],\n    'coords': {\n        'longitude-min': 60,\n        'longitude-max': 80,\n        'latitude-min': 5,\n        'latitude-max': 25,\n        'date-min': '2000-01',\n        'date-max': '2002-01' # exclusive of last month, so in this case, we get data until DEC '02\n    }\n}\n\n\ndownload_motu_api(var_sla)\n\n2023-07-11 04:31:55.819 [ INFO] Asynchronous mode set\n2023-07-11 04:31:55.819 [ INFO] Authenticating user mphan for service https://my.cmems-du.eu/motu-web/Motu\n2023-07-11 04:32:04.748 [ INFO] Requesting file to download (this can take a while)...\n2023-07-11 04:32:14.896 [ INFO] Authenticating user mphan for service https://my.cmems-du.eu/motu-web/Motu\n2023-07-11 04:32:32.754 [ INFO] The product is ready for download\n2023-07-11 04:32:32.754 [ INFO] Downloading file (this can take a while)...\n2023-07-11 04:32:33.680 [ INFO] File type: application/x-netcdf\n2023-07-11 04:32:33.680 [ INFO] File size: 3.3 MB (3260684 B)\n2023-07-11 04:32:33.680 [ INFO] Downloading file /home/jovyan/shared/minh-notebooks/motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D/200001.nc\n2023-07-11 04:32:34.029 [ INFO] Progress -   3.3 MB (2.0%)\n2023-07-11 04:32:34.204 [ INFO] Progress -   3.3 MB (4.0%)\n2023-07-11 04:32:34.379 [ INFO] Progress -   3.3 MB (6.0%)\n2023-07-11 04:32:34.380 [ INFO] Progress -   3.3 MB (8.0%)\n2023-07-11 04:32:34.380 [ INFO] Progress -   3.3 MB (10.0%)\n2023-07-11 04:32:34.555 [ INFO] Progress -   3.3 MB (12.1%)\n2023-07-11 04:32:34.555 [ INFO] Progress -   3.3 MB (14.1%)\n2023-07-11 04:32:34.556 [ INFO] Progress -   3.3 MB (16.1%)\n2023-07-11 04:32:34.556 [ INFO] Progress -   3.3 MB (18.1%)\n2023-07-11 04:32:34.556 [ INFO] Progress -   3.3 MB (20.1%)\n2023-07-11 04:32:34.556 [ INFO] Progress -   3.3 MB (22.1%)\n2023-07-11 04:32:34.557 [ INFO] Progress -   3.3 MB (24.1%)\n2023-07-11 04:32:34.730 [ INFO] Progress -   3.3 MB (26.1%)\n2023-07-11 04:32:34.731 [ INFO] Progress -   3.3 MB (28.1%)\n2023-07-11 04:32:34.731 [ INFO] Progress -   3.3 MB (30.1%)\n2023-07-11 04:32:34.732 [ INFO] Progress -   3.3 MB (32.2%)\n2023-07-11 04:32:34.732 [ INFO] Progress -   3.3 MB (34.2%)\n2023-07-11 04:32:34.733 [ INFO] Progress -   3.3 MB (36.2%)\n2023-07-11 04:32:34.733 [ INFO] Progress -   3.3 MB (38.2%)\n2023-07-11 04:32:34.733 [ INFO] Progress -   3.3 MB (40.2%)\n2023-07-11 04:32:34.905 [ INFO] Progress -   3.3 MB (42.2%)\n2023-07-11 04:32:34.906 [ INFO] Progress -   3.3 MB (44.2%)\n2023-07-11 04:32:34.906 [ INFO] Progress -   3.3 MB (46.2%)\n2023-07-11 04:32:34.907 [ INFO] Progress -   3.3 MB (48.2%)\n2023-07-11 04:32:34.907 [ INFO] Progress -   3.3 MB (50.2%)\n2023-07-11 04:32:34.907 [ INFO] Progress -   3.3 MB (52.3%)\n2023-07-11 04:32:34.908 [ INFO] Progress -   3.3 MB (54.3%)\n2023-07-11 04:32:34.908 [ INFO] Progress -   3.3 MB (56.3%)\n2023-07-11 04:32:34.908 [ INFO] Progress -   3.3 MB (58.3%)\n2023-07-11 04:32:34.908 [ INFO] Progress -   3.3 MB (60.3%)\n2023-07-11 04:32:34.909 [ INFO] Progress -   3.3 MB (62.3%)\n2023-07-11 04:32:34.909 [ INFO] Progress -   3.3 MB (64.3%)\n2023-07-11 04:32:34.910 [ INFO] Progress -   3.3 MB (66.3%)\n2023-07-11 04:32:34.910 [ INFO] Progress -   3.3 MB (68.3%)\n2023-07-11 04:32:34.910 [ INFO] Progress -   3.3 MB (70.3%)\n2023-07-11 04:32:34.910 [ INFO] Progress -   3.3 MB (72.4%)\n2023-07-11 04:32:34.911 [ INFO] Progress -   3.3 MB (74.4%)\n2023-07-11 04:32:34.911 [ INFO] Progress -   3.3 MB (76.4%)\n2023-07-11 04:32:34.911 [ INFO] Progress -   3.3 MB (78.4%)\n2023-07-11 04:32:34.911 [ INFO] Progress -   3.3 MB (80.4%)\n2023-07-11 04:32:34.912 [ INFO] Progress -   3.3 MB (82.4%)\n2023-07-11 04:32:35.080 [ INFO] Progress -   3.3 MB (84.4%)\n2023-07-11 04:32:35.081 [ INFO] Progress -   3.3 MB (86.4%)\n2023-07-11 04:32:35.082 [ INFO] Progress -   3.3 MB (88.4%)\n2023-07-11 04:32:35.082 [ INFO] Progress -   3.3 MB (90.4%)\n2023-07-11 04:32:35.082 [ INFO] Progress -   3.3 MB (92.5%)\n2023-07-11 04:32:35.082 [ INFO] Progress -   3.3 MB (94.5%)\n2023-07-11 04:32:35.083 [ INFO] Progress -   3.3 MB (96.5%)\n2023-07-11 04:32:35.083 [ INFO] Progress -   3.3 MB (98.5%)\n2023-07-11 04:32:35.084 [ INFO] Progress -   3.3 MB (100.0%)\n2023-07-11 04:32:35.084 [ INFO] Processing  time : 0:00:37.863885\n2023-07-11 04:32:35.084 [ INFO] Downloading time : 0:00:01.403882\n2023-07-11 04:32:35.084 [ INFO] Total time       : 0:00:39.267767\n2023-07-11 04:32:35.084 [ INFO] Download rate    : 1.4 MB/s\n2023-07-11 04:32:35.084 [ INFO] Save into        : motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D/200001.nc\n2023-07-11 04:32:35.115 [ INFO] Done\n2023-07-11 04:32:35.360 [ INFO] Asynchronous mode set\n2023-07-11 04:32:35.360 [ INFO] Authenticating user mphan for service https://my.cmems-du.eu/motu-web/Motu\n2023-07-11 04:32:44.852 [ INFO] Requesting file to download (this can take a while)...\n2023-07-11 04:32:53.844 [ INFO] Authenticating user mphan for service https://my.cmems-du.eu/motu-web/Motu\n2023-07-11 04:33:09.545 [ INFO] The product is ready for download\n2023-07-11 04:33:09.546 [ INFO] Downloading file (this can take a while)...\n2023-07-11 04:33:10.291 [ INFO] File type: application/x-netcdf\n2023-07-11 04:33:10.291 [ INFO] File size: 3.1 MB (3050724 B)\n2023-07-11 04:33:10.291 [ INFO] Downloading file /home/jovyan/shared/minh-notebooks/motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D/200002.nc\n2023-07-11 04:33:10.642 [ INFO] Progress -   3.1 MB (2.1%)\n2023-07-11 04:33:10.817 [ INFO] Progress -   3.1 MB (4.3%)\n2023-07-11 04:33:10.990 [ INFO] Progress -   3.1 MB (6.4%)\n2023-07-11 04:33:10.992 [ INFO] Progress -   3.1 MB (8.6%)\n2023-07-11 04:33:10.992 [ INFO] Progress -   3.1 MB (10.7%)\n2023-07-11 04:33:10.993 [ INFO] Progress -   3.1 MB (12.9%)\n2023-07-11 04:33:11.166 [ INFO] Progress -   3.1 MB (15.0%)\n2023-07-11 04:33:11.167 [ INFO] Progress -   3.1 MB (17.2%)\n2023-07-11 04:33:11.168 [ INFO] Progress -   3.1 MB (19.3%)\n2023-07-11 04:33:11.168 [ INFO] Progress -   3.1 MB (21.5%)\n2023-07-11 04:33:11.168 [ INFO] Progress -   3.1 MB (23.6%)\n2023-07-11 04:33:11.168 [ INFO] Progress -   3.1 MB (25.8%)\n2023-07-11 04:33:11.341 [ INFO] Progress -   3.1 MB (27.9%)\n2023-07-11 04:33:11.341 [ INFO] Progress -   3.1 MB (30.1%)\n2023-07-11 04:33:11.342 [ INFO] Progress -   3.1 MB (32.2%)\n2023-07-11 04:33:11.343 [ INFO] Progress -   3.1 MB (34.4%)\n2023-07-11 04:33:11.343 [ INFO] Progress -   3.1 MB (36.5%)\n2023-07-11 04:33:11.344 [ INFO] Progress -   3.1 MB (38.7%)\n2023-07-11 04:33:11.344 [ INFO] Progress -   3.1 MB (40.8%)\n2023-07-11 04:33:11.344 [ INFO] Progress -   3.1 MB (43.0%)\n2023-07-11 04:33:11.344 [ INFO] Progress -   3.1 MB (45.1%)\n2023-07-11 04:33:11.345 [ INFO] Progress -   3.1 MB (47.3%)\n2023-07-11 04:33:11.345 [ INFO] Progress -   3.1 MB (49.4%)\n2023-07-11 04:33:11.345 [ INFO] Progress -   3.1 MB (51.6%)\n2023-07-11 04:33:11.345 [ INFO] Progress -   3.1 MB (53.7%)\n2023-07-11 04:33:11.516 [ INFO] Progress -   3.1 MB (55.9%)\n2023-07-11 04:33:11.516 [ INFO] Progress -   3.1 MB (58.0%)\n2023-07-11 04:33:11.516 [ INFO] Progress -   3.1 MB (60.1%)\n2023-07-11 04:33:11.517 [ INFO] Progress -   3.1 MB (62.3%)\n2023-07-11 04:33:11.517 [ INFO] Progress -   3.1 MB (64.4%)\n2023-07-11 04:33:11.518 [ INFO] Progress -   3.1 MB (66.6%)\n2023-07-11 04:33:11.518 [ INFO] Progress -   3.1 MB (68.7%)\n2023-07-11 04:33:11.519 [ INFO] Progress -   3.1 MB (70.9%)\n2023-07-11 04:33:11.519 [ INFO] Progress -   3.1 MB (73.0%)\n2023-07-11 04:33:11.519 [ INFO] Progress -   3.1 MB (75.2%)\n2023-07-11 04:33:11.520 [ INFO] Progress -   3.1 MB (77.3%)\n2023-07-11 04:33:11.520 [ INFO] Progress -   3.1 MB (79.5%)\n2023-07-11 04:33:11.520 [ INFO] Progress -   3.1 MB (81.6%)\n2023-07-11 04:33:11.520 [ INFO] Progress -   3.1 MB (83.8%)\n2023-07-11 04:33:11.520 [ INFO] Progress -   3.1 MB (85.9%)\n2023-07-11 04:33:11.521 [ INFO] Progress -   3.1 MB (88.1%)\n2023-07-11 04:33:11.521 [ INFO] Progress -   3.1 MB (90.2%)\n2023-07-11 04:33:11.521 [ INFO] Progress -   3.1 MB (92.4%)\n2023-07-11 04:33:11.521 [ INFO] Progress -   3.1 MB (94.5%)\n2023-07-11 04:33:11.522 [ INFO] Progress -   3.1 MB (96.7%)\n2023-07-11 04:33:11.522 [ INFO] Progress -   3.1 MB (98.8%)\n2023-07-11 04:33:11.522 [ INFO] Progress -   3.1 MB (100.0%)\n2023-07-11 04:33:11.522 [ INFO] Processing  time : 0:00:34.933586\n2023-07-11 04:33:11.522 [ INFO] Downloading time : 0:00:01.231103\n2023-07-11 04:33:11.522 [ INFO] Total time       : 0:00:36.164689\n2023-07-11 04:33:11.522 [ INFO] Download rate    : 1.5 MB/s\n2023-07-11 04:33:11.522 [ INFO] Save into        : motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D/200002.nc\n2023-07-11 04:33:11.556 [ INFO] Done\n2023-07-11 04:33:11.798 [ INFO] Asynchronous mode set\n2023-07-11 04:33:11.798 [ INFO] Authenticating user mphan for service https://my.cmems-du.eu/motu-web/Motu\n2023-07-11 04:33:19.952 [ INFO] Requesting file to download (this can take a while)...\n2023-07-11 04:33:28.668 [ INFO] Authenticating user mphan for service https://my.cmems-du.eu/motu-web/Motu\n2023-07-11 04:33:44.971 [ INFO] The product is ready for download\n2023-07-11 04:33:44.971 [ INFO] Downloading file (this can take a while)...\n2023-07-11 04:33:45.715 [ INFO] File type: application/x-netcdf\n2023-07-11 04:33:45.715 [ INFO] File size: 3.3 MB (3260684 B)\n2023-07-11 04:33:45.715 [ INFO] Downloading file /home/jovyan/shared/minh-notebooks/motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D/200003.nc\n2023-07-11 04:33:46.064 [ INFO] Progress -   3.3 MB (2.0%)\n2023-07-11 04:33:46.239 [ INFO] Progress -   3.3 MB (4.0%)\n2023-07-11 04:33:46.415 [ INFO] Progress -   3.3 MB (6.0%)\n2023-07-11 04:33:46.415 [ INFO] Progress -   3.3 MB (8.0%)\n2023-07-11 04:33:46.415 [ INFO] Progress -   3.3 MB (10.0%)\n2023-07-11 04:33:46.590 [ INFO] Progress -   3.3 MB (12.1%)\n2023-07-11 04:33:46.590 [ INFO] Progress -   3.3 MB (14.1%)\n2023-07-11 04:33:46.591 [ INFO] Progress -   3.3 MB (16.1%)\n2023-07-11 04:33:46.591 [ INFO] Progress -   3.3 MB (18.1%)\n2023-07-11 04:33:46.591 [ INFO] Progress -   3.3 MB (20.1%)\n2023-07-11 04:33:46.591 [ INFO] Progress -   3.3 MB (22.1%)\n2023-07-11 04:33:46.765 [ INFO] Progress -   3.3 MB (24.1%)\n2023-07-11 04:33:46.765 [ INFO] Progress -   3.3 MB (26.1%)\n2023-07-11 04:33:46.765 [ INFO] Progress -   3.3 MB (28.1%)\n2023-07-11 04:33:46.766 [ INFO] Progress -   3.3 MB (30.1%)\n2023-07-11 04:33:46.766 [ INFO] Progress -   3.3 MB (32.2%)\n2023-07-11 04:33:46.767 [ INFO] Progress -   3.3 MB (34.2%)\n2023-07-11 04:33:46.767 [ INFO] Progress -   3.3 MB (36.2%)\n2023-07-11 04:33:46.768 [ INFO] Progress -   3.3 MB (38.2%)\n2023-07-11 04:33:46.768 [ INFO] Progress -   3.3 MB (40.2%)\n2023-07-11 04:33:46.768 [ INFO] Progress -   3.3 MB (42.2%)\n2023-07-11 04:33:46.768 [ INFO] Progress -   3.3 MB (44.2%)\n2023-07-11 04:33:46.769 [ INFO] Progress -   3.3 MB (46.2%)\n2023-07-11 04:33:46.769 [ INFO] Progress -   3.3 MB (48.2%)\n2023-07-11 04:33:46.940 [ INFO] Progress -   3.3 MB (50.2%)\n2023-07-11 04:33:46.940 [ INFO] Progress -   3.3 MB (52.3%)\n2023-07-11 04:33:46.940 [ INFO] Progress -   3.3 MB (54.3%)\n2023-07-11 04:33:46.941 [ INFO] Progress -   3.3 MB (56.3%)\n2023-07-11 04:33:46.941 [ INFO] Progress -   3.3 MB (58.3%)\n2023-07-11 04:33:46.941 [ INFO] Progress -   3.3 MB (60.3%)\n2023-07-11 04:33:46.942 [ INFO] Progress -   3.3 MB (62.3%)\n2023-07-11 04:33:46.942 [ INFO] Progress -   3.3 MB (64.3%)\n2023-07-11 04:33:46.943 [ INFO] Progress -   3.3 MB (66.3%)\n2023-07-11 04:33:46.943 [ INFO] Progress -   3.3 MB (68.3%)\n2023-07-11 04:33:46.943 [ INFO] Progress -   3.3 MB (70.3%)\n2023-07-11 04:33:46.944 [ INFO] Progress -   3.3 MB (72.4%)\n2023-07-11 04:33:46.944 [ INFO] Progress -   3.3 MB (74.4%)\n2023-07-11 04:33:46.944 [ INFO] Progress -   3.3 MB (76.4%)\n2023-07-11 04:33:46.945 [ INFO] Progress -   3.3 MB (78.4%)\n2023-07-11 04:33:46.945 [ INFO] Progress -   3.3 MB (80.4%)\n2023-07-11 04:33:46.945 [ INFO] Progress -   3.3 MB (82.4%)\n2023-07-11 04:33:46.945 [ INFO] Progress -   3.3 MB (84.4%)\n2023-07-11 04:33:46.946 [ INFO] Progress -   3.3 MB (86.4%)\n2023-07-11 04:33:46.946 [ INFO] Progress -   3.3 MB (88.4%)\n2023-07-11 04:33:46.946 [ INFO] Progress -   3.3 MB (90.4%)\n2023-07-11 04:33:46.946 [ INFO] Progress -   3.3 MB (92.5%)\n2023-07-11 04:33:46.947 [ INFO] Progress -   3.3 MB (94.5%)\n2023-07-11 04:33:46.947 [ INFO] Progress -   3.3 MB (96.5%)\n2023-07-11 04:33:46.988 [ INFO] Progress -   3.3 MB (98.5%)\n2023-07-11 04:33:47.115 [ INFO] Progress -   3.3 MB (100.0%)\n2023-07-11 04:33:47.115 [ INFO] Processing  time : 0:00:33.919354\n2023-07-11 04:33:47.115 [ INFO] Downloading time : 0:00:01.400042\n2023-07-11 04:33:47.115 [ INFO] Total time       : 0:00:35.319396\n2023-07-11 04:33:47.115 [ INFO] Download rate    : 1.5 MB/s\n2023-07-11 04:33:47.115 [ INFO] Save into        : motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D/200003.nc\n2023-07-11 04:33:47.158 [ INFO] Done\n2023-07-11 04:33:47.403 [ INFO] Asynchronous mode set\n2023-07-11 04:33:47.403 [ INFO] Authenticating user mphan for service https://my.cmems-du.eu/motu-web/Motu\n2023-07-11 04:33:55.632 [ INFO] Requesting file to download (this can take a while)...\n2023-07-11 04:34:05.423 [ INFO] Authenticating user mphan for service https://my.cmems-du.eu/motu-web/Motu\n2023-07-11 04:34:21.086 [ INFO] The product is ready for download\n2023-07-11 04:34:21.086 [ INFO] Downloading file (this can take a while)...\n2023-07-11 04:34:21.835 [ INFO] File type: application/x-netcdf\n2023-07-11 04:34:21.835 [ INFO] File size: 3.2 MB (3155704 B)\n2023-07-11 04:34:21.835 [ INFO] Downloading file /home/jovyan/shared/minh-notebooks/motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D/200004.nc\n2023-07-11 04:34:22.184 [ INFO] Progress -   3.2 MB (2.1%)\n2023-07-11 04:34:22.359 [ INFO] Progress -   3.2 MB (4.2%)\n2023-07-11 04:34:22.535 [ INFO] Progress -   3.2 MB (6.2%)\n2023-07-11 04:34:22.535 [ INFO] Progress -   3.2 MB (8.3%)\n2023-07-11 04:34:22.535 [ INFO] Progress -   3.2 MB (10.4%)\n2023-07-11 04:34:22.710 [ INFO] Progress -   3.2 MB (12.5%)\n2023-07-11 04:34:22.711 [ INFO] Progress -   3.2 MB (14.5%)\n2023-07-11 04:34:22.711 [ INFO] Progress -   3.2 MB (16.6%)\n2023-07-11 04:34:22.711 [ INFO] Progress -   3.2 MB (18.7%)\n2023-07-11 04:34:22.712 [ INFO] Progress -   3.2 MB (20.8%)\n2023-07-11 04:34:22.712 [ INFO] Progress -   3.2 MB (22.8%)\n2023-07-11 04:34:22.712 [ INFO] Progress -   3.2 MB (24.9%)\n2023-07-11 04:34:22.885 [ INFO] Progress -   3.2 MB (27.0%)\n2023-07-11 04:34:22.886 [ INFO] Progress -   3.2 MB (29.1%)\n2023-07-11 04:34:22.886 [ INFO] Progress -   3.2 MB (31.2%)\n2023-07-11 04:34:22.886 [ INFO] Progress -   3.2 MB (33.2%)\n2023-07-11 04:34:22.887 [ INFO] Progress -   3.2 MB (35.3%)\n2023-07-11 04:34:22.888 [ INFO] Progress -   3.2 MB (37.4%)\n2023-07-11 04:34:22.888 [ INFO] Progress -   3.2 MB (39.5%)\n2023-07-11 04:34:22.888 [ INFO] Progress -   3.2 MB (41.5%)\n2023-07-11 04:34:22.888 [ INFO] Progress -   3.2 MB (43.6%)\n2023-07-11 04:34:22.889 [ INFO] Progress -   3.2 MB (45.7%)\n2023-07-11 04:34:22.889 [ INFO] Progress -   3.2 MB (47.8%)\n2023-07-11 04:34:22.889 [ INFO] Progress -   3.2 MB (49.8%)\n2023-07-11 04:34:23.060 [ INFO] Progress -   3.2 MB (51.9%)\n2023-07-11 04:34:23.061 [ INFO] Progress -   3.2 MB (54.0%)\n2023-07-11 04:34:23.061 [ INFO] Progress -   3.2 MB (56.1%)\n2023-07-11 04:34:23.062 [ INFO] Progress -   3.2 MB (58.1%)\n2023-07-11 04:34:23.062 [ INFO] Progress -   3.2 MB (60.2%)\n2023-07-11 04:34:23.063 [ INFO] Progress -   3.2 MB (62.3%)\n2023-07-11 04:34:23.063 [ INFO] Progress -   3.2 MB (64.4%)\n2023-07-11 04:34:23.063 [ INFO] Progress -   3.2 MB (66.5%)\n2023-07-11 04:34:23.064 [ INFO] Progress -   3.2 MB (68.5%)\n2023-07-11 04:34:23.064 [ INFO] Progress -   3.2 MB (70.6%)\n2023-07-11 04:34:23.064 [ INFO] Progress -   3.2 MB (72.7%)\n2023-07-11 04:34:23.065 [ INFO] Progress -   3.2 MB (74.8%)\n2023-07-11 04:34:23.065 [ INFO] Progress -   3.2 MB (76.8%)\n2023-07-11 04:34:23.065 [ INFO] Progress -   3.2 MB (78.9%)\n2023-07-11 04:34:23.065 [ INFO] Progress -   3.2 MB (81.0%)\n2023-07-11 04:34:23.066 [ INFO] Progress -   3.2 MB (83.1%)\n2023-07-11 04:34:23.066 [ INFO] Progress -   3.2 MB (85.1%)\n2023-07-11 04:34:23.066 [ INFO] Progress -   3.2 MB (87.2%)\n2023-07-11 04:34:23.066 [ INFO] Progress -   3.2 MB (89.3%)\n2023-07-11 04:34:23.067 [ INFO] Progress -   3.2 MB (91.4%)\n2023-07-11 04:34:23.067 [ INFO] Progress -   3.2 MB (93.5%)\n2023-07-11 04:34:23.067 [ INFO] Progress -   3.2 MB (95.5%)\n2023-07-11 04:34:23.067 [ INFO] Progress -   3.2 MB (97.6%)\n2023-07-11 04:34:23.235 [ INFO] Progress -   3.2 MB (99.7%)\n2023-07-11 04:34:23.236 [ INFO] Progress -   3.2 MB (100.0%)\n2023-07-11 04:34:23.236 [ INFO] Processing  time : 0:00:34.434477\n2023-07-11 04:34:23.236 [ INFO] Downloading time : 0:00:01.401031\n2023-07-11 04:34:23.236 [ INFO] Total time       : 0:00:35.835508\n2023-07-11 04:34:23.236 [ INFO] Download rate    : 1.5 MB/s\n2023-07-11 04:34:23.236 [ INFO] Save into        : motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D/200004.nc\n2023-07-11 04:34:23.266 [ INFO] Done\n2023-07-11 04:34:23.512 [ INFO] Asynchronous mode set\n2023-07-11 04:34:23.513 [ INFO] Authenticating user mphan for service https://my.cmems-du.eu/motu-web/Motu\n2023-07-11 04:34:30.732 [ INFO] Requesting file to download (this can take a while)...\n2023-07-11 04:34:39.973 [ INFO] Authenticating user mphan for service https://my.cmems-du.eu/motu-web/Motu\n2023-07-11 04:34:55.062 [ INFO] The product is ready for download\n2023-07-11 04:34:55.062 [ INFO] Downloading file (this can take a while)...\n2023-07-11 04:34:55.808 [ INFO] File type: application/x-netcdf\n2023-07-11 04:34:55.808 [ INFO] File size: 3.3 MB (3260684 B)\n2023-07-11 04:34:55.808 [ INFO] Downloading file /home/jovyan/shared/minh-notebooks/motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D/200005.nc\n2023-07-11 04:34:56.158 [ INFO] Progress -   3.3 MB (2.0%)\n2023-07-11 04:34:56.333 [ INFO] Progress -   3.3 MB (4.0%)\n2023-07-11 04:34:56.508 [ INFO] Progress -   3.3 MB (6.0%)\n2023-07-11 04:34:56.509 [ INFO] Progress -   3.3 MB (8.0%)\n2023-07-11 04:34:56.683 [ INFO] Progress -   3.3 MB (10.0%)\n2023-07-11 04:34:56.684 [ INFO] Progress -   3.3 MB (12.1%)\n2023-07-11 04:34:56.684 [ INFO] Progress -   3.3 MB (14.1%)\n2023-07-11 04:34:56.684 [ INFO] Progress -   3.3 MB (16.1%)\n2023-07-11 04:34:56.685 [ INFO] Progress -   3.3 MB (18.1%)\n2023-07-11 04:34:56.859 [ INFO] Progress -   3.3 MB (20.1%)\n2023-07-11 04:34:56.859 [ INFO] Progress -   3.3 MB (22.1%)\n2023-07-11 04:34:56.860 [ INFO] Progress -   3.3 MB (24.1%)\n2023-07-11 04:34:56.860 [ INFO] Progress -   3.3 MB (26.1%)\n2023-07-11 04:34:56.860 [ INFO] Progress -   3.3 MB (28.1%)\n2023-07-11 04:34:56.860 [ INFO] Progress -   3.3 MB (30.1%)\n2023-07-11 04:34:56.861 [ INFO] Progress -   3.3 MB (32.2%)\n2023-07-11 04:34:56.862 [ INFO] Progress -   3.3 MB (34.2%)\n2023-07-11 04:34:56.862 [ INFO] Progress -   3.3 MB (36.2%)\n2023-07-11 04:34:56.862 [ INFO] Progress -   3.3 MB (38.2%)\n2023-07-11 04:34:57.034 [ INFO] Progress -   3.3 MB (40.2%)\n2023-07-11 04:34:57.034 [ INFO] Progress -   3.3 MB (42.2%)\n2023-07-11 04:34:57.035 [ INFO] Progress -   3.3 MB (44.2%)\n2023-07-11 04:34:57.035 [ INFO] Progress -   3.3 MB (46.2%)\n2023-07-11 04:34:57.035 [ INFO] Progress -   3.3 MB (48.2%)\n2023-07-11 04:34:57.035 [ INFO] Progress -   3.3 MB (50.2%)\n2023-07-11 04:34:57.036 [ INFO] Progress -   3.3 MB (52.3%)\n2023-07-11 04:34:57.036 [ INFO] Progress -   3.3 MB (54.3%)\n2023-07-11 04:34:57.036 [ INFO] Progress -   3.3 MB (56.3%)\n2023-07-11 04:34:57.036 [ INFO] Progress -   3.3 MB (58.3%)\n2023-07-11 04:34:57.037 [ INFO] Progress -   3.3 MB (60.3%)\n2023-07-11 04:34:57.037 [ INFO] Progress -   3.3 MB (62.3%)\n2023-07-11 04:34:57.037 [ INFO] Progress -   3.3 MB (64.3%)\n2023-07-11 04:34:57.038 [ INFO] Progress -   3.3 MB (66.3%)\n2023-07-11 04:34:57.038 [ INFO] Progress -   3.3 MB (68.3%)\n2023-07-11 04:34:57.039 [ INFO] Progress -   3.3 MB (70.3%)\n2023-07-11 04:34:57.039 [ INFO] Progress -   3.3 MB (72.4%)\n2023-07-11 04:34:57.039 [ INFO] Progress -   3.3 MB (74.4%)\n2023-07-11 04:34:57.040 [ INFO] Progress -   3.3 MB (76.4%)\n2023-07-11 04:34:57.040 [ INFO] Progress -   3.3 MB (78.4%)\n2023-07-11 04:34:57.209 [ INFO] Progress -   3.3 MB (80.4%)\n2023-07-11 04:34:57.209 [ INFO] Progress -   3.3 MB (82.4%)\n2023-07-11 04:34:57.210 [ INFO] Progress -   3.3 MB (84.4%)\n2023-07-11 04:34:57.210 [ INFO] Progress -   3.3 MB (86.4%)\n2023-07-11 04:34:57.210 [ INFO] Progress -   3.3 MB (88.4%)\n2023-07-11 04:34:57.210 [ INFO] Progress -   3.3 MB (90.4%)\n2023-07-11 04:34:57.211 [ INFO] Progress -   3.3 MB (92.5%)\n2023-07-11 04:34:57.211 [ INFO] Progress -   3.3 MB (94.5%)\n2023-07-11 04:34:57.211 [ INFO] Progress -   3.3 MB (96.5%)\n2023-07-11 04:34:57.212 [ INFO] Progress -   3.3 MB (98.5%)\n2023-07-11 04:34:57.212 [ INFO] Progress -   3.3 MB (100.0%)\n2023-07-11 04:34:57.213 [ INFO] Processing  time : 0:00:32.298162\n2023-07-11 04:34:57.213 [ INFO] Downloading time : 0:00:01.404053\n2023-07-11 04:34:57.213 [ INFO] Total time       : 0:00:33.702215\n2023-07-11 04:34:57.213 [ INFO] Download rate    : 1.5 MB/s\n2023-07-11 04:34:57.213 [ INFO] Save into        : motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D/200005.nc\n2023-07-11 04:34:57.242 [ INFO] Done\n2023-07-11 04:34:57.482 [ INFO] Asynchronous mode set\n2023-07-11 04:34:57.482 [ INFO] Authenticating user mphan for service https://my.cmems-du.eu/motu-web/Motu\n2023-07-11 04:35:05.474 [ INFO] Requesting file to download (this can take a while)...\n2023-07-11 04:35:13.265 [ INFO] Authenticating user mphan for service https://my.cmems-du.eu/motu-web/Motu\n2023-07-11 04:35:29.833 [ INFO] The product is ready for download\n2023-07-11 04:35:29.833 [ INFO] Downloading file (this can take a while)...\n2023-07-11 04:35:30.583 [ INFO] File type: application/x-netcdf\n2023-07-11 04:35:30.583 [ INFO] File size: 3.2 MB (3155704 B)\n2023-07-11 04:35:30.583 [ INFO] Downloading file /home/jovyan/shared/minh-notebooks/motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D/200006.nc\n2023-07-11 04:35:30.932 [ INFO] Progress -   3.2 MB (2.1%)\n2023-07-11 04:35:31.107 [ INFO] Progress -   3.2 MB (4.2%)\n2023-07-11 04:35:31.282 [ INFO] Progress -   3.2 MB (6.2%)\n2023-07-11 04:35:31.283 [ INFO] Progress -   3.2 MB (8.3%)\n2023-07-11 04:35:31.283 [ INFO] Progress -   3.2 MB (10.4%)\n2023-07-11 04:35:31.458 [ INFO] Progress -   3.2 MB (12.5%)\n2023-07-11 04:35:31.458 [ INFO] Progress -   3.2 MB (14.5%)\n2023-07-11 04:35:31.458 [ INFO] Progress -   3.2 MB (16.6%)\n2023-07-11 04:35:31.459 [ INFO] Progress -   3.2 MB (18.7%)\n2023-07-11 04:35:31.459 [ INFO] Progress -   3.2 MB (20.8%)\n2023-07-11 04:35:31.633 [ INFO] Progress -   3.2 MB (22.8%)\n2023-07-11 04:35:31.633 [ INFO] Progress -   3.2 MB (24.9%)\n2023-07-11 04:35:31.634 [ INFO] Progress -   3.2 MB (27.0%)\n2023-07-11 04:35:31.634 [ INFO] Progress -   3.2 MB (29.1%)\n2023-07-11 04:35:31.634 [ INFO] Progress -   3.2 MB (31.2%)\n2023-07-11 04:35:31.634 [ INFO] Progress -   3.2 MB (33.2%)\n2023-07-11 04:35:31.635 [ INFO] Progress -   3.2 MB (35.3%)\n2023-07-11 04:35:31.636 [ INFO] Progress -   3.2 MB (37.4%)\n2023-07-11 04:35:31.636 [ INFO] Progress -   3.2 MB (39.5%)\n2023-07-11 04:35:31.636 [ INFO] Progress -   3.2 MB (41.5%)\n2023-07-11 04:35:31.636 [ INFO] Progress -   3.2 MB (43.6%)\n2023-07-11 04:35:31.808 [ INFO] Progress -   3.2 MB (45.7%)\n2023-07-11 04:35:31.808 [ INFO] Progress -   3.2 MB (47.8%)\n2023-07-11 04:35:31.808 [ INFO] Progress -   3.2 MB (49.8%)\n2023-07-11 04:35:31.809 [ INFO] Progress -   3.2 MB (51.9%)\n2023-07-11 04:35:31.809 [ INFO] Progress -   3.2 MB (54.0%)\n2023-07-11 04:35:31.809 [ INFO] Progress -   3.2 MB (56.1%)\n2023-07-11 04:35:31.810 [ INFO] Progress -   3.2 MB (58.1%)\n2023-07-11 04:35:31.810 [ INFO] Progress -   3.2 MB (60.2%)\n2023-07-11 04:35:31.810 [ INFO] Progress -   3.2 MB (62.3%)\n2023-07-11 04:35:31.810 [ INFO] Progress -   3.2 MB (64.4%)\n2023-07-11 04:35:31.811 [ INFO] Progress -   3.2 MB (66.5%)\n2023-07-11 04:35:31.811 [ INFO] Progress -   3.2 MB (68.5%)\n2023-07-11 04:35:31.812 [ INFO] Progress -   3.2 MB (70.6%)\n2023-07-11 04:35:31.812 [ INFO] Progress -   3.2 MB (72.7%)\n2023-07-11 04:35:31.812 [ INFO] Progress -   3.2 MB (74.8%)\n2023-07-11 04:35:31.812 [ INFO] Progress -   3.2 MB (76.8%)\n2023-07-11 04:35:31.813 [ INFO] Progress -   3.2 MB (78.9%)\n2023-07-11 04:35:31.813 [ INFO] Progress -   3.2 MB (81.0%)\n2023-07-11 04:35:31.813 [ INFO] Progress -   3.2 MB (83.1%)\n2023-07-11 04:35:31.813 [ INFO] Progress -   3.2 MB (85.1%)\n2023-07-11 04:35:31.814 [ INFO] Progress -   3.2 MB (87.2%)\n2023-07-11 04:35:31.983 [ INFO] Progress -   3.2 MB (89.3%)\n2023-07-11 04:35:31.983 [ INFO] Progress -   3.2 MB (91.4%)\n2023-07-11 04:35:31.983 [ INFO] Progress -   3.2 MB (93.5%)\n2023-07-11 04:35:31.984 [ INFO] Progress -   3.2 MB (95.5%)\n2023-07-11 04:35:31.984 [ INFO] Progress -   3.2 MB (97.6%)\n2023-07-11 04:35:31.984 [ INFO] Progress -   3.2 MB (99.7%)\n2023-07-11 04:35:31.985 [ INFO] Progress -   3.2 MB (100.0%)\n2023-07-11 04:35:31.985 [ INFO] Processing  time : 0:00:33.103400\n2023-07-11 04:35:31.985 [ INFO] Downloading time : 0:00:01.401763\n2023-07-11 04:35:31.985 [ INFO] Total time       : 0:00:34.505163\n2023-07-11 04:35:31.985 [ INFO] Download rate    : 1.5 MB/s\n2023-07-11 04:35:31.985 [ INFO] Save into        : motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D/200006.nc\n2023-07-11 04:35:32.015 [ INFO] Done\n2023-07-11 04:35:32.256 [ INFO] Asynchronous mode set\n2023-07-11 04:35:32.257 [ INFO] Authenticating user mphan for service https://my.cmems-du.eu/motu-web/Motu\n2023-07-11 04:35:40.867 [ INFO] Requesting file to download (this can take a while)...\n2023-07-11 04:35:49.156 [ INFO] Authenticating user mphan for service https://my.cmems-du.eu/motu-web/Motu\n2023-07-11 04:36:05.880 [ INFO] The product is ready for download\n2023-07-11 04:36:05.880 [ INFO] Downloading file (this can take a while)...\n2023-07-11 04:36:06.624 [ INFO] File type: application/x-netcdf\n2023-07-11 04:36:06.625 [ INFO] File size: 3.3 MB (3260684 B)\n2023-07-11 04:36:06.625 [ INFO] Downloading file /home/jovyan/shared/minh-notebooks/motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D/200007.nc\n2023-07-11 04:36:06.974 [ INFO] Progress -   3.3 MB (2.0%)\n2023-07-11 04:36:07.149 [ INFO] Progress -   3.3 MB (4.0%)\n2023-07-11 04:36:07.324 [ INFO] Progress -   3.3 MB (6.0%)\n2023-07-11 04:36:07.324 [ INFO] Progress -   3.3 MB (8.0%)\n2023-07-11 04:36:07.325 [ INFO] Progress -   3.3 MB (10.0%)\n2023-07-11 04:36:07.499 [ INFO] Progress -   3.3 MB (12.1%)\n2023-07-11 04:36:07.500 [ INFO] Progress -   3.3 MB (14.1%)\n2023-07-11 04:36:07.500 [ INFO] Progress -   3.3 MB (16.1%)\n2023-07-11 04:36:07.500 [ INFO] Progress -   3.3 MB (18.1%)\n2023-07-11 04:36:07.500 [ INFO] Progress -   3.3 MB (20.1%)\n2023-07-11 04:36:07.501 [ INFO] Progress -   3.3 MB (22.1%)\n2023-07-11 04:36:07.501 [ INFO] Progress -   3.3 MB (24.1%)\n2023-07-11 04:36:07.674 [ INFO] Progress -   3.3 MB (26.1%)\n2023-07-11 04:36:07.675 [ INFO] Progress -   3.3 MB (28.1%)\n2023-07-11 04:36:07.675 [ INFO] Progress -   3.3 MB (30.1%)\n2023-07-11 04:36:07.675 [ INFO] Progress -   3.3 MB (32.2%)\n2023-07-11 04:36:07.676 [ INFO] Progress -   3.3 MB (34.2%)\n2023-07-11 04:36:07.677 [ INFO] Progress -   3.3 MB (36.2%)\n2023-07-11 04:36:07.677 [ INFO] Progress -   3.3 MB (38.2%)\n2023-07-11 04:36:07.677 [ INFO] Progress -   3.3 MB (40.2%)\n2023-07-11 04:36:07.677 [ INFO] Progress -   3.3 MB (42.2%)\n2023-07-11 04:36:07.678 [ INFO] Progress -   3.3 MB (44.2%)\n2023-07-11 04:36:07.678 [ INFO] Progress -   3.3 MB (46.2%)\n2023-07-11 04:36:07.678 [ INFO] Progress -   3.3 MB (48.2%)\n2023-07-11 04:36:07.849 [ INFO] Progress -   3.3 MB (50.2%)\n2023-07-11 04:36:07.850 [ INFO] Progress -   3.3 MB (52.3%)\n2023-07-11 04:36:07.850 [ INFO] Progress -   3.3 MB (54.3%)\n2023-07-11 04:36:07.850 [ INFO] Progress -   3.3 MB (56.3%)\n2023-07-11 04:36:07.851 [ INFO] Progress -   3.3 MB (58.3%)\n2023-07-11 04:36:07.851 [ INFO] Progress -   3.3 MB (60.3%)\n2023-07-11 04:36:07.851 [ INFO] Progress -   3.3 MB (62.3%)\n2023-07-11 04:36:07.852 [ INFO] Progress -   3.3 MB (64.3%)\n2023-07-11 04:36:07.853 [ INFO] Progress -   3.3 MB (66.3%)\n2023-07-11 04:36:07.853 [ INFO] Progress -   3.3 MB (68.3%)\n2023-07-11 04:36:07.853 [ INFO] Progress -   3.3 MB (70.3%)\n2023-07-11 04:36:07.853 [ INFO] Progress -   3.3 MB (72.4%)\n2023-07-11 04:36:07.854 [ INFO] Progress -   3.3 MB (74.4%)\n2023-07-11 04:36:07.854 [ INFO] Progress -   3.3 MB (76.4%)\n2023-07-11 04:36:07.854 [ INFO] Progress -   3.3 MB (78.4%)\n2023-07-11 04:36:07.854 [ INFO] Progress -   3.3 MB (80.4%)\n2023-07-11 04:36:07.854 [ INFO] Progress -   3.3 MB (82.4%)\n2023-07-11 04:36:07.855 [ INFO] Progress -   3.3 MB (84.4%)\n2023-07-11 04:36:07.855 [ INFO] Progress -   3.3 MB (86.4%)\n2023-07-11 04:36:07.855 [ INFO] Progress -   3.3 MB (88.4%)\n2023-07-11 04:36:07.855 [ INFO] Progress -   3.3 MB (90.4%)\n2023-07-11 04:36:07.856 [ INFO] Progress -   3.3 MB (92.5%)\n2023-07-11 04:36:07.856 [ INFO] Progress -   3.3 MB (94.5%)\n2023-07-11 04:36:07.856 [ INFO] Progress -   3.3 MB (96.5%)\n2023-07-11 04:36:07.857 [ INFO] Progress -   3.3 MB (98.5%)\n2023-07-11 04:36:08.024 [ INFO] Progress -   3.3 MB (100.0%)\n2023-07-11 04:36:08.025 [ INFO] Processing  time : 0:00:34.370452\n2023-07-11 04:36:08.025 [ INFO] Downloading time : 0:00:01.399979\n2023-07-11 04:36:08.025 [ INFO] Total time       : 0:00:35.770431\n2023-07-11 04:36:08.025 [ INFO] Download rate    : 1.5 MB/s\n2023-07-11 04:36:08.025 [ INFO] Save into        : motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D/200007.nc\n2023-07-11 04:36:08.055 [ INFO] Done\n2023-07-11 04:36:08.293 [ INFO] Asynchronous mode set\n2023-07-11 04:36:08.294 [ INFO] Authenticating user mphan for service https://my.cmems-du.eu/motu-web/Motu\n2023-07-11 04:36:16.318 [ INFO] Requesting file to download (this can take a while)...\n2023-07-11 04:36:24.794 [ INFO] Authenticating user mphan for service https://my.cmems-du.eu/motu-web/Motu\n2023-07-11 04:36:40.691 [ INFO] The product is ready for download\n2023-07-11 04:36:40.691 [ INFO] Downloading file (this can take a while)...\n2023-07-11 04:36:41.620 [ INFO] File type: application/x-netcdf\n2023-07-11 04:36:41.620 [ INFO] File size: 3.3 MB (3260684 B)\n2023-07-11 04:36:41.620 [ INFO] Downloading file /home/jovyan/shared/minh-notebooks/motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D/200008.nc\n2023-07-11 04:36:41.794 [ INFO] Progress -   3.3 MB (2.0%)\n2023-07-11 04:36:41.969 [ INFO] Progress -   3.3 MB (4.0%)\n2023-07-11 04:36:42.144 [ INFO] Progress -   3.3 MB (6.0%)\n2023-07-11 04:36:42.145 [ INFO] Progress -   3.3 MB (8.0%)\n2023-07-11 04:36:42.145 [ INFO] Progress -   3.3 MB (10.0%)\n2023-07-11 04:36:42.319 [ INFO] Progress -   3.3 MB (12.1%)\n2023-07-11 04:36:42.320 [ INFO] Progress -   3.3 MB (14.1%)\n2023-07-11 04:36:42.320 [ INFO] Progress -   3.3 MB (16.1%)\n2023-07-11 04:36:42.320 [ INFO] Progress -   3.3 MB (18.1%)\n2023-07-11 04:36:42.321 [ INFO] Progress -   3.3 MB (20.1%)\n2023-07-11 04:36:42.321 [ INFO] Progress -   3.3 MB (22.1%)\n2023-07-11 04:36:42.321 [ INFO] Progress -   3.3 MB (24.1%)\n2023-07-11 04:36:42.494 [ INFO] Progress -   3.3 MB (26.1%)\n2023-07-11 04:36:42.495 [ INFO] Progress -   3.3 MB (28.1%)\n2023-07-11 04:36:42.495 [ INFO] Progress -   3.3 MB (30.1%)\n2023-07-11 04:36:42.495 [ INFO] Progress -   3.3 MB (32.2%)\n2023-07-11 04:36:42.496 [ INFO] Progress -   3.3 MB (34.2%)\n2023-07-11 04:36:42.497 [ INFO] Progress -   3.3 MB (36.2%)\n2023-07-11 04:36:42.497 [ INFO] Progress -   3.3 MB (38.2%)\n2023-07-11 04:36:42.497 [ INFO] Progress -   3.3 MB (40.2%)\n2023-07-11 04:36:42.497 [ INFO] Progress -   3.3 MB (42.2%)\n2023-07-11 04:36:42.498 [ INFO] Progress -   3.3 MB (44.2%)\n2023-07-11 04:36:42.498 [ INFO] Progress -   3.3 MB (46.2%)\n2023-07-11 04:36:42.498 [ INFO] Progress -   3.3 MB (48.2%)\n2023-07-11 04:36:42.669 [ INFO] Progress -   3.3 MB (50.2%)\n2023-07-11 04:36:42.670 [ INFO] Progress -   3.3 MB (52.3%)\n2023-07-11 04:36:42.670 [ INFO] Progress -   3.3 MB (54.3%)\n2023-07-11 04:36:42.670 [ INFO] Progress -   3.3 MB (56.3%)\n2023-07-11 04:36:42.671 [ INFO] Progress -   3.3 MB (58.3%)\n2023-07-11 04:36:42.671 [ INFO] Progress -   3.3 MB (60.3%)\n2023-07-11 04:36:42.671 [ INFO] Progress -   3.3 MB (62.3%)\n2023-07-11 04:36:42.672 [ INFO] Progress -   3.3 MB (64.3%)\n2023-07-11 04:36:42.672 [ INFO] Progress -   3.3 MB (66.3%)\n2023-07-11 04:36:42.673 [ INFO] Progress -   3.3 MB (68.3%)\n2023-07-11 04:36:42.673 [ INFO] Progress -   3.3 MB (70.3%)\n2023-07-11 04:36:42.673 [ INFO] Progress -   3.3 MB (72.4%)\n2023-07-11 04:36:42.673 [ INFO] Progress -   3.3 MB (74.4%)\n2023-07-11 04:36:42.674 [ INFO] Progress -   3.3 MB (76.4%)\n2023-07-11 04:36:42.674 [ INFO] Progress -   3.3 MB (78.4%)\n2023-07-11 04:36:42.674 [ INFO] Progress -   3.3 MB (80.4%)\n2023-07-11 04:36:42.674 [ INFO] Progress -   3.3 MB (82.4%)\n2023-07-11 04:36:42.675 [ INFO] Progress -   3.3 MB (84.4%)\n2023-07-11 04:36:42.675 [ INFO] Progress -   3.3 MB (86.4%)\n2023-07-11 04:36:42.675 [ INFO] Progress -   3.3 MB (88.4%)\n2023-07-11 04:36:42.675 [ INFO] Progress -   3.3 MB (90.4%)\n2023-07-11 04:36:42.676 [ INFO] Progress -   3.3 MB (92.5%)\n2023-07-11 04:36:42.676 [ INFO] Progress -   3.3 MB (94.5%)\n2023-07-11 04:36:42.676 [ INFO] Progress -   3.3 MB (96.5%)\n2023-07-11 04:36:42.677 [ INFO] Progress -   3.3 MB (98.5%)\n2023-07-11 04:36:42.845 [ INFO] Progress -   3.3 MB (100.0%)\n2023-07-11 04:36:42.845 [ INFO] Processing  time : 0:00:33.329086\n2023-07-11 04:36:42.845 [ INFO] Downloading time : 0:00:01.224631\n2023-07-11 04:36:42.845 [ INFO] Total time       : 0:00:34.553717\n2023-07-11 04:36:42.845 [ INFO] Download rate    : 1.5 MB/s\n2023-07-11 04:36:42.845 [ INFO] Save into        : motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D/200008.nc\n2023-07-11 04:36:42.876 [ INFO] Done\n2023-07-11 04:36:43.117 [ INFO] Asynchronous mode set\n2023-07-11 04:36:43.118 [ INFO] Authenticating user mphan for service https://my.cmems-du.eu/motu-web/Motu\n2023-07-11 04:36:50.965 [ INFO] Requesting file to download (this can take a while)...\n2023-07-11 04:36:59.415 [ INFO] Authenticating user mphan for service https://my.cmems-du.eu/motu-web/Motu\n2023-07-11 04:37:13.369 [ INFO] The product is ready for download\n2023-07-11 04:37:13.369 [ INFO] Downloading file (this can take a while)...\n2023-07-11 04:37:14.112 [ INFO] File type: application/x-netcdf\n2023-07-11 04:37:14.112 [ INFO] File size: 3.2 MB (3155704 B)\n2023-07-11 04:37:14.113 [ INFO] Downloading file /home/jovyan/shared/minh-notebooks/motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D/200009.nc\n2023-07-11 04:37:14.462 [ INFO] Progress -   3.2 MB (2.1%)\n2023-07-11 04:37:14.637 [ INFO] Progress -   3.2 MB (4.2%)\n2023-07-11 04:37:14.812 [ INFO] Progress -   3.2 MB (6.2%)\n2023-07-11 04:37:14.812 [ INFO] Progress -   3.2 MB (8.3%)\n2023-07-11 04:37:14.813 [ INFO] Progress -   3.2 MB (10.4%)\n2023-07-11 04:37:14.987 [ INFO] Progress -   3.2 MB (12.5%)\n2023-07-11 04:37:14.987 [ INFO] Progress -   3.2 MB (14.5%)\n2023-07-11 04:37:14.988 [ INFO] Progress -   3.2 MB (16.6%)\n2023-07-11 04:37:14.988 [ INFO] Progress -   3.2 MB (18.7%)\n2023-07-11 04:37:14.988 [ INFO] Progress -   3.2 MB (20.8%)\n2023-07-11 04:37:14.988 [ INFO] Progress -   3.2 MB (22.8%)\n2023-07-11 04:37:15.162 [ INFO] Progress -   3.2 MB (24.9%)\n2023-07-11 04:37:15.163 [ INFO] Progress -   3.2 MB (27.0%)\n2023-07-11 04:37:15.163 [ INFO] Progress -   3.2 MB (29.1%)\n2023-07-11 04:37:15.163 [ INFO] Progress -   3.2 MB (31.2%)\n2023-07-11 04:37:15.164 [ INFO] Progress -   3.2 MB (33.2%)\n2023-07-11 04:37:15.164 [ INFO] Progress -   3.2 MB (35.3%)\n2023-07-11 04:37:15.165 [ INFO] Progress -   3.2 MB (37.4%)\n2023-07-11 04:37:15.165 [ INFO] Progress -   3.2 MB (39.5%)\n2023-07-11 04:37:15.165 [ INFO] Progress -   3.2 MB (41.5%)\n2023-07-11 04:37:15.165 [ INFO] Progress -   3.2 MB (43.6%)\n2023-07-11 04:37:15.166 [ INFO] Progress -   3.2 MB (45.7%)\n2023-07-11 04:37:15.337 [ INFO] Progress -   3.2 MB (47.8%)\n2023-07-11 04:37:15.337 [ INFO] Progress -   3.2 MB (49.8%)\n2023-07-11 04:37:15.338 [ INFO] Progress -   3.2 MB (51.9%)\n2023-07-11 04:37:15.338 [ INFO] Progress -   3.2 MB (54.0%)\n2023-07-11 04:37:15.338 [ INFO] Progress -   3.2 MB (56.1%)\n2023-07-11 04:37:15.338 [ INFO] Progress -   3.2 MB (58.1%)\n2023-07-11 04:37:15.339 [ INFO] Progress -   3.2 MB (60.2%)\n2023-07-11 04:37:15.339 [ INFO] Progress -   3.2 MB (62.3%)\n2023-07-11 04:37:15.339 [ INFO] Progress -   3.2 MB (64.4%)\n2023-07-11 04:37:15.339 [ INFO] Progress -   3.2 MB (66.5%)\n2023-07-11 04:37:15.340 [ INFO] Progress -   3.2 MB (68.5%)\n2023-07-11 04:37:15.340 [ INFO] Progress -   3.2 MB (70.6%)\n2023-07-11 04:37:15.341 [ INFO] Progress -   3.2 MB (72.7%)\n2023-07-11 04:37:15.341 [ INFO] Progress -   3.2 MB (74.8%)\n2023-07-11 04:37:15.341 [ INFO] Progress -   3.2 MB (76.8%)\n2023-07-11 04:37:15.341 [ INFO] Progress -   3.2 MB (78.9%)\n2023-07-11 04:37:15.342 [ INFO] Progress -   3.2 MB (81.0%)\n2023-07-11 04:37:15.342 [ INFO] Progress -   3.2 MB (83.1%)\n2023-07-11 04:37:15.342 [ INFO] Progress -   3.2 MB (85.1%)\n2023-07-11 04:37:15.342 [ INFO] Progress -   3.2 MB (87.2%)\n2023-07-11 04:37:15.342 [ INFO] Progress -   3.2 MB (89.3%)\n2023-07-11 04:37:15.343 [ INFO] Progress -   3.2 MB (91.4%)\n2023-07-11 04:37:15.343 [ INFO] Progress -   3.2 MB (93.5%)\n2023-07-11 04:37:15.512 [ INFO] Progress -   3.2 MB (95.5%)\n2023-07-11 04:37:15.512 [ INFO] Progress -   3.2 MB (97.6%)\n2023-07-11 04:37:15.513 [ INFO] Progress -   3.2 MB (99.7%)\n2023-07-11 04:37:15.513 [ INFO] Progress -   3.2 MB (100.0%)\n2023-07-11 04:37:15.513 [ INFO] Processing  time : 0:00:30.997472\n2023-07-11 04:37:15.513 [ INFO] Downloading time : 0:00:01.400914\n2023-07-11 04:37:15.513 [ INFO] Total time       : 0:00:32.398386\n2023-07-11 04:37:15.513 [ INFO] Download rate    : 1.5 MB/s\n2023-07-11 04:37:15.514 [ INFO] Save into        : motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D/200009.nc\n2023-07-11 04:37:15.543 [ INFO] Done\n2023-07-11 04:37:15.783 [ INFO] Asynchronous mode set\n2023-07-11 04:37:15.783 [ INFO] Authenticating user mphan for service https://my.cmems-du.eu/motu-web/Motu\n2023-07-11 04:37:20.984 [ INFO] Requesting file to download (this can take a while)...\n2023-07-11 04:37:30.393 [ INFO] Authenticating user mphan for service https://my.cmems-du.eu/motu-web/Motu\n2023-07-11 04:37:47.071 [ INFO] The product is ready for download\n2023-07-11 04:37:47.071 [ INFO] Downloading file (this can take a while)...\n2023-07-11 04:37:47.821 [ INFO] File type: application/x-netcdf\n2023-07-11 04:37:47.821 [ INFO] File size: 3.3 MB (3260684 B)\n2023-07-11 04:37:47.821 [ INFO] Downloading file /home/jovyan/shared/minh-notebooks/motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D/200010.nc\n2023-07-11 04:37:48.170 [ INFO] Progress -   3.3 MB (2.0%)\n2023-07-11 04:37:48.346 [ INFO] Progress -   3.3 MB (4.0%)\n2023-07-11 04:37:48.520 [ INFO] Progress -   3.3 MB (6.0%)\n2023-07-11 04:37:48.521 [ INFO] Progress -   3.3 MB (8.0%)\n2023-07-11 04:37:48.521 [ INFO] Progress -   3.3 MB (10.0%)\n2023-07-11 04:37:48.695 [ INFO] Progress -   3.3 MB (12.1%)\n2023-07-11 04:37:48.696 [ INFO] Progress -   3.3 MB (14.1%)\n2023-07-11 04:37:48.696 [ INFO] Progress -   3.3 MB (16.1%)\n2023-07-11 04:37:48.696 [ INFO] Progress -   3.3 MB (18.1%)\n2023-07-11 04:37:48.697 [ INFO] Progress -   3.3 MB (20.1%)\n2023-07-11 04:37:48.697 [ INFO] Progress -   3.3 MB (22.1%)\n2023-07-11 04:37:48.697 [ INFO] Progress -   3.3 MB (24.1%)\n2023-07-11 04:37:48.871 [ INFO] Progress -   3.3 MB (26.1%)\n2023-07-11 04:37:48.871 [ INFO] Progress -   3.3 MB (28.1%)\n2023-07-11 04:37:48.872 [ INFO] Progress -   3.3 MB (30.1%)\n2023-07-11 04:37:48.872 [ INFO] Progress -   3.3 MB (32.2%)\n2023-07-11 04:37:48.873 [ INFO] Progress -   3.3 MB (34.2%)\n2023-07-11 04:37:48.873 [ INFO] Progress -   3.3 MB (36.2%)\n2023-07-11 04:37:48.873 [ INFO] Progress -   3.3 MB (38.2%)\n2023-07-11 04:37:48.874 [ INFO] Progress -   3.3 MB (40.2%)\n2023-07-11 04:37:48.874 [ INFO] Progress -   3.3 MB (42.2%)\n2023-07-11 04:37:48.874 [ INFO] Progress -   3.3 MB (44.2%)\n2023-07-11 04:37:48.874 [ INFO] Progress -   3.3 MB (46.2%)\n2023-07-11 04:37:48.874 [ INFO] Progress -   3.3 MB (48.2%)\n2023-07-11 04:37:49.046 [ INFO] Progress -   3.3 MB (50.2%)\n2023-07-11 04:37:49.046 [ INFO] Progress -   3.3 MB (52.3%)\n2023-07-11 04:37:49.046 [ INFO] Progress -   3.3 MB (54.3%)\n2023-07-11 04:37:49.047 [ INFO] Progress -   3.3 MB (56.3%)\n2023-07-11 04:37:49.047 [ INFO] Progress -   3.3 MB (58.3%)\n2023-07-11 04:37:49.047 [ INFO] Progress -   3.3 MB (60.3%)\n2023-07-11 04:37:49.048 [ INFO] Progress -   3.3 MB (62.3%)\n2023-07-11 04:37:49.048 [ INFO] Progress -   3.3 MB (64.3%)\n2023-07-11 04:37:49.049 [ INFO] Progress -   3.3 MB (66.3%)\n2023-07-11 04:37:49.049 [ INFO] Progress -   3.3 MB (68.3%)\n2023-07-11 04:37:49.049 [ INFO] Progress -   3.3 MB (70.3%)\n2023-07-11 04:37:49.049 [ INFO] Progress -   3.3 MB (72.4%)\n2023-07-11 04:37:49.050 [ INFO] Progress -   3.3 MB (74.4%)\n2023-07-11 04:37:49.050 [ INFO] Progress -   3.3 MB (76.4%)\n2023-07-11 04:37:49.050 [ INFO] Progress -   3.3 MB (78.4%)\n2023-07-11 04:37:49.050 [ INFO] Progress -   3.3 MB (80.4%)\n2023-07-11 04:37:49.051 [ INFO] Progress -   3.3 MB (82.4%)\n2023-07-11 04:37:49.051 [ INFO] Progress -   3.3 MB (84.4%)\n2023-07-11 04:37:49.051 [ INFO] Progress -   3.3 MB (86.4%)\n2023-07-11 04:37:49.051 [ INFO] Progress -   3.3 MB (88.4%)\n2023-07-11 04:37:49.051 [ INFO] Progress -   3.3 MB (90.4%)\n2023-07-11 04:37:49.052 [ INFO] Progress -   3.3 MB (92.5%)\n2023-07-11 04:37:49.052 [ INFO] Progress -   3.3 MB (94.5%)\n2023-07-11 04:37:49.052 [ INFO] Progress -   3.3 MB (96.5%)\n2023-07-11 04:37:49.053 [ INFO] Progress -   3.3 MB (98.5%)\n2023-07-11 04:37:49.053 [ INFO] Progress -   3.3 MB (100.0%)\n2023-07-11 04:37:49.053 [ INFO] Processing  time : 0:00:32.040412\n2023-07-11 04:37:49.053 [ INFO] Downloading time : 0:00:01.232141\n2023-07-11 04:37:49.053 [ INFO] Total time       : 0:00:33.272553\n2023-07-11 04:37:49.053 [ INFO] Download rate    : 1.6 MB/s\n2023-07-11 04:37:49.054 [ INFO] Save into        : motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D/200010.nc\n2023-07-11 04:37:49.084 [ INFO] Done\n2023-07-11 04:37:49.325 [ INFO] Asynchronous mode set\n2023-07-11 04:37:49.325 [ INFO] Authenticating user mphan for service https://my.cmems-du.eu/motu-web/Motu\n2023-07-11 04:37:59.411 [ INFO] Requesting file to download (this can take a while)...\n2023-07-11 04:38:06.403 [ INFO] Authenticating user mphan for service https://my.cmems-du.eu/motu-web/Motu\n2023-07-11 04:38:22.049 [ INFO] The product is ready for download\n2023-07-11 04:38:22.049 [ INFO] Downloading file (this can take a while)...\n2023-07-11 04:38:22.795 [ INFO] File type: application/x-netcdf\n2023-07-11 04:38:22.795 [ INFO] File size: 3.2 MB (3155704 B)\n2023-07-11 04:38:22.795 [ INFO] Downloading file /home/jovyan/shared/minh-notebooks/motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D/200011.nc\n2023-07-11 04:38:23.144 [ INFO] Progress -   3.2 MB (2.1%)\n2023-07-11 04:38:23.319 [ INFO] Progress -   3.2 MB (4.2%)\n2023-07-11 04:38:23.494 [ INFO] Progress -   3.2 MB (6.2%)\n2023-07-11 04:38:23.495 [ INFO] Progress -   3.2 MB (8.3%)\n2023-07-11 04:38:23.495 [ INFO] Progress -   3.2 MB (10.4%)\n2023-07-11 04:38:23.669 [ INFO] Progress -   3.2 MB (12.5%)\n2023-07-11 04:38:23.670 [ INFO] Progress -   3.2 MB (14.5%)\n2023-07-11 04:38:23.670 [ INFO] Progress -   3.2 MB (16.6%)\n2023-07-11 04:38:23.670 [ INFO] Progress -   3.2 MB (18.7%)\n2023-07-11 04:38:23.671 [ INFO] Progress -   3.2 MB (20.8%)\n2023-07-11 04:38:23.671 [ INFO] Progress -   3.2 MB (22.8%)\n2023-07-11 04:38:23.844 [ INFO] Progress -   3.2 MB (24.9%)\n2023-07-11 04:38:23.845 [ INFO] Progress -   3.2 MB (27.0%)\n2023-07-11 04:38:23.845 [ INFO] Progress -   3.2 MB (29.1%)\n2023-07-11 04:38:23.845 [ INFO] Progress -   3.2 MB (31.2%)\n2023-07-11 04:38:23.846 [ INFO] Progress -   3.2 MB (33.2%)\n2023-07-11 04:38:23.847 [ INFO] Progress -   3.2 MB (35.3%)\n2023-07-11 04:38:23.847 [ INFO] Progress -   3.2 MB (37.4%)\n2023-07-11 04:38:23.847 [ INFO] Progress -   3.2 MB (39.5%)\n2023-07-11 04:38:23.847 [ INFO] Progress -   3.2 MB (41.5%)\n2023-07-11 04:38:23.848 [ INFO] Progress -   3.2 MB (43.6%)\n2023-07-11 04:38:23.848 [ INFO] Progress -   3.2 MB (45.7%)\n2023-07-11 04:38:23.848 [ INFO] Progress -   3.2 MB (47.8%)\n2023-07-11 04:38:24.019 [ INFO] Progress -   3.2 MB (49.8%)\n2023-07-11 04:38:24.020 [ INFO] Progress -   3.2 MB (51.9%)\n2023-07-11 04:38:24.020 [ INFO] Progress -   3.2 MB (54.0%)\n2023-07-11 04:38:24.020 [ INFO] Progress -   3.2 MB (56.1%)\n2023-07-11 04:38:24.021 [ INFO] Progress -   3.2 MB (58.1%)\n2023-07-11 04:38:24.021 [ INFO] Progress -   3.2 MB (60.2%)\n2023-07-11 04:38:24.021 [ INFO] Progress -   3.2 MB (62.3%)\n2023-07-11 04:38:24.021 [ INFO] Progress -   3.2 MB (64.4%)\n2023-07-11 04:38:24.022 [ INFO] Progress -   3.2 MB (66.5%)\n2023-07-11 04:38:24.022 [ INFO] Progress -   3.2 MB (68.5%)\n2023-07-11 04:38:24.023 [ INFO] Progress -   3.2 MB (70.6%)\n2023-07-11 04:38:24.023 [ INFO] Progress -   3.2 MB (72.7%)\n2023-07-11 04:38:24.023 [ INFO] Progress -   3.2 MB (74.8%)\n2023-07-11 04:38:24.023 [ INFO] Progress -   3.2 MB (76.8%)\n2023-07-11 04:38:24.023 [ INFO] Progress -   3.2 MB (78.9%)\n2023-07-11 04:38:24.024 [ INFO] Progress -   3.2 MB (81.0%)\n2023-07-11 04:38:24.024 [ INFO] Progress -   3.2 MB (83.1%)\n2023-07-11 04:38:24.024 [ INFO] Progress -   3.2 MB (85.1%)\n2023-07-11 04:38:24.024 [ INFO] Progress -   3.2 MB (87.2%)\n2023-07-11 04:38:24.025 [ INFO] Progress -   3.2 MB (89.3%)\n2023-07-11 04:38:24.025 [ INFO] Progress -   3.2 MB (91.4%)\n2023-07-11 04:38:24.025 [ INFO] Progress -   3.2 MB (93.5%)\n2023-07-11 04:38:24.025 [ INFO] Progress -   3.2 MB (95.5%)\n2023-07-11 04:38:24.025 [ INFO] Progress -   3.2 MB (97.6%)\n2023-07-11 04:38:24.194 [ INFO] Progress -   3.2 MB (99.7%)\n2023-07-11 04:38:24.195 [ INFO] Progress -   3.2 MB (100.0%)\n2023-07-11 04:38:24.195 [ INFO] Processing  time : 0:00:33.470549\n2023-07-11 04:38:24.195 [ INFO] Downloading time : 0:00:01.400394\n2023-07-11 04:38:24.195 [ INFO] Total time       : 0:00:34.870943\n2023-07-11 04:38:24.195 [ INFO] Download rate    : 1.5 MB/s\n2023-07-11 04:38:24.195 [ INFO] Save into        : motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D/200011.nc\n2023-07-11 04:38:24.225 [ INFO] Done\n2023-07-11 04:38:24.465 [ INFO] Asynchronous mode set\n2023-07-11 04:38:24.465 [ INFO] Authenticating user mphan for service https://my.cmems-du.eu/motu-web/Motu\n2023-07-11 04:38:30.868 [ INFO] Requesting file to download (this can take a while)...\n2023-07-11 04:38:40.474 [ INFO] Authenticating user mphan for service https://my.cmems-du.eu/motu-web/Motu\n2023-07-11 04:38:55.592 [ INFO] The product is ready for download\n2023-07-11 04:38:55.592 [ INFO] Downloading file (this can take a while)...\n2023-07-11 04:38:56.336 [ INFO] File type: application/x-netcdf\n2023-07-11 04:38:56.336 [ INFO] File size: 3.3 MB (3260684 B)\n2023-07-11 04:38:56.336 [ INFO] Downloading file /home/jovyan/shared/minh-notebooks/motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D/200012.nc\n2023-07-11 04:38:56.687 [ INFO] Progress -   3.3 MB (2.0%)\n2023-07-11 04:38:56.862 [ INFO] Progress -   3.3 MB (4.0%)\n2023-07-11 04:38:57.035 [ INFO] Progress -   3.3 MB (6.0%)\n2023-07-11 04:38:57.037 [ INFO] Progress -   3.3 MB (8.0%)\n2023-07-11 04:38:57.037 [ INFO] Progress -   3.3 MB (10.0%)\n2023-07-11 04:38:57.037 [ INFO] Progress -   3.3 MB (12.1%)\n2023-07-11 04:38:57.211 [ INFO] Progress -   3.3 MB (14.1%)\n2023-07-11 04:38:57.212 [ INFO] Progress -   3.3 MB (16.1%)\n2023-07-11 04:38:57.212 [ INFO] Progress -   3.3 MB (18.1%)\n2023-07-11 04:38:57.212 [ INFO] Progress -   3.3 MB (20.1%)\n2023-07-11 04:38:57.213 [ INFO] Progress -   3.3 MB (22.1%)\n2023-07-11 04:38:57.213 [ INFO] Progress -   3.3 MB (24.1%)\n2023-07-11 04:38:57.386 [ INFO] Progress -   3.3 MB (26.1%)\n2023-07-11 04:38:57.386 [ INFO] Progress -   3.3 MB (28.1%)\n2023-07-11 04:38:57.386 [ INFO] Progress -   3.3 MB (30.1%)\n2023-07-11 04:38:57.387 [ INFO] Progress -   3.3 MB (32.2%)\n2023-07-11 04:38:57.388 [ INFO] Progress -   3.3 MB (34.2%)\n2023-07-11 04:38:57.388 [ INFO] Progress -   3.3 MB (36.2%)\n2023-07-11 04:38:57.388 [ INFO] Progress -   3.3 MB (38.2%)\n2023-07-11 04:38:57.389 [ INFO] Progress -   3.3 MB (40.2%)\n2023-07-11 04:38:57.389 [ INFO] Progress -   3.3 MB (42.2%)\n2023-07-11 04:38:57.389 [ INFO] Progress -   3.3 MB (44.2%)\n2023-07-11 04:38:57.389 [ INFO] Progress -   3.3 MB (46.2%)\n2023-07-11 04:38:57.390 [ INFO] Progress -   3.3 MB (48.2%)\n2023-07-11 04:38:57.390 [ INFO] Progress -   3.3 MB (50.2%)\n2023-07-11 04:38:57.390 [ INFO] Progress -   3.3 MB (52.3%)\n2023-07-11 04:38:57.561 [ INFO] Progress -   3.3 MB (54.3%)\n2023-07-11 04:38:57.561 [ INFO] Progress -   3.3 MB (56.3%)\n2023-07-11 04:38:57.562 [ INFO] Progress -   3.3 MB (58.3%)\n2023-07-11 04:38:57.562 [ INFO] Progress -   3.3 MB (60.3%)\n2023-07-11 04:38:57.562 [ INFO] Progress -   3.3 MB (62.3%)\n2023-07-11 04:38:57.562 [ INFO] Progress -   3.3 MB (64.3%)\n2023-07-11 04:38:57.563 [ INFO] Progress -   3.3 MB (66.3%)\n2023-07-11 04:38:57.564 [ INFO] Progress -   3.3 MB (68.3%)\n2023-07-11 04:38:57.564 [ INFO] Progress -   3.3 MB (70.3%)\n2023-07-11 04:38:57.564 [ INFO] Progress -   3.3 MB (72.4%)\n2023-07-11 04:38:57.565 [ INFO] Progress -   3.3 MB (74.4%)\n2023-07-11 04:38:57.565 [ INFO] Progress -   3.3 MB (76.4%)\n2023-07-11 04:38:57.565 [ INFO] Progress -   3.3 MB (78.4%)\n2023-07-11 04:38:57.565 [ INFO] Progress -   3.3 MB (80.4%)\n2023-07-11 04:38:57.566 [ INFO] Progress -   3.3 MB (82.4%)\n2023-07-11 04:38:57.566 [ INFO] Progress -   3.3 MB (84.4%)\n2023-07-11 04:38:57.566 [ INFO] Progress -   3.3 MB (86.4%)\n2023-07-11 04:38:57.566 [ INFO] Progress -   3.3 MB (88.4%)\n2023-07-11 04:38:57.567 [ INFO] Progress -   3.3 MB (90.4%)\n2023-07-11 04:38:57.567 [ INFO] Progress -   3.3 MB (92.5%)\n2023-07-11 04:38:57.567 [ INFO] Progress -   3.3 MB (94.5%)\n2023-07-11 04:38:57.567 [ INFO] Progress -   3.3 MB (96.5%)\n2023-07-11 04:38:57.568 [ INFO] Progress -   3.3 MB (98.5%)\n2023-07-11 04:38:57.569 [ INFO] Progress -   3.3 MB (100.0%)\n2023-07-11 04:38:57.569 [ INFO] Processing  time : 0:00:31.874707\n2023-07-11 04:38:57.569 [ INFO] Downloading time : 0:00:01.232594\n2023-07-11 04:38:57.569 [ INFO] Total time       : 0:00:33.107301\n2023-07-11 04:38:57.569 [ INFO] Download rate    : 1.6 MB/s\n2023-07-11 04:38:57.569 [ INFO] Save into        : motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D/200012.nc\n2023-07-11 04:38:57.599 [ INFO] Done\n2023-07-11 04:38:57.840 [ INFO] Asynchronous mode set\n2023-07-11 04:38:57.840 [ INFO] Authenticating user mphan for service https://my.cmems-du.eu/motu-web/Motu\n2023-07-11 04:39:04.934 [ INFO] Requesting file to download (this can take a while)...\n2023-07-11 04:39:11.874 [ INFO] Authenticating user mphan for service https://my.cmems-du.eu/motu-web/Motu\n2023-07-11 04:39:27.152 [ INFO] The product is ready for download\n2023-07-11 04:39:27.153 [ INFO] Downloading file (this can take a while)...\n2023-07-11 04:39:27.897 [ INFO] File type: application/x-netcdf\n2023-07-11 04:39:27.897 [ INFO] File size: 3.3 MB (3260684 B)\n2023-07-11 04:39:27.897 [ INFO] Downloading file /home/jovyan/shared/minh-notebooks/motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D/200101.nc\n2023-07-11 04:39:28.247 [ INFO] Progress -   3.3 MB (2.0%)\n2023-07-11 04:39:28.422 [ INFO] Progress -   3.3 MB (4.0%)\n2023-07-11 04:39:28.597 [ INFO] Progress -   3.3 MB (6.0%)\n2023-07-11 04:39:28.597 [ INFO] Progress -   3.3 MB (8.0%)\n2023-07-11 04:39:28.772 [ INFO] Progress -   3.3 MB (10.0%)\n2023-07-11 04:39:28.772 [ INFO] Progress -   3.3 MB (12.1%)\n2023-07-11 04:39:28.772 [ INFO] Progress -   3.3 MB (14.1%)\n2023-07-11 04:39:28.773 [ INFO] Progress -   3.3 MB (16.1%)\n2023-07-11 04:39:28.773 [ INFO] Progress -   3.3 MB (18.1%)\n2023-07-11 04:39:28.947 [ INFO] Progress -   3.3 MB (20.1%)\n2023-07-11 04:39:28.947 [ INFO] Progress -   3.3 MB (22.1%)\n2023-07-11 04:39:28.947 [ INFO] Progress -   3.3 MB (24.1%)\n2023-07-11 04:39:28.948 [ INFO] Progress -   3.3 MB (26.1%)\n2023-07-11 04:39:28.948 [ INFO] Progress -   3.3 MB (28.1%)\n2023-07-11 04:39:28.948 [ INFO] Progress -   3.3 MB (30.1%)\n2023-07-11 04:39:29.122 [ INFO] Progress -   3.3 MB (32.2%)\n2023-07-11 04:39:29.123 [ INFO] Progress -   3.3 MB (34.2%)\n2023-07-11 04:39:29.123 [ INFO] Progress -   3.3 MB (36.2%)\n2023-07-11 04:39:29.124 [ INFO] Progress -   3.3 MB (38.2%)\n2023-07-11 04:39:29.124 [ INFO] Progress -   3.3 MB (40.2%)\n2023-07-11 04:39:29.124 [ INFO] Progress -   3.3 MB (42.2%)\n2023-07-11 04:39:29.124 [ INFO] Progress -   3.3 MB (44.2%)\n2023-07-11 04:39:29.125 [ INFO] Progress -   3.3 MB (46.2%)\n2023-07-11 04:39:29.125 [ INFO] Progress -   3.3 MB (48.2%)\n2023-07-11 04:39:29.125 [ INFO] Progress -   3.3 MB (50.2%)\n2023-07-11 04:39:29.125 [ INFO] Progress -   3.3 MB (52.3%)\n2023-07-11 04:39:29.125 [ INFO] Progress -   3.3 MB (54.3%)\n2023-07-11 04:39:29.126 [ INFO] Progress -   3.3 MB (56.3%)\n2023-07-11 04:39:29.126 [ INFO] Progress -   3.3 MB (58.3%)\n2023-07-11 04:39:29.297 [ INFO] Progress -   3.3 MB (60.3%)\n2023-07-11 04:39:29.297 [ INFO] Progress -   3.3 MB (62.3%)\n2023-07-11 04:39:29.297 [ INFO] Progress -   3.3 MB (64.3%)\n2023-07-11 04:39:29.298 [ INFO] Progress -   3.3 MB (66.3%)\n2023-07-11 04:39:29.299 [ INFO] Progress -   3.3 MB (68.3%)\n2023-07-11 04:39:29.299 [ INFO] Progress -   3.3 MB (70.3%)\n2023-07-11 04:39:29.299 [ INFO] Progress -   3.3 MB (72.4%)\n2023-07-11 04:39:29.300 [ INFO] Progress -   3.3 MB (74.4%)\n2023-07-11 04:39:29.300 [ INFO] Progress -   3.3 MB (76.4%)\n2023-07-11 04:39:29.300 [ INFO] Progress -   3.3 MB (78.4%)\n2023-07-11 04:39:29.300 [ INFO] Progress -   3.3 MB (80.4%)\n2023-07-11 04:39:29.301 [ INFO] Progress -   3.3 MB (82.4%)\n2023-07-11 04:39:29.301 [ INFO] Progress -   3.3 MB (84.4%)\n2023-07-11 04:39:29.301 [ INFO] Progress -   3.3 MB (86.4%)\n2023-07-11 04:39:29.301 [ INFO] Progress -   3.3 MB (88.4%)\n2023-07-11 04:39:29.301 [ INFO] Progress -   3.3 MB (90.4%)\n2023-07-11 04:39:29.302 [ INFO] Progress -   3.3 MB (92.5%)\n2023-07-11 04:39:29.302 [ INFO] Progress -   3.3 MB (94.5%)\n2023-07-11 04:39:29.302 [ INFO] Progress -   3.3 MB (96.5%)\n2023-07-11 04:39:29.303 [ INFO] Progress -   3.3 MB (98.5%)\n2023-07-11 04:39:29.303 [ INFO] Progress -   3.3 MB (100.0%)\n2023-07-11 04:39:29.303 [ INFO] Processing  time : 0:00:30.059472\n2023-07-11 04:39:29.303 [ INFO] Downloading time : 0:00:01.406073\n2023-07-11 04:39:29.303 [ INFO] Total time       : 0:00:31.465545\n2023-07-11 04:39:29.303 [ INFO] Download rate    : 1.5 MB/s\n2023-07-11 04:39:29.304 [ INFO] Save into        : motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D/200101.nc\n2023-07-11 04:39:29.334 [ INFO] Done\n2023-07-11 04:39:29.573 [ INFO] Asynchronous mode set\n2023-07-11 04:39:29.574 [ INFO] Authenticating user mphan for service https://my.cmems-du.eu/motu-web/Motu\n2023-07-11 04:39:36.995 [ INFO] Requesting file to download (this can take a while)...\n2023-07-11 04:39:45.826 [ INFO] Authenticating user mphan for service https://my.cmems-du.eu/motu-web/Motu\n2023-07-11 04:40:00.771 [ INFO] The product is ready for download\n2023-07-11 04:40:00.771 [ INFO] Downloading file (this can take a while)...\n2023-07-11 04:40:01.520 [ INFO] File type: application/x-netcdf\n2023-07-11 04:40:01.520 [ INFO] File size: 2.9 MB (2945744 B)\n2023-07-11 04:40:01.521 [ INFO] Downloading file /home/jovyan/shared/minh-notebooks/motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D/200102.nc\n2023-07-11 04:40:01.870 [ INFO] Progress -   2.9 MB (2.2%)\n2023-07-11 04:40:02.045 [ INFO] Progress -   2.9 MB (4.4%)\n2023-07-11 04:40:02.220 [ INFO] Progress -   2.9 MB (6.7%)\n2023-07-11 04:40:02.220 [ INFO] Progress -   2.9 MB (8.9%)\n2023-07-11 04:40:02.221 [ INFO] Progress -   2.9 MB (11.1%)\n2023-07-11 04:40:02.221 [ INFO] Progress -   2.9 MB (13.3%)\n2023-07-11 04:40:02.395 [ INFO] Progress -   2.9 MB (15.6%)\n2023-07-11 04:40:02.396 [ INFO] Progress -   2.9 MB (17.8%)\n2023-07-11 04:40:02.396 [ INFO] Progress -   2.9 MB (20.0%)\n2023-07-11 04:40:02.396 [ INFO] Progress -   2.9 MB (22.2%)\n2023-07-11 04:40:02.397 [ INFO] Progress -   2.9 MB (24.5%)\n2023-07-11 04:40:02.397 [ INFO] Progress -   2.9 MB (26.7%)\n2023-07-11 04:40:02.570 [ INFO] Progress -   2.9 MB (28.9%)\n2023-07-11 04:40:02.571 [ INFO] Progress -   2.9 MB (31.1%)\n2023-07-11 04:40:02.571 [ INFO] Progress -   2.9 MB (33.4%)\n2023-07-11 04:40:02.571 [ INFO] Progress -   2.9 MB (35.6%)\n2023-07-11 04:40:02.572 [ INFO] Progress -   2.9 MB (37.8%)\n2023-07-11 04:40:02.573 [ INFO] Progress -   2.9 MB (40.0%)\n2023-07-11 04:40:02.573 [ INFO] Progress -   2.9 MB (42.3%)\n2023-07-11 04:40:02.573 [ INFO] Progress -   2.9 MB (44.5%)\n2023-07-11 04:40:02.573 [ INFO] Progress -   2.9 MB (46.7%)\n2023-07-11 04:40:02.573 [ INFO] Progress -   2.9 MB (48.9%)\n2023-07-11 04:40:02.574 [ INFO] Progress -   2.9 MB (51.2%)\n2023-07-11 04:40:02.574 [ INFO] Progress -   2.9 MB (53.4%)\n2023-07-11 04:40:02.745 [ INFO] Progress -   2.9 MB (55.6%)\n2023-07-11 04:40:02.746 [ INFO] Progress -   2.9 MB (57.8%)\n2023-07-11 04:40:02.746 [ INFO] Progress -   2.9 MB (60.1%)\n2023-07-11 04:40:02.747 [ INFO] Progress -   2.9 MB (62.3%)\n2023-07-11 04:40:02.747 [ INFO] Progress -   2.9 MB (64.5%)\n2023-07-11 04:40:02.747 [ INFO] Progress -   2.9 MB (66.7%)\n2023-07-11 04:40:02.747 [ INFO] Progress -   2.9 MB (69.0%)\n2023-07-11 04:40:02.748 [ INFO] Progress -   2.9 MB (71.2%)\n2023-07-11 04:40:02.748 [ INFO] Progress -   2.9 MB (73.4%)\n2023-07-11 04:40:02.749 [ INFO] Progress -   2.9 MB (75.6%)\n2023-07-11 04:40:02.749 [ INFO] Progress -   2.9 MB (77.9%)\n2023-07-11 04:40:02.749 [ INFO] Progress -   2.9 MB (80.1%)\n2023-07-11 04:40:02.749 [ INFO] Progress -   2.9 MB (82.3%)\n2023-07-11 04:40:02.750 [ INFO] Progress -   2.9 MB (84.5%)\n2023-07-11 04:40:02.750 [ INFO] Progress -   2.9 MB (86.8%)\n2023-07-11 04:40:02.750 [ INFO] Progress -   2.9 MB (89.0%)\n2023-07-11 04:40:02.750 [ INFO] Progress -   2.9 MB (91.2%)\n2023-07-11 04:40:02.751 [ INFO] Progress -   2.9 MB (93.4%)\n2023-07-11 04:40:02.751 [ INFO] Progress -   2.9 MB (95.7%)\n2023-07-11 04:40:02.751 [ INFO] Progress -   2.9 MB (97.9%)\n2023-07-11 04:40:02.752 [ INFO] Progress -   2.9 MB (100.0%)\n2023-07-11 04:40:02.752 [ INFO] Processing  time : 0:00:31.949474\n2023-07-11 04:40:02.752 [ INFO] Downloading time : 0:00:01.231045\n2023-07-11 04:40:02.752 [ INFO] Total time       : 0:00:33.180519\n2023-07-11 04:40:02.752 [ INFO] Download rate    : 1.5 MB/s\n2023-07-11 04:40:02.752 [ INFO] Save into        : motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D/200102.nc\n2023-07-11 04:40:02.784 [ INFO] Done\n2023-07-11 04:40:03.024 [ INFO] Asynchronous mode set\n2023-07-11 04:40:03.024 [ INFO] Authenticating user mphan for service https://my.cmems-du.eu/motu-web/Motu\n2023-07-11 04:40:12.056 [ INFO] Requesting file to download (this can take a while)...\n2023-07-11 04:40:18.657 [ INFO] Authenticating user mphan for service https://my.cmems-du.eu/motu-web/Motu\n2023-07-11 04:40:33.365 [ INFO] The product is ready for download\n2023-07-11 04:40:33.365 [ INFO] Downloading file (this can take a while)...\n2023-07-11 04:40:34.109 [ INFO] File type: application/x-netcdf\n2023-07-11 04:40:34.109 [ INFO] File size: 3.3 MB (3260684 B)\n2023-07-11 04:40:34.109 [ INFO] Downloading file /home/jovyan/shared/minh-notebooks/motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D/200103.nc\n2023-07-11 04:40:34.460 [ INFO] Progress -   3.3 MB (2.0%)\n2023-07-11 04:40:34.635 [ INFO] Progress -   3.3 MB (4.0%)\n2023-07-11 04:40:34.808 [ INFO] Progress -   3.3 MB (6.0%)\n2023-07-11 04:40:34.810 [ INFO] Progress -   3.3 MB (8.0%)\n2023-07-11 04:40:34.983 [ INFO] Progress -   3.3 MB (10.0%)\n2023-07-11 04:40:34.984 [ INFO] Progress -   3.3 MB (12.1%)\n2023-07-11 04:40:34.984 [ INFO] Progress -   3.3 MB (14.1%)\n2023-07-11 04:40:34.985 [ INFO] Progress -   3.3 MB (16.1%)\n2023-07-11 04:40:34.985 [ INFO] Progress -   3.3 MB (18.1%)\n2023-07-11 04:40:34.986 [ INFO] Progress -   3.3 MB (20.1%)\n2023-07-11 04:40:35.159 [ INFO] Progress -   3.3 MB (22.1%)\n2023-07-11 04:40:35.159 [ INFO] Progress -   3.3 MB (24.1%)\n2023-07-11 04:40:35.159 [ INFO] Progress -   3.3 MB (26.1%)\n2023-07-11 04:40:35.160 [ INFO] Progress -   3.3 MB (28.1%)\n2023-07-11 04:40:35.160 [ INFO] Progress -   3.3 MB (30.1%)\n2023-07-11 04:40:35.160 [ INFO] Progress -   3.3 MB (32.2%)\n2023-07-11 04:40:35.161 [ INFO] Progress -   3.3 MB (34.2%)\n2023-07-11 04:40:35.161 [ INFO] Progress -   3.3 MB (36.2%)\n2023-07-11 04:40:35.162 [ INFO] Progress -   3.3 MB (38.2%)\n2023-07-11 04:40:35.162 [ INFO] Progress -   3.3 MB (40.2%)\n2023-07-11 04:40:35.162 [ INFO] Progress -   3.3 MB (42.2%)\n2023-07-11 04:40:35.334 [ INFO] Progress -   3.3 MB (44.2%)\n2023-07-11 04:40:35.334 [ INFO] Progress -   3.3 MB (46.2%)\n2023-07-11 04:40:35.334 [ INFO] Progress -   3.3 MB (48.2%)\n2023-07-11 04:40:35.335 [ INFO] Progress -   3.3 MB (50.2%)\n2023-07-11 04:40:35.335 [ INFO] Progress -   3.3 MB (52.3%)\n2023-07-11 04:40:35.335 [ INFO] Progress -   3.3 MB (54.3%)\n2023-07-11 04:40:35.335 [ INFO] Progress -   3.3 MB (56.3%)\n2023-07-11 04:40:35.336 [ INFO] Progress -   3.3 MB (58.3%)\n2023-07-11 04:40:35.336 [ INFO] Progress -   3.3 MB (60.3%)\n2023-07-11 04:40:35.336 [ INFO] Progress -   3.3 MB (62.3%)\n2023-07-11 04:40:35.337 [ INFO] Progress -   3.3 MB (64.3%)\n2023-07-11 04:40:35.337 [ INFO] Progress -   3.3 MB (66.3%)\n2023-07-11 04:40:35.338 [ INFO] Progress -   3.3 MB (68.3%)\n2023-07-11 04:40:35.338 [ INFO] Progress -   3.3 MB (70.3%)\n2023-07-11 04:40:35.338 [ INFO] Progress -   3.3 MB (72.4%)\n2023-07-11 04:40:35.338 [ INFO] Progress -   3.3 MB (74.4%)\n2023-07-11 04:40:35.339 [ INFO] Progress -   3.3 MB (76.4%)\n2023-07-11 04:40:35.339 [ INFO] Progress -   3.3 MB (78.4%)\n2023-07-11 04:40:35.339 [ INFO] Progress -   3.3 MB (80.4%)\n2023-07-11 04:40:35.339 [ INFO] Progress -   3.3 MB (82.4%)\n2023-07-11 04:40:35.340 [ INFO] Progress -   3.3 MB (84.4%)\n2023-07-11 04:40:35.340 [ INFO] Progress -   3.3 MB (86.4%)\n2023-07-11 04:40:35.509 [ INFO] Progress -   3.3 MB (88.4%)\n2023-07-11 04:40:35.509 [ INFO] Progress -   3.3 MB (90.4%)\n2023-07-11 04:40:35.509 [ INFO] Progress -   3.3 MB (92.5%)\n2023-07-11 04:40:35.510 [ INFO] Progress -   3.3 MB (94.5%)\n2023-07-11 04:40:35.510 [ INFO] Progress -   3.3 MB (96.5%)\n2023-07-11 04:40:35.511 [ INFO] Progress -   3.3 MB (98.5%)\n2023-07-11 04:40:35.511 [ INFO] Progress -   3.3 MB (100.0%)\n2023-07-11 04:40:35.511 [ INFO] Processing  time : 0:00:31.085699\n2023-07-11 04:40:35.511 [ INFO] Downloading time : 0:00:01.401936\n2023-07-11 04:40:35.511 [ INFO] Total time       : 0:00:32.487635\n2023-07-11 04:40:35.511 [ INFO] Download rate    : 1.5 MB/s\n2023-07-11 04:40:35.511 [ INFO] Save into        : motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D/200103.nc\n2023-07-11 04:40:35.541 [ INFO] Done\n2023-07-11 04:40:35.783 [ INFO] Asynchronous mode set\n2023-07-11 04:40:35.783 [ INFO] Authenticating user mphan for service https://my.cmems-du.eu/motu-web/Motu\n2023-07-11 04:40:42.416 [ INFO] Requesting file to download (this can take a while)...\n2023-07-11 04:40:51.415 [ INFO] Authenticating user mphan for service https://my.cmems-du.eu/motu-web/Motu\n2023-07-11 04:41:07.906 [ INFO] The product is ready for download\n2023-07-11 04:41:07.906 [ INFO] Downloading file (this can take a while)...\n2023-07-11 04:41:08.658 [ INFO] File type: application/x-netcdf\n2023-07-11 04:41:08.658 [ INFO] File size: 3.2 MB (3155704 B)\n2023-07-11 04:41:08.658 [ INFO] Downloading file /home/jovyan/shared/minh-notebooks/motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D/200104.nc\n2023-07-11 04:41:09.007 [ INFO] Progress -   3.2 MB (2.1%)\n2023-07-11 04:41:09.182 [ INFO] Progress -   3.2 MB (4.2%)\n2023-07-11 04:41:09.183 [ INFO] Progress -   3.2 MB (6.2%)\n2023-07-11 04:41:09.357 [ INFO] Progress -   3.2 MB (8.3%)\n2023-07-11 04:41:09.358 [ INFO] Progress -   3.2 MB (10.4%)\n2023-07-11 04:41:09.358 [ INFO] Progress -   3.2 MB (12.5%)\n2023-07-11 04:41:09.532 [ INFO] Progress -   3.2 MB (14.5%)\n2023-07-11 04:41:09.532 [ INFO] Progress -   3.2 MB (16.6%)\n2023-07-11 04:41:09.533 [ INFO] Progress -   3.2 MB (18.7%)\n2023-07-11 04:41:09.533 [ INFO] Progress -   3.2 MB (20.8%)\n2023-07-11 04:41:09.533 [ INFO] Progress -   3.2 MB (22.8%)\n2023-07-11 04:41:09.534 [ INFO] Progress -   3.2 MB (24.9%)\n2023-07-11 04:41:09.534 [ INFO] Progress -   3.2 MB (27.0%)\n2023-07-11 04:41:09.707 [ INFO] Progress -   3.2 MB (29.1%)\n2023-07-11 04:41:09.708 [ INFO] Progress -   3.2 MB (31.2%)\n2023-07-11 04:41:09.708 [ INFO] Progress -   3.2 MB (33.2%)\n2023-07-11 04:41:09.709 [ INFO] Progress -   3.2 MB (35.3%)\n2023-07-11 04:41:09.709 [ INFO] Progress -   3.2 MB (37.4%)\n2023-07-11 04:41:09.710 [ INFO] Progress -   3.2 MB (39.5%)\n2023-07-11 04:41:09.710 [ INFO] Progress -   3.2 MB (41.5%)\n2023-07-11 04:41:09.710 [ INFO] Progress -   3.2 MB (43.6%)\n2023-07-11 04:41:09.710 [ INFO] Progress -   3.2 MB (45.7%)\n2023-07-11 04:41:09.710 [ INFO] Progress -   3.2 MB (47.8%)\n2023-07-11 04:41:09.711 [ INFO] Progress -   3.2 MB (49.8%)\n2023-07-11 04:41:09.711 [ INFO] Progress -   3.2 MB (51.9%)\n2023-07-11 04:41:09.711 [ INFO] Progress -   3.2 MB (54.0%)\n2023-07-11 04:41:09.711 [ INFO] Progress -   3.2 MB (56.1%)\n2023-07-11 04:41:09.882 [ INFO] Progress -   3.2 MB (58.1%)\n2023-07-11 04:41:09.883 [ INFO] Progress -   3.2 MB (60.2%)\n2023-07-11 04:41:09.883 [ INFO] Progress -   3.2 MB (62.3%)\n2023-07-11 04:41:09.883 [ INFO] Progress -   3.2 MB (64.4%)\n2023-07-11 04:41:09.884 [ INFO] Progress -   3.2 MB (66.5%)\n2023-07-11 04:41:09.884 [ INFO] Progress -   3.2 MB (68.5%)\n2023-07-11 04:41:09.885 [ INFO] Progress -   3.2 MB (70.6%)\n2023-07-11 04:41:09.885 [ INFO] Progress -   3.2 MB (72.7%)\n2023-07-11 04:41:09.885 [ INFO] Progress -   3.2 MB (74.8%)\n2023-07-11 04:41:09.885 [ INFO] Progress -   3.2 MB (76.8%)\n2023-07-11 04:41:09.886 [ INFO] Progress -   3.2 MB (78.9%)\n2023-07-11 04:41:09.886 [ INFO] Progress -   3.2 MB (81.0%)\n2023-07-11 04:41:09.886 [ INFO] Progress -   3.2 MB (83.1%)\n2023-07-11 04:41:09.886 [ INFO] Progress -   3.2 MB (85.1%)\n2023-07-11 04:41:09.887 [ INFO] Progress -   3.2 MB (87.2%)\n2023-07-11 04:41:09.887 [ INFO] Progress -   3.2 MB (89.3%)\n2023-07-11 04:41:09.887 [ INFO] Progress -   3.2 MB (91.4%)\n2023-07-11 04:41:09.887 [ INFO] Progress -   3.2 MB (93.5%)\n2023-07-11 04:41:09.888 [ INFO] Progress -   3.2 MB (95.5%)\n2023-07-11 04:41:09.888 [ INFO] Progress -   3.2 MB (97.6%)\n2023-07-11 04:41:09.888 [ INFO] Progress -   3.2 MB (99.7%)\n2023-07-11 04:41:09.889 [ INFO] Progress -   3.2 MB (100.0%)\n2023-07-11 04:41:09.889 [ INFO] Processing  time : 0:00:32.877246\n2023-07-11 04:41:09.889 [ INFO] Downloading time : 0:00:01.230603\n2023-07-11 04:41:09.889 [ INFO] Total time       : 0:00:34.107849\n2023-07-11 04:41:09.889 [ INFO] Download rate    : 1.6 MB/s\n2023-07-11 04:41:09.889 [ INFO] Save into        : motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D/200104.nc\n2023-07-11 04:41:09.919 [ INFO] Done\n2023-07-11 04:41:10.168 [ INFO] Asynchronous mode set\n2023-07-11 04:41:10.169 [ INFO] Authenticating user mphan for service https://my.cmems-du.eu/motu-web/Motu\n2023-07-11 04:41:17.159 [ INFO] Requesting file to download (this can take a while)...\n2023-07-11 04:41:23.689 [ INFO] Authenticating user mphan for service https://my.cmems-du.eu/motu-web/Motu\n2023-07-11 04:41:40.330 [ INFO] The product is ready for download\n2023-07-11 04:41:40.330 [ INFO] Downloading file (this can take a while)...\n2023-07-11 04:41:41.240 [ INFO] File type: application/x-netcdf\n2023-07-11 04:41:41.240 [ INFO] File size: 3.3 MB (3260684 B)\n2023-07-11 04:41:41.240 [ INFO] Downloading file /home/jovyan/shared/minh-notebooks/motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D/200105.nc\n2023-07-11 04:41:41.413 [ INFO] Progress -   3.3 MB (2.0%)\n2023-07-11 04:41:41.586 [ INFO] Progress -   3.3 MB (4.0%)\n2023-07-11 04:41:41.756 [ INFO] Progress -   3.3 MB (6.0%)\n2023-07-11 04:41:41.758 [ INFO] Progress -   3.3 MB (8.0%)\n2023-07-11 04:41:41.758 [ INFO] Progress -   3.3 MB (10.0%)\n2023-07-11 04:41:41.929 [ INFO] Progress -   3.3 MB (12.1%)\n2023-07-11 04:41:41.929 [ INFO] Progress -   3.3 MB (14.1%)\n2023-07-11 04:41:41.931 [ INFO] Progress -   3.3 MB (16.1%)\n2023-07-11 04:41:41.931 [ INFO] Progress -   3.3 MB (18.1%)\n2023-07-11 04:41:41.931 [ INFO] Progress -   3.3 MB (20.1%)\n2023-07-11 04:41:41.931 [ INFO] Progress -   3.3 MB (22.1%)\n2023-07-11 04:41:41.932 [ INFO] Progress -   3.3 MB (24.1%)\n2023-07-11 04:41:42.101 [ INFO] Progress -   3.3 MB (26.1%)\n2023-07-11 04:41:42.102 [ INFO] Progress -   3.3 MB (28.1%)\n2023-07-11 04:41:42.103 [ INFO] Progress -   3.3 MB (30.1%)\n2023-07-11 04:41:42.103 [ INFO] Progress -   3.3 MB (32.2%)\n2023-07-11 04:41:42.104 [ INFO] Progress -   3.3 MB (34.2%)\n2023-07-11 04:41:42.104 [ INFO] Progress -   3.3 MB (36.2%)\n2023-07-11 04:41:42.105 [ INFO] Progress -   3.3 MB (38.2%)\n2023-07-11 04:41:42.105 [ INFO] Progress -   3.3 MB (40.2%)\n2023-07-11 04:41:42.105 [ INFO] Progress -   3.3 MB (42.2%)\n2023-07-11 04:41:42.105 [ INFO] Progress -   3.3 MB (44.2%)\n2023-07-11 04:41:42.106 [ INFO] Progress -   3.3 MB (46.2%)\n2023-07-11 04:41:42.106 [ INFO] Progress -   3.3 MB (48.2%)\n2023-07-11 04:41:42.274 [ INFO] Progress -   3.3 MB (50.2%)\n2023-07-11 04:41:42.274 [ INFO] Progress -   3.3 MB (52.3%)\n2023-07-11 04:41:42.274 [ INFO] Progress -   3.3 MB (54.3%)\n2023-07-11 04:41:42.275 [ INFO] Progress -   3.3 MB (56.3%)\n2023-07-11 04:41:42.275 [ INFO] Progress -   3.3 MB (58.3%)\n2023-07-11 04:41:42.275 [ INFO] Progress -   3.3 MB (60.3%)\n2023-07-11 04:41:42.276 [ INFO] Progress -   3.3 MB (62.3%)\n2023-07-11 04:41:42.277 [ INFO] Progress -   3.3 MB (64.3%)\n2023-07-11 04:41:42.277 [ INFO] Progress -   3.3 MB (66.3%)\n2023-07-11 04:41:42.278 [ INFO] Progress -   3.3 MB (68.3%)\n2023-07-11 04:41:42.278 [ INFO] Progress -   3.3 MB (70.3%)\n2023-07-11 04:41:42.278 [ INFO] Progress -   3.3 MB (72.4%)\n2023-07-11 04:41:42.278 [ INFO] Progress -   3.3 MB (74.4%)\n2023-07-11 04:41:42.279 [ INFO] Progress -   3.3 MB (76.4%)\n2023-07-11 04:41:42.279 [ INFO] Progress -   3.3 MB (78.4%)\n2023-07-11 04:41:42.279 [ INFO] Progress -   3.3 MB (80.4%)\n2023-07-11 04:41:42.279 [ INFO] Progress -   3.3 MB (82.4%)\n2023-07-11 04:41:42.279 [ INFO] Progress -   3.3 MB (84.4%)\n2023-07-11 04:41:42.280 [ INFO] Progress -   3.3 MB (86.4%)\n2023-07-11 04:41:42.280 [ INFO] Progress -   3.3 MB (88.4%)\n2023-07-11 04:41:42.280 [ INFO] Progress -   3.3 MB (90.4%)\n2023-07-11 04:41:42.280 [ INFO] Progress -   3.3 MB (92.5%)\n2023-07-11 04:41:42.281 [ INFO] Progress -   3.3 MB (94.5%)\n2023-07-11 04:41:42.281 [ INFO] Progress -   3.3 MB (96.5%)\n2023-07-11 04:41:42.282 [ INFO] Progress -   3.3 MB (98.5%)\n2023-07-11 04:41:42.282 [ INFO] Progress -   3.3 MB (100.0%)\n2023-07-11 04:41:42.282 [ INFO] Processing  time : 0:00:31.073788\n2023-07-11 04:41:42.282 [ INFO] Downloading time : 0:00:01.041936\n2023-07-11 04:41:42.282 [ INFO] Total time       : 0:00:32.115724\n2023-07-11 04:41:42.282 [ INFO] Download rate    : 1.7 MB/s\n2023-07-11 04:41:42.282 [ INFO] Save into        : motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D/200105.nc\n2023-07-11 04:41:42.313 [ INFO] Done\n2023-07-11 04:41:42.557 [ INFO] Asynchronous mode set\n2023-07-11 04:41:42.557 [ INFO] Authenticating user mphan for service https://my.cmems-du.eu/motu-web/Motu\n2023-07-11 04:41:51.498 [ INFO] Requesting file to download (this can take a while)...\n2023-07-11 04:41:58.720 [ INFO] Authenticating user mphan for service https://my.cmems-du.eu/motu-web/Motu\n2023-07-11 04:42:13.967 [ INFO] The product is ready for download\n2023-07-11 04:42:13.967 [ INFO] Downloading file (this can take a while)...\n2023-07-11 04:42:14.703 [ INFO] File type: application/x-netcdf\n2023-07-11 04:42:14.703 [ INFO] File size: 3.2 MB (3155704 B)\n2023-07-11 04:42:14.704 [ INFO] Downloading file /home/jovyan/shared/minh-notebooks/motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D/200106.nc\n2023-07-11 04:42:15.048 [ INFO] Progress -   3.2 MB (2.1%)\n2023-07-11 04:42:15.220 [ INFO] Progress -   3.2 MB (4.2%)\n2023-07-11 04:42:15.221 [ INFO] Progress -   3.2 MB (6.2%)\n2023-07-11 04:42:15.392 [ INFO] Progress -   3.2 MB (8.3%)\n2023-07-11 04:42:15.393 [ INFO] Progress -   3.2 MB (10.4%)\n2023-07-11 04:42:15.394 [ INFO] Progress -   3.2 MB (12.5%)\n2023-07-11 04:42:15.564 [ INFO] Progress -   3.2 MB (14.5%)\n2023-07-11 04:42:15.565 [ INFO] Progress -   3.2 MB (16.6%)\n2023-07-11 04:42:15.565 [ INFO] Progress -   3.2 MB (18.7%)\n2023-07-11 04:42:15.565 [ INFO] Progress -   3.2 MB (20.8%)\n2023-07-11 04:42:15.566 [ INFO] Progress -   3.2 MB (22.8%)\n2023-07-11 04:42:15.566 [ INFO] Progress -   3.2 MB (24.9%)\n2023-07-11 04:42:15.566 [ INFO] Progress -   3.2 MB (27.0%)\n2023-07-11 04:42:15.736 [ INFO] Progress -   3.2 MB (29.1%)\n2023-07-11 04:42:15.737 [ INFO] Progress -   3.2 MB (31.2%)\n2023-07-11 04:42:15.737 [ INFO] Progress -   3.2 MB (33.2%)\n2023-07-11 04:42:15.739 [ INFO] Progress -   3.2 MB (35.3%)\n2023-07-11 04:42:15.739 [ INFO] Progress -   3.2 MB (37.4%)\n2023-07-11 04:42:15.739 [ INFO] Progress -   3.2 MB (39.5%)\n2023-07-11 04:42:15.739 [ INFO] Progress -   3.2 MB (41.5%)\n2023-07-11 04:42:15.740 [ INFO] Progress -   3.2 MB (43.6%)\n2023-07-11 04:42:15.740 [ INFO] Progress -   3.2 MB (45.7%)\n2023-07-11 04:42:15.740 [ INFO] Progress -   3.2 MB (47.8%)\n2023-07-11 04:42:15.740 [ INFO] Progress -   3.2 MB (49.8%)\n2023-07-11 04:42:15.741 [ INFO] Progress -   3.2 MB (51.9%)\n2023-07-11 04:42:15.741 [ INFO] Progress -   3.2 MB (54.0%)\n2023-07-11 04:42:15.741 [ INFO] Progress -   3.2 MB (56.1%)\n2023-07-11 04:42:15.909 [ INFO] Progress -   3.2 MB (58.1%)\n2023-07-11 04:42:15.909 [ INFO] Progress -   3.2 MB (60.2%)\n2023-07-11 04:42:15.910 [ INFO] Progress -   3.2 MB (62.3%)\n2023-07-11 04:42:15.910 [ INFO] Progress -   3.2 MB (64.4%)\n2023-07-11 04:42:15.910 [ INFO] Progress -   3.2 MB (66.5%)\n2023-07-11 04:42:15.911 [ INFO] Progress -   3.2 MB (68.5%)\n2023-07-11 04:42:15.911 [ INFO] Progress -   3.2 MB (70.6%)\n2023-07-11 04:42:15.911 [ INFO] Progress -   3.2 MB (72.7%)\n2023-07-11 04:42:15.912 [ INFO] Progress -   3.2 MB (74.8%)\n2023-07-11 04:42:15.912 [ INFO] Progress -   3.2 MB (76.8%)\n2023-07-11 04:42:15.912 [ INFO] Progress -   3.2 MB (78.9%)\n2023-07-11 04:42:15.912 [ INFO] Progress -   3.2 MB (81.0%)\n2023-07-11 04:42:15.913 [ INFO] Progress -   3.2 MB (83.1%)\n2023-07-11 04:42:15.913 [ INFO] Progress -   3.2 MB (85.1%)\n2023-07-11 04:42:15.913 [ INFO] Progress -   3.2 MB (87.2%)\n2023-07-11 04:42:15.913 [ INFO] Progress -   3.2 MB (89.3%)\n2023-07-11 04:42:15.914 [ INFO] Progress -   3.2 MB (91.4%)\n2023-07-11 04:42:15.914 [ INFO] Progress -   3.2 MB (93.5%)\n2023-07-11 04:42:15.914 [ INFO] Progress -   3.2 MB (95.5%)\n2023-07-11 04:42:15.914 [ INFO] Progress -   3.2 MB (97.6%)\n2023-07-11 04:42:15.914 [ INFO] Progress -   3.2 MB (99.7%)\n2023-07-11 04:42:15.915 [ INFO] Progress -   3.2 MB (100.0%)\n2023-07-11 04:42:15.915 [ INFO] Processing  time : 0:00:32.148979\n2023-07-11 04:42:15.915 [ INFO] Downloading time : 0:00:01.211730\n2023-07-11 04:42:15.915 [ INFO] Total time       : 0:00:33.360709\n2023-07-11 04:42:15.915 [ INFO] Download rate    : 1.6 MB/s\n2023-07-11 04:42:15.915 [ INFO] Save into        : motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D/200106.nc\n2023-07-11 04:42:15.945 [ INFO] Done\n2023-07-11 04:42:16.186 [ INFO] Asynchronous mode set\n2023-07-11 04:42:16.186 [ INFO] Authenticating user mphan for service https://my.cmems-du.eu/motu-web/Motu\n2023-07-11 04:42:22.965 [ INFO] Requesting file to download (this can take a while)...\n2023-07-11 04:42:29.614 [ INFO] Authenticating user mphan for service https://my.cmems-du.eu/motu-web/Motu\n2023-07-11 04:42:44.253 [ INFO] The product is ready for download\n2023-07-11 04:42:44.254 [ INFO] Downloading file (this can take a while)...\n2023-07-11 04:42:45.157 [ INFO] File type: application/x-netcdf\n2023-07-11 04:42:45.157 [ INFO] File size: 3.3 MB (3260684 B)\n2023-07-11 04:42:45.157 [ INFO] Downloading file /home/jovyan/shared/minh-notebooks/motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D/200107.nc\n2023-07-11 04:42:45.330 [ INFO] Progress -   3.3 MB (2.0%)\n2023-07-11 04:42:45.503 [ INFO] Progress -   3.3 MB (4.0%)\n2023-07-11 04:42:45.673 [ INFO] Progress -   3.3 MB (6.0%)\n2023-07-11 04:42:45.675 [ INFO] Progress -   3.3 MB (8.0%)\n2023-07-11 04:42:45.675 [ INFO] Progress -   3.3 MB (10.0%)\n2023-07-11 04:42:45.846 [ INFO] Progress -   3.3 MB (12.1%)\n2023-07-11 04:42:45.846 [ INFO] Progress -   3.3 MB (14.1%)\n2023-07-11 04:42:45.848 [ INFO] Progress -   3.3 MB (16.1%)\n2023-07-11 04:42:45.848 [ INFO] Progress -   3.3 MB (18.1%)\n2023-07-11 04:42:45.848 [ INFO] Progress -   3.3 MB (20.1%)\n2023-07-11 04:42:45.848 [ INFO] Progress -   3.3 MB (22.1%)\n2023-07-11 04:42:45.849 [ INFO] Progress -   3.3 MB (24.1%)\n2023-07-11 04:42:46.018 [ INFO] Progress -   3.3 MB (26.1%)\n2023-07-11 04:42:46.019 [ INFO] Progress -   3.3 MB (28.1%)\n2023-07-11 04:42:46.020 [ INFO] Progress -   3.3 MB (30.1%)\n2023-07-11 04:42:46.020 [ INFO] Progress -   3.3 MB (32.2%)\n2023-07-11 04:42:46.021 [ INFO] Progress -   3.3 MB (34.2%)\n2023-07-11 04:42:46.021 [ INFO] Progress -   3.3 MB (36.2%)\n2023-07-11 04:42:46.022 [ INFO] Progress -   3.3 MB (38.2%)\n2023-07-11 04:42:46.022 [ INFO] Progress -   3.3 MB (40.2%)\n2023-07-11 04:42:46.022 [ INFO] Progress -   3.3 MB (42.2%)\n2023-07-11 04:42:46.022 [ INFO] Progress -   3.3 MB (44.2%)\n2023-07-11 04:42:46.023 [ INFO] Progress -   3.3 MB (46.2%)\n2023-07-11 04:42:46.023 [ INFO] Progress -   3.3 MB (48.2%)\n2023-07-11 04:42:46.190 [ INFO] Progress -   3.3 MB (50.2%)\n2023-07-11 04:42:46.191 [ INFO] Progress -   3.3 MB (52.3%)\n2023-07-11 04:42:46.191 [ INFO] Progress -   3.3 MB (54.3%)\n2023-07-11 04:42:46.191 [ INFO] Progress -   3.3 MB (56.3%)\n2023-07-11 04:42:46.192 [ INFO] Progress -   3.3 MB (58.3%)\n2023-07-11 04:42:46.193 [ INFO] Progress -   3.3 MB (60.3%)\n2023-07-11 04:42:46.193 [ INFO] Progress -   3.3 MB (62.3%)\n2023-07-11 04:42:46.193 [ INFO] Progress -   3.3 MB (64.3%)\n2023-07-11 04:42:46.194 [ INFO] Progress -   3.3 MB (66.3%)\n2023-07-11 04:42:46.194 [ INFO] Progress -   3.3 MB (68.3%)\n2023-07-11 04:42:46.195 [ INFO] Progress -   3.3 MB (70.3%)\n2023-07-11 04:42:46.195 [ INFO] Progress -   3.3 MB (72.4%)\n2023-07-11 04:42:46.195 [ INFO] Progress -   3.3 MB (74.4%)\n2023-07-11 04:42:46.195 [ INFO] Progress -   3.3 MB (76.4%)\n2023-07-11 04:42:46.196 [ INFO] Progress -   3.3 MB (78.4%)\n2023-07-11 04:42:46.196 [ INFO] Progress -   3.3 MB (80.4%)\n2023-07-11 04:42:46.196 [ INFO] Progress -   3.3 MB (82.4%)\n2023-07-11 04:42:46.196 [ INFO] Progress -   3.3 MB (84.4%)\n2023-07-11 04:42:46.197 [ INFO] Progress -   3.3 MB (86.4%)\n2023-07-11 04:42:46.197 [ INFO] Progress -   3.3 MB (88.4%)\n2023-07-11 04:42:46.197 [ INFO] Progress -   3.3 MB (90.4%)\n2023-07-11 04:42:46.197 [ INFO] Progress -   3.3 MB (92.5%)\n2023-07-11 04:42:46.198 [ INFO] Progress -   3.3 MB (94.5%)\n2023-07-11 04:42:46.198 [ INFO] Progress -   3.3 MB (96.5%)\n2023-07-11 04:42:46.199 [ INFO] Progress -   3.3 MB (98.5%)\n2023-07-11 04:42:46.199 [ INFO] Progress -   3.3 MB (100.0%)\n2023-07-11 04:42:46.199 [ INFO] Processing  time : 0:00:28.973583\n2023-07-11 04:42:46.199 [ INFO] Downloading time : 0:00:01.042066\n2023-07-11 04:42:46.199 [ INFO] Total time       : 0:00:30.015649\n2023-07-11 04:42:46.199 [ INFO] Download rate    : 1.7 MB/s\n2023-07-11 04:42:46.199 [ INFO] Save into        : motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D/200107.nc\n2023-07-11 04:42:46.232 [ INFO] Done\n2023-07-11 04:42:46.476 [ INFO] Asynchronous mode set\n2023-07-11 04:42:46.476 [ INFO] Authenticating user mphan for service https://my.cmems-du.eu/motu-web/Motu\n2023-07-11 04:42:52.332 [ INFO] Requesting file to download (this can take a while)...\n2023-07-11 04:42:59.632 [ INFO] Authenticating user mphan for service https://my.cmems-du.eu/motu-web/Motu\n2023-07-11 04:43:13.124 [ INFO] The product is ready for download\n2023-07-11 04:43:13.124 [ INFO] Downloading file (this can take a while)...\n2023-07-11 04:43:13.856 [ INFO] File type: application/x-netcdf\n2023-07-11 04:43:13.857 [ INFO] File size: 3.3 MB (3260684 B)\n2023-07-11 04:43:13.857 [ INFO] Downloading file /home/jovyan/shared/minh-notebooks/motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D/200108.nc\n2023-07-11 04:43:14.200 [ INFO] Progress -   3.3 MB (2.0%)\n2023-07-11 04:43:14.373 [ INFO] Progress -   3.3 MB (4.0%)\n2023-07-11 04:43:14.545 [ INFO] Progress -   3.3 MB (6.0%)\n2023-07-11 04:43:14.546 [ INFO] Progress -   3.3 MB (8.0%)\n2023-07-11 04:43:14.718 [ INFO] Progress -   3.3 MB (10.0%)\n2023-07-11 04:43:14.719 [ INFO] Progress -   3.3 MB (12.1%)\n2023-07-11 04:43:14.719 [ INFO] Progress -   3.3 MB (14.1%)\n2023-07-11 04:43:14.719 [ INFO] Progress -   3.3 MB (16.1%)\n2023-07-11 04:43:14.720 [ INFO] Progress -   3.3 MB (18.1%)\n2023-07-11 04:43:14.890 [ INFO] Progress -   3.3 MB (20.1%)\n2023-07-11 04:43:14.891 [ INFO] Progress -   3.3 MB (22.1%)\n2023-07-11 04:43:14.891 [ INFO] Progress -   3.3 MB (24.1%)\n2023-07-11 04:43:14.892 [ INFO] Progress -   3.3 MB (26.1%)\n2023-07-11 04:43:14.893 [ INFO] Progress -   3.3 MB (28.1%)\n2023-07-11 04:43:14.893 [ INFO] Progress -   3.3 MB (30.1%)\n2023-07-11 04:43:14.893 [ INFO] Progress -   3.3 MB (32.2%)\n2023-07-11 04:43:14.895 [ INFO] Progress -   3.3 MB (34.2%)\n2023-07-11 04:43:14.895 [ INFO] Progress -   3.3 MB (36.2%)\n2023-07-11 04:43:15.062 [ INFO] Progress -   3.3 MB (38.2%)\n2023-07-11 04:43:15.063 [ INFO] Progress -   3.3 MB (40.2%)\n2023-07-11 04:43:15.064 [ INFO] Progress -   3.3 MB (42.2%)\n2023-07-11 04:43:15.064 [ INFO] Progress -   3.3 MB (44.2%)\n2023-07-11 04:43:15.064 [ INFO] Progress -   3.3 MB (46.2%)\n2023-07-11 04:43:15.064 [ INFO] Progress -   3.3 MB (48.2%)\n2023-07-11 04:43:15.065 [ INFO] Progress -   3.3 MB (50.2%)\n2023-07-11 04:43:15.065 [ INFO] Progress -   3.3 MB (52.3%)\n2023-07-11 04:43:15.066 [ INFO] Progress -   3.3 MB (54.3%)\n2023-07-11 04:43:15.066 [ INFO] Progress -   3.3 MB (56.3%)\n2023-07-11 04:43:15.067 [ INFO] Progress -   3.3 MB (58.3%)\n2023-07-11 04:43:15.067 [ INFO] Progress -   3.3 MB (60.3%)\n2023-07-11 04:43:15.067 [ INFO] Progress -   3.3 MB (62.3%)\n2023-07-11 04:43:15.068 [ INFO] Progress -   3.3 MB (64.3%)\n2023-07-11 04:43:15.068 [ INFO] Progress -   3.3 MB (66.3%)\n2023-07-11 04:43:15.069 [ INFO] Progress -   3.3 MB (68.3%)\n2023-07-11 04:43:15.069 [ INFO] Progress -   3.3 MB (70.3%)\n2023-07-11 04:43:15.069 [ INFO] Progress -   3.3 MB (72.4%)\n2023-07-11 04:43:15.069 [ INFO] Progress -   3.3 MB (74.4%)\n2023-07-11 04:43:15.070 [ INFO] Progress -   3.3 MB (76.4%)\n2023-07-11 04:43:15.235 [ INFO] Progress -   3.3 MB (78.4%)\n2023-07-11 04:43:15.236 [ INFO] Progress -   3.3 MB (80.4%)\n2023-07-11 04:43:15.236 [ INFO] Progress -   3.3 MB (82.4%)\n2023-07-11 04:43:15.236 [ INFO] Progress -   3.3 MB (84.4%)\n2023-07-11 04:43:15.236 [ INFO] Progress -   3.3 MB (86.4%)\n2023-07-11 04:43:15.237 [ INFO] Progress -   3.3 MB (88.4%)\n2023-07-11 04:43:15.237 [ INFO] Progress -   3.3 MB (90.4%)\n2023-07-11 04:43:15.237 [ INFO] Progress -   3.3 MB (92.5%)\n2023-07-11 04:43:15.237 [ INFO] Progress -   3.3 MB (94.5%)\n2023-07-11 04:43:15.238 [ INFO] Progress -   3.3 MB (96.5%)\n2023-07-11 04:43:15.239 [ INFO] Progress -   3.3 MB (98.5%)\n2023-07-11 04:43:15.239 [ INFO] Progress -   3.3 MB (100.0%)\n2023-07-11 04:43:15.239 [ INFO] Processing  time : 0:00:27.384750\n2023-07-11 04:43:15.239 [ INFO] Downloading time : 0:00:01.382641\n2023-07-11 04:43:15.239 [ INFO] Total time       : 0:00:28.767391\n2023-07-11 04:43:15.239 [ INFO] Download rate    : 1.5 MB/s\n2023-07-11 04:43:15.239 [ INFO] Save into        : motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D/200108.nc\n2023-07-11 04:43:15.269 [ INFO] Done\n2023-07-11 04:43:15.513 [ INFO] Asynchronous mode set\n2023-07-11 04:43:15.513 [ INFO] Authenticating user mphan for service https://my.cmems-du.eu/motu-web/Motu\n2023-07-11 04:43:22.274 [ INFO] Requesting file to download (this can take a while)...\n2023-07-11 04:43:29.643 [ INFO] Authenticating user mphan for service https://my.cmems-du.eu/motu-web/Motu\n2023-07-11 04:43:47.109 [ INFO] The product is ready for download\n2023-07-11 04:43:47.109 [ INFO] Downloading file (this can take a while)...\n2023-07-11 04:43:47.846 [ INFO] File type: application/x-netcdf\n2023-07-11 04:43:47.846 [ INFO] File size: 3.2 MB (3155704 B)\n2023-07-11 04:43:47.847 [ INFO] Downloading file /home/jovyan/shared/minh-notebooks/motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D/200109.nc\n2023-07-11 04:43:48.190 [ INFO] Progress -   3.2 MB (2.1%)\n2023-07-11 04:43:48.363 [ INFO] Progress -   3.2 MB (4.2%)\n2023-07-11 04:43:48.535 [ INFO] Progress -   3.2 MB (6.2%)\n2023-07-11 04:43:48.536 [ INFO] Progress -   3.2 MB (8.3%)\n2023-07-11 04:43:48.708 [ INFO] Progress -   3.2 MB (10.4%)\n2023-07-11 04:43:48.708 [ INFO] Progress -   3.2 MB (12.5%)\n2023-07-11 04:43:48.708 [ INFO] Progress -   3.2 MB (14.5%)\n2023-07-11 04:43:48.709 [ INFO] Progress -   3.2 MB (16.6%)\n2023-07-11 04:43:48.709 [ INFO] Progress -   3.2 MB (18.7%)\n2023-07-11 04:43:48.880 [ INFO] Progress -   3.2 MB (20.8%)\n2023-07-11 04:43:48.880 [ INFO] Progress -   3.2 MB (22.8%)\n2023-07-11 04:43:48.880 [ INFO] Progress -   3.2 MB (24.9%)\n2023-07-11 04:43:48.881 [ INFO] Progress -   3.2 MB (27.0%)\n2023-07-11 04:43:48.881 [ INFO] Progress -   3.2 MB (29.1%)\n2023-07-11 04:43:48.881 [ INFO] Progress -   3.2 MB (31.2%)\n2023-07-11 04:43:48.881 [ INFO] Progress -   3.2 MB (33.2%)\n2023-07-11 04:43:48.882 [ INFO] Progress -   3.2 MB (35.3%)\n2023-07-11 04:43:48.883 [ INFO] Progress -   3.2 MB (37.4%)\n2023-07-11 04:43:49.052 [ INFO] Progress -   3.2 MB (39.5%)\n2023-07-11 04:43:49.052 [ INFO] Progress -   3.2 MB (41.5%)\n2023-07-11 04:43:49.053 [ INFO] Progress -   3.2 MB (43.6%)\n2023-07-11 04:43:49.053 [ INFO] Progress -   3.2 MB (45.7%)\n2023-07-11 04:43:49.053 [ INFO] Progress -   3.2 MB (47.8%)\n2023-07-11 04:43:49.053 [ INFO] Progress -   3.2 MB (49.8%)\n2023-07-11 04:43:49.054 [ INFO] Progress -   3.2 MB (51.9%)\n2023-07-11 04:43:49.054 [ INFO] Progress -   3.2 MB (54.0%)\n2023-07-11 04:43:49.054 [ INFO] Progress -   3.2 MB (56.1%)\n2023-07-11 04:43:49.055 [ INFO] Progress -   3.2 MB (58.1%)\n2023-07-11 04:43:49.055 [ INFO] Progress -   3.2 MB (60.2%)\n2023-07-11 04:43:49.055 [ INFO] Progress -   3.2 MB (62.3%)\n2023-07-11 04:43:49.055 [ INFO] Progress -   3.2 MB (64.4%)\n2023-07-11 04:43:49.056 [ INFO] Progress -   3.2 MB (66.5%)\n2023-07-11 04:43:49.056 [ INFO] Progress -   3.2 MB (68.5%)\n2023-07-11 04:43:49.057 [ INFO] Progress -   3.2 MB (70.6%)\n2023-07-11 04:43:49.057 [ INFO] Progress -   3.2 MB (72.7%)\n2023-07-11 04:43:49.057 [ INFO] Progress -   3.2 MB (74.8%)\n2023-07-11 04:43:49.057 [ INFO] Progress -   3.2 MB (76.8%)\n2023-07-11 04:43:49.225 [ INFO] Progress -   3.2 MB (78.9%)\n2023-07-11 04:43:49.225 [ INFO] Progress -   3.2 MB (81.0%)\n2023-07-11 04:43:49.225 [ INFO] Progress -   3.2 MB (83.1%)\n2023-07-11 04:43:49.226 [ INFO] Progress -   3.2 MB (85.1%)\n2023-07-11 04:43:49.226 [ INFO] Progress -   3.2 MB (87.2%)\n2023-07-11 04:43:49.226 [ INFO] Progress -   3.2 MB (89.3%)\n2023-07-11 04:43:49.226 [ INFO] Progress -   3.2 MB (91.4%)\n2023-07-11 04:43:49.227 [ INFO] Progress -   3.2 MB (93.5%)\n2023-07-11 04:43:49.227 [ INFO] Progress -   3.2 MB (95.5%)\n2023-07-11 04:43:49.227 [ INFO] Progress -   3.2 MB (97.6%)\n2023-07-11 04:43:49.227 [ INFO] Progress -   3.2 MB (99.7%)\n2023-07-11 04:43:49.228 [ INFO] Progress -   3.2 MB (100.0%)\n2023-07-11 04:43:49.228 [ INFO] Processing  time : 0:00:32.336252\n2023-07-11 04:43:49.228 [ INFO] Downloading time : 0:00:01.381585\n2023-07-11 04:43:49.228 [ INFO] Total time       : 0:00:33.717837\n2023-07-11 04:43:49.228 [ INFO] Download rate    : 1.5 MB/s\n2023-07-11 04:43:49.228 [ INFO] Save into        : motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D/200109.nc\n2023-07-11 04:43:49.283 [ INFO] Done\n2023-07-11 04:43:49.521 [ INFO] Asynchronous mode set\n2023-07-11 04:43:49.521 [ INFO] Authenticating user mphan for service https://my.cmems-du.eu/motu-web/Motu\n2023-07-11 04:43:58.915 [ INFO] Requesting file to download (this can take a while)...\n2023-07-11 04:44:08.361 [ INFO] Authenticating user mphan for service https://my.cmems-du.eu/motu-web/Motu\n2023-07-11 04:44:23.488 [ INFO] The product is ready for download\n2023-07-11 04:44:23.488 [ INFO] Downloading file (this can take a while)...\n2023-07-11 04:44:24.223 [ INFO] File type: application/x-netcdf\n2023-07-11 04:44:24.223 [ INFO] File size: 3.3 MB (3260684 B)\n2023-07-11 04:44:24.223 [ INFO] Downloading file /home/jovyan/shared/minh-notebooks/motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D/200110.nc\n2023-07-11 04:44:24.568 [ INFO] Progress -   3.3 MB (2.0%)\n2023-07-11 04:44:24.740 [ INFO] Progress -   3.3 MB (4.0%)\n2023-07-11 04:44:24.741 [ INFO] Progress -   3.3 MB (6.0%)\n2023-07-11 04:44:24.913 [ INFO] Progress -   3.3 MB (8.0%)\n2023-07-11 04:44:24.913 [ INFO] Progress -   3.3 MB (10.0%)\n2023-07-11 04:44:24.914 [ INFO] Progress -   3.3 MB (12.1%)\n2023-07-11 04:44:25.084 [ INFO] Progress -   3.3 MB (14.1%)\n2023-07-11 04:44:25.085 [ INFO] Progress -   3.3 MB (16.1%)\n2023-07-11 04:44:25.086 [ INFO] Progress -   3.3 MB (18.1%)\n2023-07-11 04:44:25.086 [ INFO] Progress -   3.3 MB (20.1%)\n2023-07-11 04:44:25.086 [ INFO] Progress -   3.3 MB (22.1%)\n2023-07-11 04:44:25.087 [ INFO] Progress -   3.3 MB (24.1%)\n2023-07-11 04:44:25.087 [ INFO] Progress -   3.3 MB (26.1%)\n2023-07-11 04:44:25.257 [ INFO] Progress -   3.3 MB (28.1%)\n2023-07-11 04:44:25.257 [ INFO] Progress -   3.3 MB (30.1%)\n2023-07-11 04:44:25.258 [ INFO] Progress -   3.3 MB (32.2%)\n2023-07-11 04:44:25.259 [ INFO] Progress -   3.3 MB (34.2%)\n2023-07-11 04:44:25.259 [ INFO] Progress -   3.3 MB (36.2%)\n2023-07-11 04:44:25.260 [ INFO] Progress -   3.3 MB (38.2%)\n2023-07-11 04:44:25.260 [ INFO] Progress -   3.3 MB (40.2%)\n2023-07-11 04:44:25.260 [ INFO] Progress -   3.3 MB (42.2%)\n2023-07-11 04:44:25.260 [ INFO] Progress -   3.3 MB (44.2%)\n2023-07-11 04:44:25.261 [ INFO] Progress -   3.3 MB (46.2%)\n2023-07-11 04:44:25.261 [ INFO] Progress -   3.3 MB (48.2%)\n2023-07-11 04:44:25.261 [ INFO] Progress -   3.3 MB (50.2%)\n2023-07-11 04:44:25.261 [ INFO] Progress -   3.3 MB (52.3%)\n2023-07-11 04:44:25.429 [ INFO] Progress -   3.3 MB (54.3%)\n2023-07-11 04:44:25.429 [ INFO] Progress -   3.3 MB (56.3%)\n2023-07-11 04:44:25.430 [ INFO] Progress -   3.3 MB (58.3%)\n2023-07-11 04:44:25.430 [ INFO] Progress -   3.3 MB (60.3%)\n2023-07-11 04:44:25.430 [ INFO] Progress -   3.3 MB (62.3%)\n2023-07-11 04:44:25.431 [ INFO] Progress -   3.3 MB (64.3%)\n2023-07-11 04:44:25.432 [ INFO] Progress -   3.3 MB (66.3%)\n2023-07-11 04:44:25.432 [ INFO] Progress -   3.3 MB (68.3%)\n2023-07-11 04:44:25.432 [ INFO] Progress -   3.3 MB (70.3%)\n2023-07-11 04:44:25.432 [ INFO] Progress -   3.3 MB (72.4%)\n2023-07-11 04:44:25.433 [ INFO] Progress -   3.3 MB (74.4%)\n2023-07-11 04:44:25.433 [ INFO] Progress -   3.3 MB (76.4%)\n2023-07-11 04:44:25.433 [ INFO] Progress -   3.3 MB (78.4%)\n2023-07-11 04:44:25.433 [ INFO] Progress -   3.3 MB (80.4%)\n2023-07-11 04:44:25.434 [ INFO] Progress -   3.3 MB (82.4%)\n2023-07-11 04:44:25.434 [ INFO] Progress -   3.3 MB (84.4%)\n2023-07-11 04:44:25.434 [ INFO] Progress -   3.3 MB (86.4%)\n2023-07-11 04:44:25.435 [ INFO] Progress -   3.3 MB (88.4%)\n2023-07-11 04:44:25.435 [ INFO] Progress -   3.3 MB (90.4%)\n2023-07-11 04:44:25.435 [ INFO] Progress -   3.3 MB (92.5%)\n2023-07-11 04:44:25.435 [ INFO] Progress -   3.3 MB (94.5%)\n2023-07-11 04:44:25.436 [ INFO] Progress -   3.3 MB (96.5%)\n2023-07-11 04:44:25.436 [ INFO] Progress -   3.3 MB (98.5%)\n2023-07-11 04:44:25.437 [ INFO] Progress -   3.3 MB (100.0%)\n2023-07-11 04:44:25.437 [ INFO] Processing  time : 0:00:34.702582\n2023-07-11 04:44:25.437 [ INFO] Downloading time : 0:00:01.213662\n2023-07-11 04:44:25.437 [ INFO] Total time       : 0:00:35.916244\n2023-07-11 04:44:25.437 [ INFO] Download rate    : 1.7 MB/s\n2023-07-11 04:44:25.437 [ INFO] Save into        : motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D/200110.nc\n2023-07-11 04:44:25.467 [ INFO] Done\n2023-07-11 04:44:25.708 [ INFO] Asynchronous mode set\n2023-07-11 04:44:25.709 [ INFO] Authenticating user mphan for service https://my.cmems-du.eu/motu-web/Motu\n2023-07-11 04:44:33.978 [ INFO] Requesting file to download (this can take a while)...\n2023-07-11 04:44:41.900 [ INFO] Authenticating user mphan for service https://my.cmems-du.eu/motu-web/Motu\n2023-07-11 04:44:56.540 [ INFO] The product is ready for download\n2023-07-11 04:44:56.540 [ INFO] Downloading file (this can take a while)...\n2023-07-11 04:44:57.296 [ INFO] File type: application/x-netcdf\n2023-07-11 04:44:57.297 [ INFO] File size: 3.2 MB (3155704 B)\n2023-07-11 04:44:57.297 [ INFO] Downloading file /home/jovyan/shared/minh-notebooks/motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D/200111.nc\n2023-07-11 04:44:57.640 [ INFO] Progress -   3.2 MB (2.1%)\n2023-07-11 04:44:57.813 [ INFO] Progress -   3.2 MB (4.2%)\n2023-07-11 04:44:57.985 [ INFO] Progress -   3.2 MB (6.2%)\n2023-07-11 04:44:57.986 [ INFO] Progress -   3.2 MB (8.3%)\n2023-07-11 04:44:58.157 [ INFO] Progress -   3.2 MB (10.4%)\n2023-07-11 04:44:58.158 [ INFO] Progress -   3.2 MB (12.5%)\n2023-07-11 04:44:58.158 [ INFO] Progress -   3.2 MB (14.5%)\n2023-07-11 04:44:58.158 [ INFO] Progress -   3.2 MB (16.6%)\n2023-07-11 04:44:58.159 [ INFO] Progress -   3.2 MB (18.7%)\n2023-07-11 04:44:58.330 [ INFO] Progress -   3.2 MB (20.8%)\n2023-07-11 04:44:58.331 [ INFO] Progress -   3.2 MB (22.8%)\n2023-07-11 04:44:58.331 [ INFO] Progress -   3.2 MB (24.9%)\n2023-07-11 04:44:58.331 [ INFO] Progress -   3.2 MB (27.0%)\n2023-07-11 04:44:58.332 [ INFO] Progress -   3.2 MB (29.1%)\n2023-07-11 04:44:58.332 [ INFO] Progress -   3.2 MB (31.2%)\n2023-07-11 04:44:58.332 [ INFO] Progress -   3.2 MB (33.2%)\n2023-07-11 04:44:58.333 [ INFO] Progress -   3.2 MB (35.3%)\n2023-07-11 04:44:58.333 [ INFO] Progress -   3.2 MB (37.4%)\n2023-07-11 04:44:58.333 [ INFO] Progress -   3.2 MB (39.5%)\n2023-07-11 04:44:58.502 [ INFO] Progress -   3.2 MB (41.5%)\n2023-07-11 04:44:58.503 [ INFO] Progress -   3.2 MB (43.6%)\n2023-07-11 04:44:58.503 [ INFO] Progress -   3.2 MB (45.7%)\n2023-07-11 04:44:58.503 [ INFO] Progress -   3.2 MB (47.8%)\n2023-07-11 04:44:58.504 [ INFO] Progress -   3.2 MB (49.8%)\n2023-07-11 04:44:58.504 [ INFO] Progress -   3.2 MB (51.9%)\n2023-07-11 04:44:58.504 [ INFO] Progress -   3.2 MB (54.0%)\n2023-07-11 04:44:58.505 [ INFO] Progress -   3.2 MB (56.1%)\n2023-07-11 04:44:58.505 [ INFO] Progress -   3.2 MB (58.1%)\n2023-07-11 04:44:58.505 [ INFO] Progress -   3.2 MB (60.2%)\n2023-07-11 04:44:58.505 [ INFO] Progress -   3.2 MB (62.3%)\n2023-07-11 04:44:58.506 [ INFO] Progress -   3.2 MB (64.4%)\n2023-07-11 04:44:58.506 [ INFO] Progress -   3.2 MB (66.5%)\n2023-07-11 04:44:58.507 [ INFO] Progress -   3.2 MB (68.5%)\n2023-07-11 04:44:58.507 [ INFO] Progress -   3.2 MB (70.6%)\n2023-07-11 04:44:58.507 [ INFO] Progress -   3.2 MB (72.7%)\n2023-07-11 04:44:58.507 [ INFO] Progress -   3.2 MB (74.8%)\n2023-07-11 04:44:58.508 [ INFO] Progress -   3.2 MB (76.8%)\n2023-07-11 04:44:58.508 [ INFO] Progress -   3.2 MB (78.9%)\n2023-07-11 04:44:58.508 [ INFO] Progress -   3.2 MB (81.0%)\n2023-07-11 04:44:58.675 [ INFO] Progress -   3.2 MB (83.1%)\n2023-07-11 04:44:58.675 [ INFO] Progress -   3.2 MB (85.1%)\n2023-07-11 04:44:58.676 [ INFO] Progress -   3.2 MB (87.2%)\n2023-07-11 04:44:58.676 [ INFO] Progress -   3.2 MB (89.3%)\n2023-07-11 04:44:58.676 [ INFO] Progress -   3.2 MB (91.4%)\n2023-07-11 04:44:58.676 [ INFO] Progress -   3.2 MB (93.5%)\n2023-07-11 04:44:58.677 [ INFO] Progress -   3.2 MB (95.5%)\n2023-07-11 04:44:58.677 [ INFO] Progress -   3.2 MB (97.6%)\n2023-07-11 04:44:58.677 [ INFO] Progress -   3.2 MB (99.7%)\n2023-07-11 04:44:58.678 [ INFO] Progress -   3.2 MB (100.0%)\n2023-07-11 04:44:58.678 [ INFO] Processing  time : 0:00:31.590883\n2023-07-11 04:44:58.678 [ INFO] Downloading time : 0:00:01.381213\n2023-07-11 04:44:58.678 [ INFO] Total time       : 0:00:32.972096\n2023-07-11 04:44:58.678 [ INFO] Download rate    : 1.5 MB/s\n2023-07-11 04:44:58.678 [ INFO] Save into        : motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D/200111.nc\n2023-07-11 04:44:58.710 [ INFO] Done\n2023-07-11 04:44:58.961 [ INFO] Asynchronous mode set\n2023-07-11 04:44:58.961 [ INFO] Authenticating user mphan for service https://my.cmems-du.eu/motu-web/Motu\n2023-07-11 04:45:04.292 [ INFO] Requesting file to download (this can take a while)...\n2023-07-11 04:45:11.513 [ INFO] Authenticating user mphan for service https://my.cmems-du.eu/motu-web/Motu\n2023-07-11 04:45:26.798 [ INFO] The product is ready for download\n2023-07-11 04:45:26.798 [ INFO] Downloading file (this can take a while)...\n2023-07-11 04:45:27.551 [ INFO] File type: application/x-netcdf\n2023-07-11 04:45:27.551 [ INFO] File size: 3.3 MB (3260684 B)\n2023-07-11 04:45:27.551 [ INFO] Downloading file /home/jovyan/shared/minh-notebooks/motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D/200112.nc\n2023-07-11 04:45:27.895 [ INFO] Progress -   3.3 MB (2.0%)\n2023-07-11 04:45:28.067 [ INFO] Progress -   3.3 MB (4.0%)\n2023-07-11 04:45:28.069 [ INFO] Progress -   3.3 MB (6.0%)\n2023-07-11 04:45:28.240 [ INFO] Progress -   3.3 MB (8.0%)\n2023-07-11 04:45:28.240 [ INFO] Progress -   3.3 MB (10.0%)\n2023-07-11 04:45:28.241 [ INFO] Progress -   3.3 MB (12.1%)\n2023-07-11 04:45:28.412 [ INFO] Progress -   3.3 MB (14.1%)\n2023-07-11 04:45:28.413 [ INFO] Progress -   3.3 MB (16.1%)\n2023-07-11 04:45:28.413 [ INFO] Progress -   3.3 MB (18.1%)\n2023-07-11 04:45:28.413 [ INFO] Progress -   3.3 MB (20.1%)\n2023-07-11 04:45:28.414 [ INFO] Progress -   3.3 MB (22.1%)\n2023-07-11 04:45:28.414 [ INFO] Progress -   3.3 MB (24.1%)\n2023-07-11 04:45:28.414 [ INFO] Progress -   3.3 MB (26.1%)\n2023-07-11 04:45:28.585 [ INFO] Progress -   3.3 MB (28.1%)\n2023-07-11 04:45:28.585 [ INFO] Progress -   3.3 MB (30.1%)\n2023-07-11 04:45:28.586 [ INFO] Progress -   3.3 MB (32.2%)\n2023-07-11 04:45:28.587 [ INFO] Progress -   3.3 MB (34.2%)\n2023-07-11 04:45:28.587 [ INFO] Progress -   3.3 MB (36.2%)\n2023-07-11 04:45:28.587 [ INFO] Progress -   3.3 MB (38.2%)\n2023-07-11 04:45:28.587 [ INFO] Progress -   3.3 MB (40.2%)\n2023-07-11 04:45:28.588 [ INFO] Progress -   3.3 MB (42.2%)\n2023-07-11 04:45:28.588 [ INFO] Progress -   3.3 MB (44.2%)\n2023-07-11 04:45:28.588 [ INFO] Progress -   3.3 MB (46.2%)\n2023-07-11 04:45:28.588 [ INFO] Progress -   3.3 MB (48.2%)\n2023-07-11 04:45:28.588 [ INFO] Progress -   3.3 MB (50.2%)\n2023-07-11 04:45:28.589 [ INFO] Progress -   3.3 MB (52.3%)\n2023-07-11 04:45:28.589 [ INFO] Progress -   3.3 MB (54.3%)\n2023-07-11 04:45:28.757 [ INFO] Progress -   3.3 MB (56.3%)\n2023-07-11 04:45:28.758 [ INFO] Progress -   3.3 MB (58.3%)\n2023-07-11 04:45:28.758 [ INFO] Progress -   3.3 MB (60.3%)\n2023-07-11 04:45:28.758 [ INFO] Progress -   3.3 MB (62.3%)\n2023-07-11 04:45:28.758 [ INFO] Progress -   3.3 MB (64.3%)\n2023-07-11 04:45:28.759 [ INFO] Progress -   3.3 MB (66.3%)\n2023-07-11 04:45:28.759 [ INFO] Progress -   3.3 MB (68.3%)\n2023-07-11 04:45:28.760 [ INFO] Progress -   3.3 MB (70.3%)\n2023-07-11 04:45:28.760 [ INFO] Progress -   3.3 MB (72.4%)\n2023-07-11 04:45:28.760 [ INFO] Progress -   3.3 MB (74.4%)\n2023-07-11 04:45:28.760 [ INFO] Progress -   3.3 MB (76.4%)\n2023-07-11 04:45:28.761 [ INFO] Progress -   3.3 MB (78.4%)\n2023-07-11 04:45:28.761 [ INFO] Progress -   3.3 MB (80.4%)\n2023-07-11 04:45:28.761 [ INFO] Progress -   3.3 MB (82.4%)\n2023-07-11 04:45:28.761 [ INFO] Progress -   3.3 MB (84.4%)\n2023-07-11 04:45:28.762 [ INFO] Progress -   3.3 MB (86.4%)\n2023-07-11 04:45:28.762 [ INFO] Progress -   3.3 MB (88.4%)\n2023-07-11 04:45:28.762 [ INFO] Progress -   3.3 MB (90.4%)\n2023-07-11 04:45:28.762 [ INFO] Progress -   3.3 MB (92.5%)\n2023-07-11 04:45:28.762 [ INFO] Progress -   3.3 MB (94.5%)\n2023-07-11 04:45:28.763 [ INFO] Progress -   3.3 MB (96.5%)\n2023-07-11 04:45:28.763 [ INFO] Progress -   3.3 MB (98.5%)\n2023-07-11 04:45:28.764 [ INFO] Progress -   3.3 MB (100.0%)\n2023-07-11 04:45:28.764 [ INFO] Processing  time : 0:00:28.592514\n2023-07-11 04:45:28.764 [ INFO] Downloading time : 0:00:01.212567\n2023-07-11 04:45:28.764 [ INFO] Total time       : 0:00:29.805081\n2023-07-11 04:45:28.764 [ INFO] Download rate    : 1.7 MB/s\n2023-07-11 04:45:28.764 [ INFO] Save into        : motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D/200112.nc\n2023-07-11 04:45:28.818 [ INFO] Done\n\n\nDISCLAIMER: Downloading time may be extremely slow due to processing time from Motu for each request. We can increase temporal range for each one (6 months or 1 year, for example) but it may exceed the size limit MOTU allows. Feel free to modify the prompt generation as it fits to balance speed and size.\n\n\n\nimage.png",
    "crumbs": [
      "Data Tutorials",
      "Data provider examples",
      "Download sliced data using MOTU-Client in Copernicus"
    ]
  },
  {
    "objectID": "notebooks-data/01_MOTU_Downloader.html#combine-data",
    "href": "notebooks-data/01_MOTU_Downloader.html#combine-data",
    "title": "Download sliced data using MOTU-Client in Copernicus",
    "section": "Combine data",
    "text": "Combine data\n\nds = xr.open_mfdataset('demonstrated data/motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D//*.nc')\n\n\nds\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:    (time: 731, latitude: 81, longitude: 81)\nCoordinates:\n  * latitude   (latitude) float32 4.875 5.125 5.375 5.625 ... 24.38 24.62 24.88\n  * time       (time) datetime64[ns] 2000-01-01 2000-01-02 ... 2001-12-31\n  * longitude  (longitude) float32 59.88 60.12 60.38 60.62 ... 79.38 79.62 79.88\nData variables:\n    adt        (time, latitude, longitude) float64 dask.array&lt;chunksize=(31, 81, 81), meta=np.ndarray&gt;\n    crs        (time) int32 -2147483647 -2147483647 ... -2147483647 -2147483647\n    sla        (time, latitude, longitude) float64 dask.array&lt;chunksize=(31, 81, 81), meta=np.ndarray&gt;\nAttributes: (12/45)\n    Conventions:                                    CF-1.6\n    FROM_ORIGINAL_FILE__Metadata_Conventions:       Unidata Dataset Discovery...\n    cdm_data_type:                                  Grid\n    comment:                                        Sea Surface Height measur...\n    contact:                                        servicedesk.cmems@mercato...\n    creator_email:                                  servicedesk.cmems@mercato...\n    ...                                             ...\n    time_coverage_duration:                         P1D\n    time_coverage_end:                              2022-08-04T12:00:00Z\n    time_coverage_resolution:                       P1D\n    time_coverage_start:                            2022-08-03T12:00:00Z\n    title:                                          DT merged all satellites ...\n    _CoordSysBuilder:                               ucar.nc2.dataset.conv.CF1...xarray.DatasetDimensions:time: 731latitude: 81longitude: 81Coordinates: (3)latitude(latitude)float324.875 5.125 5.375 ... 24.62 24.88axis :Ybounds :lat_bndslong_name :Latitudestandard_name :latitudeunits :degrees_northvalid_max :24.875valid_min :4.875_ChunkSizes :50_CoordinateAxisType :Latarray([ 4.875,  5.125,  5.375,  5.625,  5.875,  6.125,  6.375,  6.625,  6.875,\n        7.125,  7.375,  7.625,  7.875,  8.125,  8.375,  8.625,  8.875,  9.125,\n        9.375,  9.625,  9.875, 10.125, 10.375, 10.625, 10.875, 11.125, 11.375,\n       11.625, 11.875, 12.125, 12.375, 12.625, 12.875, 13.125, 13.375, 13.625,\n       13.875, 14.125, 14.375, 14.625, 14.875, 15.125, 15.375, 15.625, 15.875,\n       16.125, 16.375, 16.625, 16.875, 17.125, 17.375, 17.625, 17.875, 18.125,\n       18.375, 18.625, 18.875, 19.125, 19.375, 19.625, 19.875, 20.125, 20.375,\n       20.625, 20.875, 21.125, 21.375, 21.625, 21.875, 22.125, 22.375, 22.625,\n       22.875, 23.125, 23.375, 23.625, 23.875, 24.125, 24.375, 24.625, 24.875],\n      dtype=float32)time(time)datetime64[ns]2000-01-01 ... 2001-12-31axis :Tlong_name :Timestandard_name :time_ChunkSizes :1_CoordinateAxisType :Timevalid_min :18262.0valid_max :18292.0array(['2000-01-01T00:00:00.000000000', '2000-01-02T00:00:00.000000000',\n       '2000-01-03T00:00:00.000000000', ..., '2001-12-29T00:00:00.000000000',\n       '2001-12-30T00:00:00.000000000', '2001-12-31T00:00:00.000000000'],\n      dtype='datetime64[ns]')longitude(longitude)float3259.88 60.12 60.38 ... 79.62 79.88axis :Xbounds :lon_bndslong_name :Longitudestandard_name :longitudeunits :degrees_eastvalid_max :79.875valid_min :59.875_ChunkSizes :50_CoordinateAxisType :Lonarray([59.875, 60.125, 60.375, 60.625, 60.875, 61.125, 61.375, 61.625, 61.875,\n       62.125, 62.375, 62.625, 62.875, 63.125, 63.375, 63.625, 63.875, 64.125,\n       64.375, 64.625, 64.875, 65.125, 65.375, 65.625, 65.875, 66.125, 66.375,\n       66.625, 66.875, 67.125, 67.375, 67.625, 67.875, 68.125, 68.375, 68.625,\n       68.875, 69.125, 69.375, 69.625, 69.875, 70.125, 70.375, 70.625, 70.875,\n       71.125, 71.375, 71.625, 71.875, 72.125, 72.375, 72.625, 72.875, 73.125,\n       73.375, 73.625, 73.875, 74.125, 74.375, 74.625, 74.875, 75.125, 75.375,\n       75.625, 75.875, 76.125, 76.375, 76.625, 76.875, 77.125, 77.375, 77.625,\n       77.875, 78.125, 78.375, 78.625, 78.875, 79.125, 79.375, 79.625, 79.875],\n      dtype=float32)Data variables: (3)adt(time, latitude, longitude)float64dask.array&lt;chunksize=(31, 81, 81), meta=np.ndarray&gt;comment :The absolute dynamic topography is the sea surface height above geoid; the adt is obtained as follows: adt=sla+mdt where mdt is the mean dynamic topography; see the product user manual for detailsgrid_mapping :crslong_name :Absolute dynamic topographystandard_name :sea_surface_height_above_geoidunits :m_ChunkSizes :[ 1 50 50]\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n36.59 MiB\n1.55 MiB\n\n\nShape\n(731, 81, 81)\n(31, 81, 81)\n\n\nDask graph\n24 chunks in 49 graph layers\n\n\nData type\nfloat64 numpy.ndarray\n\n\n\n\n\n\n\n\ncrs\n\n\n(time)\n\n\nint32\n\n\n-2147483647 ... -2147483647\n\n\n\n\ncomment :\n\nThis is a container variable that describes the grid_mapping used by the data in this file. This variable does not contain any data; only information about the geographic coordinate system.\n\ninverse_flattening :\n\n298.257\n\ngrid_mapping_name :\n\nlatitude_longitude\n\nsemi_major_axis :\n\n6378136.3\n\n_CoordinateTransformType :\n\nProjection\n\n_CoordinateAxisTypes :\n\nGeoX GeoY\n\n\n\n\narray([-2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n...\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647], dtype=int32)\n\n\nsla\n\n\n(time, latitude, longitude)\n\n\nfloat64\n\n\ndask.array&lt;chunksize=(31, 81, 81), meta=np.ndarray&gt;\n\n\n\n\nancillary_variables :\n\nerr_sla\n\ncomment :\n\nThe sea level anomaly is the sea surface height above mean sea surface; it is referenced to the [1993, 2012] period; see the product user manual for details\n\ngrid_mapping :\n\ncrs\n\nlong_name :\n\nSea level anomaly\n\nstandard_name :\n\nsea_surface_height_above_sea_level\n\nunits :\n\nm\n\n_ChunkSizes :\n\n[ 1 50 50]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n36.59 MiB\n1.55 MiB\n\n\nShape\n(731, 81, 81)\n(31, 81, 81)\n\n\nDask graph\n24 chunks in 49 graph layers\n\n\nData type\nfloat64 numpy.ndarray\n\n\n\n\n\n\n\n\nAttributes: (45)Conventions :CF-1.6FROM_ORIGINAL_FILE__Metadata_Conventions :Unidata Dataset Discovery v1.0cdm_data_type :Gridcomment :Sea Surface Height measured by Altimetry and derived variablescontact :servicedesk.cmems@mercator-ocean.eucreator_email :servicedesk.cmems@mercator-ocean.eucreator_name :CMEMS - Sea Level Thematic Assembly Centercreator_url :http://marine.copernicus.eudate_created :2023-03-01T17:56:26Zdate_issued :2023-03-01T17:56:26Zdate_modified :2023-03-01T17:56:26ZFROM_ORIGINAL_FILE__geospatial_lat_max :89.875FROM_ORIGINAL_FILE__geospatial_lat_min :-89.875FROM_ORIGINAL_FILE__geospatial_lat_resolution :0.25FROM_ORIGINAL_FILE__geospatial_lat_units :degrees_northFROM_ORIGINAL_FILE__geospatial_lon_max :179.875FROM_ORIGINAL_FILE__geospatial_lon_min :-179.875FROM_ORIGINAL_FILE__geospatial_lon_resolution :0.25FROM_ORIGINAL_FILE__geospatial_lon_units :degrees_eastgeospatial_vertical_max :0.0geospatial_vertical_min :0.0geospatial_vertical_positive :downgeospatial_vertical_resolution :pointgeospatial_vertical_units :mhistory :2023-03-01 17:56:27Z: Creationinstitution :CLS, CNESkeywords :Oceans &gt; Ocean Topography &gt; Sea Surface Heightkeywords_vocabulary :NetCDF COARDS Climate and Forecast Standard Nameslicense :http://marine.copernicus.eu/web/27-service-commitments-and-licence.phpFROM_ORIGINAL_FILE__platform :Altika Drifting Phase, Cryosat-2 New Orbit, Haiyang-2B, Jason-3 Interleaved, Sentinel-3A, Sentinel-3B, Sentinel-6Aprocessing_level :L4FROM_ORIGINAL_FILE__product_version :vDec2021project :COPERNICUS MARINE ENVIRONMENT MONITORING SERVICE (CMEMS)references :http://marine.copernicus.euFROM_ORIGINAL_FILE__software_version :7.1_DUACS_DT2021_baselinesource :Altimetry measurementsssalto_duacs_comment :The reference mission used for the altimeter inter-calibration processing is Topex/Poseidon between 1993-01-01 and 2002-04-23, Jason-1 between 2002-04-24 and 2008-10-18, OSTM/Jason-2 between 2008-10-19 and 2016-06-25, Jason-3 between 2016-06-25 and 2022-02-09, and Sentinel-6A from 2022-02-10.standard_name_vocabulary :NetCDF Climate and Forecast (CF) Metadata Convention Standard Name Table v37summary :SSALTO/DUACS Delayed-Time Level-4 sea surface height and derived variables measured by multi-satellite altimetry observations over Global Ocean.time_coverage_duration :P1Dtime_coverage_end :2022-08-04T12:00:00Ztime_coverage_resolution :P1Dtime_coverage_start :2022-08-03T12:00:00Ztitle :DT merged all satellites Global Ocean Gridded SSALTO/DUACS Sea Surface Height L4 product and derived variables_CoordSysBuilder :ucar.nc2.dataset.conv.CF1Convention",
    "crumbs": [
      "Data Tutorials",
      "Data provider examples",
      "Download sliced data using MOTU-Client in Copernicus"
    ]
  },
  {
    "objectID": "notebooks-data/01_earthaccess_Downloader.html#authorize-credentials",
    "href": "notebooks-data/01_earthaccess_Downloader.html#authorize-credentials",
    "title": "NASA Earth Data",
    "section": "Authorize credentials",
    "text": "Authorize credentials\nTo download data from NASA’s Earth Data database, it’s recommended that you set up a .netrc credential file so that you don’t have to manually log in every time you run a downloading script. To do this, consult 2021 Cloud Hackathon’s tutorial here. Make sure to register an account with Earth Data first before following the tutorial.\nWhen you finished implementing the .netrc file, continue with the tutorial below",
    "crumbs": [
      "Data Tutorials",
      "Data provider examples",
      "NASA Earth Data"
    ]
  },
  {
    "objectID": "notebooks-data/01_earthaccess_Downloader.html#import-necessary-libraries",
    "href": "notebooks-data/01_earthaccess_Downloader.html#import-necessary-libraries",
    "title": "NASA Earth Data",
    "section": "Import necessary libraries",
    "text": "Import necessary libraries\n\nimport xarray as xr\nimport earthaccess\nimport numpy as np\nimport pandas as pd\nimport os, glob",
    "crumbs": [
      "Data Tutorials",
      "Data provider examples",
      "NASA Earth Data"
    ]
  },
  {
    "objectID": "notebooks-data/01_earthaccess_Downloader.html#download-data-to-your-local-machine-using-earthaccess-library",
    "href": "notebooks-data/01_earthaccess_Downloader.html#download-data-to-your-local-machine-using-earthaccess-library",
    "title": "NASA Earth Data",
    "section": "Download data to your local machine using earthaccess library",
    "text": "Download data to your local machine using earthaccess library\nEarthaccess library streamlines your downloading, slicing, and searching for granules easier than ever. For cloud-hosted datasets (which is what this tutorial best works with), we choose to download granules to the local machine instead of streaming them to the working Python scripts as some users may not be physically available in the us-west region for streaming to be effective. Local downloading may result in heavy file sizes, but is consistent, and we am also providing some tweaks to save as much as you can, especially if your research interest area requires a long temporal range and does not cover globally.\n\n# Log in using .netrc file\nauth = earthaccess.login(strategy=\"netrc\")\n\nWe are already authenticated with NASA EDL",
    "crumbs": [
      "Data Tutorials",
      "Data provider examples",
      "NASA Earth Data"
    ]
  },
  {
    "objectID": "notebooks-data/01_earthaccess_Downloader.html#streaming-granules",
    "href": "notebooks-data/01_earthaccess_Downloader.html#streaming-granules",
    "title": "NASA Earth Data",
    "section": "Streaming granules",
    "text": "Streaming granules\n\n# EarthAccess's approach to collecting granules\nresults = earthaccess.search_data(\n    short_name='MUR-JPL-L4-GLOB-v4.1',\n    cloud_hosted=True,\n    bounding_box = (60, 5, 80, 25),\n    temporal=(\"2003-01-01\", \"2003-02-28\")\n)\n\nGranules found: 59\n\n\n\nfiles = earthaccess.open(results) # s3\n\n Opening 59 granules, approx size: 0.0 GB\n\n\n\n\n\n\n\n\n\n\n\n\nds = xr.open_mfdataset(files)\n\n\nds\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:           (time: 59, lat: 17999, lon: 36000)\nCoordinates:\n  * time              (time) datetime64[ns] 2003-01-01T09:00:00 ... 2003-02-2...\n  * lat               (lat) float32 -89.99 -89.98 -89.97 ... 89.97 89.98 89.99\n  * lon               (lon) float32 -180.0 -180.0 -180.0 ... 180.0 180.0 180.0\nData variables:\n    analysed_sst      (time, lat, lon) float32 dask.array&lt;chunksize=(1, 17999, 36000), meta=np.ndarray&gt;\n    analysis_error    (time, lat, lon) float32 dask.array&lt;chunksize=(1, 17999, 36000), meta=np.ndarray&gt;\n    mask              (time, lat, lon) float32 dask.array&lt;chunksize=(1, 17999, 36000), meta=np.ndarray&gt;\n    sea_ice_fraction  (time, lat, lon) float32 dask.array&lt;chunksize=(1, 17999, 36000), meta=np.ndarray&gt;\nAttributes: (12/47)\n    Conventions:                CF-1.5\n    title:                      Daily MUR SST, Final product\n    summary:                    A merged, multi-sensor L4 Foundation SST anal...\n    references:                 http://podaac.jpl.nasa.gov/Multi-scale_Ultra-...\n    institution:                Jet Propulsion Laboratory\n    history:                    created at nominal 4-day latency; replaced nr...\n    ...                         ...\n    project:                    NASA Making Earth Science Data Records for Us...\n    publisher_name:             GHRSST Project Office\n    publisher_url:              http://www.ghrsst.org\n    publisher_email:            ghrsst-po@nceo.ac.uk\n    processing_level:           L4\n    cdm_data_type:              gridxarray.DatasetDimensions:time: 59lat: 17999lon: 36000Coordinates: (3)time(time)datetime64[ns]2003-01-01T09:00:00 ... 2003-02-...long_name :reference time of sst fieldstandard_name :timeaxis :Tcomment :Nominal time of analyzed fieldsarray(['2003-01-01T09:00:00.000000000', '2003-01-02T09:00:00.000000000',\n       '2003-01-03T09:00:00.000000000', '2003-01-04T09:00:00.000000000',\n       '2003-01-05T09:00:00.000000000', '2003-01-06T09:00:00.000000000',\n       '2003-01-07T09:00:00.000000000', '2003-01-08T09:00:00.000000000',\n       '2003-01-09T09:00:00.000000000', '2003-01-10T09:00:00.000000000',\n       '2003-01-11T09:00:00.000000000', '2003-01-12T09:00:00.000000000',\n       '2003-01-13T09:00:00.000000000', '2003-01-14T09:00:00.000000000',\n       '2003-01-15T09:00:00.000000000', '2003-01-16T09:00:00.000000000',\n       '2003-01-17T09:00:00.000000000', '2003-01-18T09:00:00.000000000',\n       '2003-01-19T09:00:00.000000000', '2003-01-20T09:00:00.000000000',\n       '2003-01-21T09:00:00.000000000', '2003-01-22T09:00:00.000000000',\n       '2003-01-23T09:00:00.000000000', '2003-01-24T09:00:00.000000000',\n       '2003-01-25T09:00:00.000000000', '2003-01-26T09:00:00.000000000',\n       '2003-01-27T09:00:00.000000000', '2003-01-28T09:00:00.000000000',\n       '2003-01-29T09:00:00.000000000', '2003-01-30T09:00:00.000000000',\n       '2003-01-31T09:00:00.000000000', '2003-02-01T09:00:00.000000000',\n       '2003-02-02T09:00:00.000000000', '2003-02-03T09:00:00.000000000',\n       '2003-02-04T09:00:00.000000000', '2003-02-05T09:00:00.000000000',\n       '2003-02-06T09:00:00.000000000', '2003-02-07T09:00:00.000000000',\n       '2003-02-08T09:00:00.000000000', '2003-02-09T09:00:00.000000000',\n       '2003-02-10T09:00:00.000000000', '2003-02-11T09:00:00.000000000',\n       '2003-02-12T09:00:00.000000000', '2003-02-13T09:00:00.000000000',\n       '2003-02-14T09:00:00.000000000', '2003-02-15T09:00:00.000000000',\n       '2003-02-16T09:00:00.000000000', '2003-02-17T09:00:00.000000000',\n       '2003-02-18T09:00:00.000000000', '2003-02-19T09:00:00.000000000',\n       '2003-02-20T09:00:00.000000000', '2003-02-21T09:00:00.000000000',\n       '2003-02-22T09:00:00.000000000', '2003-02-23T09:00:00.000000000',\n       '2003-02-24T09:00:00.000000000', '2003-02-25T09:00:00.000000000',\n       '2003-02-26T09:00:00.000000000', '2003-02-27T09:00:00.000000000',\n       '2003-02-28T09:00:00.000000000'], dtype='datetime64[ns]')lat(lat)float32-89.99 -89.98 ... 89.98 89.99long_name :latitudestandard_name :latitudeaxis :Yunits :degrees_northvalid_min :-90.0valid_max :90.0comment :nonearray([-89.99, -89.98, -89.97, ...,  89.97,  89.98,  89.99], dtype=float32)lon(lon)float32-180.0 -180.0 ... 180.0 180.0long_name :longitudestandard_name :longitudeaxis :Xunits :degrees_eastvalid_min :-180.0valid_max :180.0comment :nonearray([-179.99, -179.98, -179.97, ...,  179.98,  179.99,  180.  ],\n      dtype=float32)Data variables: (4)analysed_sst(time, lat, lon)float32dask.array&lt;chunksize=(1, 17999, 36000), meta=np.ndarray&gt;long_name :analysed sea surface temperaturestandard_name :sea_surface_foundation_temperatureunits :kelvinvalid_min :-32767valid_max :32767comment :\"Final\" version using Multi-Resolution Variational Analysis (MRVA) method for interpolationsource :AMSRE-REMSS, AVHRR_Pathfinder-PFV5.2-NODC_day, AVHRR_Pathfinder-PFV5.2-NODC_night, MODIS_A-JPL, MODIS_T-JPL, iQUAM-NOAA/NESDIS, Ice_Conc-OSISAF\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n142.42 GiB\n2.41 GiB\n\n\nShape\n(59, 17999, 36000)\n(1, 17999, 36000)\n\n\nDask graph\n59 chunks in 119 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\nanalysis_error\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(1, 17999, 36000), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\nestimated error standard deviation of analysed_sst\n\nunits :\n\nkelvin\n\nvalid_min :\n\n0\n\nvalid_max :\n\n32767\n\ncomment :\n\nnone\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n142.42 GiB\n2.41 GiB\n\n\nShape\n(59, 17999, 36000)\n(1, 17999, 36000)\n\n\nDask graph\n59 chunks in 119 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nmask\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(1, 17999, 36000), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\nsea/land field composite mask\n\nvalid_min :\n\n1\n\nvalid_max :\n\n31\n\nflag_masks :\n\n[ 1 2 4 8 16]\n\nflag_values :\n\n[ 1 2 5 9 13]\n\nflag_meanings :\n\n1=open-sea, 2=land, 5=open-lake, 9=open-sea with ice in the grid, 13=open-lake with ice in the grid\n\ncomment :\n\nmask can be used to further filter the data.\n\nsource :\n\nGMT \"grdlandmask\", ice flag from sea_ice_fraction data\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n142.42 GiB\n2.41 GiB\n\n\nShape\n(59, 17999, 36000)\n(1, 17999, 36000)\n\n\nDask graph\n59 chunks in 119 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nsea_ice_fraction\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(1, 17999, 36000), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\nsea ice area fraction\n\nstandard_name :\n\nsea ice area fraction\n\nunits :\n\nfraction (between 0 and 1)\n\nvalid_min :\n\n0\n\nvalid_max :\n\n100\n\nsource :\n\nEUMETSAT OSI-SAF, copyright EUMETSAT\n\ncomment :\n\nice data interpolated by a nearest neighbor approach.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n142.42 GiB\n2.41 GiB\n\n\nShape\n(59, 17999, 36000)\n(1, 17999, 36000)\n\n\nDask graph\n59 chunks in 119 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\nIndexes: (3)timePandasIndexPandasIndex(DatetimeIndex(['2003-01-01 09:00:00', '2003-01-02 09:00:00',\n               '2003-01-03 09:00:00', '2003-01-04 09:00:00',\n               '2003-01-05 09:00:00', '2003-01-06 09:00:00',\n               '2003-01-07 09:00:00', '2003-01-08 09:00:00',\n               '2003-01-09 09:00:00', '2003-01-10 09:00:00',\n               '2003-01-11 09:00:00', '2003-01-12 09:00:00',\n               '2003-01-13 09:00:00', '2003-01-14 09:00:00',\n               '2003-01-15 09:00:00', '2003-01-16 09:00:00',\n               '2003-01-17 09:00:00', '2003-01-18 09:00:00',\n               '2003-01-19 09:00:00', '2003-01-20 09:00:00',\n               '2003-01-21 09:00:00', '2003-01-22 09:00:00',\n               '2003-01-23 09:00:00', '2003-01-24 09:00:00',\n               '2003-01-25 09:00:00', '2003-01-26 09:00:00',\n               '2003-01-27 09:00:00', '2003-01-28 09:00:00',\n               '2003-01-29 09:00:00', '2003-01-30 09:00:00',\n               '2003-01-31 09:00:00', '2003-02-01 09:00:00',\n               '2003-02-02 09:00:00', '2003-02-03 09:00:00',\n               '2003-02-04 09:00:00', '2003-02-05 09:00:00',\n               '2003-02-06 09:00:00', '2003-02-07 09:00:00',\n               '2003-02-08 09:00:00', '2003-02-09 09:00:00',\n               '2003-02-10 09:00:00', '2003-02-11 09:00:00',\n               '2003-02-12 09:00:00', '2003-02-13 09:00:00',\n               '2003-02-14 09:00:00', '2003-02-15 09:00:00',\n               '2003-02-16 09:00:00', '2003-02-17 09:00:00',\n               '2003-02-18 09:00:00', '2003-02-19 09:00:00',\n               '2003-02-20 09:00:00', '2003-02-21 09:00:00',\n               '2003-02-22 09:00:00', '2003-02-23 09:00:00',\n               '2003-02-24 09:00:00', '2003-02-25 09:00:00',\n               '2003-02-26 09:00:00', '2003-02-27 09:00:00',\n               '2003-02-28 09:00:00'],\n              dtype='datetime64[ns]', name='time', freq=None))latPandasIndexPandasIndex(Index([-89.98999786376953,  -89.9800033569336, -89.97000122070312,\n       -89.95999908447266, -89.94999694824219, -89.94000244140625,\n       -89.93000030517578, -89.91999816894531, -89.91000366210938,\n        -89.9000015258789,\n       ...\n         89.9000015258789,  89.91000366210938,  89.91999816894531,\n        89.93000030517578,  89.94000244140625,  89.94999694824219,\n        89.95999908447266,  89.97000122070312,   89.9800033569336,\n        89.98999786376953],\n      dtype='float32', name='lat', length=17999))lonPandasIndexPandasIndex(Index([-179.99000549316406, -179.97999572753906, -179.97000122070312,\n        -179.9600067138672,  -179.9499969482422, -179.94000244140625,\n       -179.92999267578125,  -179.9199981689453, -179.91000366210938,\n       -179.89999389648438,\n       ...\n        179.91000366210938,   179.9199981689453,  179.92999267578125,\n        179.94000244140625,   179.9499969482422,   179.9600067138672,\n        179.97000122070312,  179.97999572753906,  179.99000549316406,\n                     180.0],\n      dtype='float32', name='lon', length=36000))Attributes: (47)Conventions :CF-1.5title :Daily MUR SST, Final productsummary :A merged, multi-sensor L4 Foundation SST analysis product from JPL.references :http://podaac.jpl.nasa.gov/Multi-scale_Ultra-high_Resolution_MUR-SSTinstitution :Jet Propulsion Laboratoryhistory :created at nominal 4-day latency; replaced nrt (1-day latency) version.comment :MUR = \"Multi-scale Ultra-high Reolution\"license :These data are available free of charge under data policy of JPL PO.DAAC.id :MUR-JPL-L4-GLOB-v04.1naming_authority :org.ghrsstproduct_version :04.1uuid :27665bc0-d5fc-11e1-9b23-0800200c9a66gds_version_id :2.0netcdf_version_id :4.1date_created :20150818T185930Zstart_time :20030101T090000Zstop_time :20030101T090000Ztime_coverage_start :20021231T210000Ztime_coverage_end :20030101T210000Zfile_quality_level :1source :AMSRE-REMSS, AVHRR_Pathfinder-PFV5.2-NODC_day, AVHRR_Pathfinder-PFV5.2-NODC_night, MODIS_A-JPL, MODIS_T-JPL, iQUAM-NOAA/NESDIS, Ice_Conc-OSISAFplatform :Aqua, DMSP, NOAA-POES, Suomi-NPP, Terrasensor :AMSR-E, AVHRR, MODIS, SSM/I, VIIRS, in-situMetadata_Conventions :Unidata Observation Dataset v1.0metadata_link :http://podaac.jpl.nasa.gov/ws/metadata/dataset/?format=iso&shortName=MUR-JPL-L4-GLOB-v04.1keywords :Oceans &gt; Ocean Temperature &gt; Sea Surface Temperaturekeywords_vocabulary :NASA Global Change Master Directory (GCMD) Science Keywordsstandard_name_vocabulary :NetCDF Climate and Forecast (CF) Metadata Conventionsouthernmost_latitude :-90.0northernmost_latitude :90.0westernmost_longitude :-180.0easternmost_longitude :180.0spatial_resolution :0.01 degreesgeospatial_lat_units :degrees northgeospatial_lat_resolution :0.01 degreesgeospatial_lon_units :degrees eastgeospatial_lon_resolution :0.01 degreesacknowledgment :Please acknowledge the use of these data with the following statement:  These data were provided by JPL under support by NASA MEaSUREs program.creator_name :JPL MUR SST projectcreator_email :ghrsst@podaac.jpl.nasa.govcreator_url :http://mur.jpl.nasa.govproject :NASA Making Earth Science Data Records for Use in Research Environments (MEaSUREs) Programpublisher_name :GHRSST Project Officepublisher_url :http://www.ghrsst.orgpublisher_email :ghrsst-po@nceo.ac.ukprocessing_level :L4cdm_data_type :grid\n\n\n\nds.sel(lat=slice(5, 25), lon=slice(60, 80))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:           (time: 59, lat: 2001, lon: 2001)\nCoordinates:\n  * time              (time) datetime64[ns] 2003-01-01T09:00:00 ... 2003-02-2...\n  * lat               (lat) float32 5.0 5.01 5.02 5.03 ... 24.98 24.99 25.0\n  * lon               (lon) float32 60.0 60.01 60.02 60.03 ... 79.98 79.99 80.0\nData variables:\n    analysed_sst      (time, lat, lon) float32 dask.array&lt;chunksize=(1, 2001, 2001), meta=np.ndarray&gt;\n    analysis_error    (time, lat, lon) float32 dask.array&lt;chunksize=(1, 2001, 2001), meta=np.ndarray&gt;\n    mask              (time, lat, lon) float32 dask.array&lt;chunksize=(1, 2001, 2001), meta=np.ndarray&gt;\n    sea_ice_fraction  (time, lat, lon) float32 dask.array&lt;chunksize=(1, 2001, 2001), meta=np.ndarray&gt;\nAttributes: (12/47)\n    Conventions:                CF-1.5\n    title:                      Daily MUR SST, Final product\n    summary:                    A merged, multi-sensor L4 Foundation SST anal...\n    references:                 http://podaac.jpl.nasa.gov/Multi-scale_Ultra-...\n    institution:                Jet Propulsion Laboratory\n    history:                    created at nominal 4-day latency; replaced nr...\n    ...                         ...\n    project:                    NASA Making Earth Science Data Records for Us...\n    publisher_name:             GHRSST Project Office\n    publisher_url:              http://www.ghrsst.org\n    publisher_email:            ghrsst-po@nceo.ac.uk\n    processing_level:           L4\n    cdm_data_type:              gridxarray.DatasetDimensions:time: 59lat: 2001lon: 2001Coordinates: (3)time(time)datetime64[ns]2003-01-01T09:00:00 ... 2003-02-...long_name :reference time of sst fieldstandard_name :timeaxis :Tcomment :Nominal time of analyzed fieldsarray(['2003-01-01T09:00:00.000000000', '2003-01-02T09:00:00.000000000',\n       '2003-01-03T09:00:00.000000000', '2003-01-04T09:00:00.000000000',\n       '2003-01-05T09:00:00.000000000', '2003-01-06T09:00:00.000000000',\n       '2003-01-07T09:00:00.000000000', '2003-01-08T09:00:00.000000000',\n       '2003-01-09T09:00:00.000000000', '2003-01-10T09:00:00.000000000',\n       '2003-01-11T09:00:00.000000000', '2003-01-12T09:00:00.000000000',\n       '2003-01-13T09:00:00.000000000', '2003-01-14T09:00:00.000000000',\n       '2003-01-15T09:00:00.000000000', '2003-01-16T09:00:00.000000000',\n       '2003-01-17T09:00:00.000000000', '2003-01-18T09:00:00.000000000',\n       '2003-01-19T09:00:00.000000000', '2003-01-20T09:00:00.000000000',\n       '2003-01-21T09:00:00.000000000', '2003-01-22T09:00:00.000000000',\n       '2003-01-23T09:00:00.000000000', '2003-01-24T09:00:00.000000000',\n       '2003-01-25T09:00:00.000000000', '2003-01-26T09:00:00.000000000',\n       '2003-01-27T09:00:00.000000000', '2003-01-28T09:00:00.000000000',\n       '2003-01-29T09:00:00.000000000', '2003-01-30T09:00:00.000000000',\n       '2003-01-31T09:00:00.000000000', '2003-02-01T09:00:00.000000000',\n       '2003-02-02T09:00:00.000000000', '2003-02-03T09:00:00.000000000',\n       '2003-02-04T09:00:00.000000000', '2003-02-05T09:00:00.000000000',\n       '2003-02-06T09:00:00.000000000', '2003-02-07T09:00:00.000000000',\n       '2003-02-08T09:00:00.000000000', '2003-02-09T09:00:00.000000000',\n       '2003-02-10T09:00:00.000000000', '2003-02-11T09:00:00.000000000',\n       '2003-02-12T09:00:00.000000000', '2003-02-13T09:00:00.000000000',\n       '2003-02-14T09:00:00.000000000', '2003-02-15T09:00:00.000000000',\n       '2003-02-16T09:00:00.000000000', '2003-02-17T09:00:00.000000000',\n       '2003-02-18T09:00:00.000000000', '2003-02-19T09:00:00.000000000',\n       '2003-02-20T09:00:00.000000000', '2003-02-21T09:00:00.000000000',\n       '2003-02-22T09:00:00.000000000', '2003-02-23T09:00:00.000000000',\n       '2003-02-24T09:00:00.000000000', '2003-02-25T09:00:00.000000000',\n       '2003-02-26T09:00:00.000000000', '2003-02-27T09:00:00.000000000',\n       '2003-02-28T09:00:00.000000000'], dtype='datetime64[ns]')lat(lat)float325.0 5.01 5.02 ... 24.98 24.99 25.0long_name :latitudestandard_name :latitudeaxis :Yunits :degrees_northvalid_min :-90.0valid_max :90.0comment :nonearray([ 5.  ,  5.01,  5.02, ..., 24.98, 24.99, 25.  ], dtype=float32)lon(lon)float3260.0 60.01 60.02 ... 79.99 80.0long_name :longitudestandard_name :longitudeaxis :Xunits :degrees_eastvalid_min :-180.0valid_max :180.0comment :nonearray([60.  , 60.01, 60.02, ..., 79.98, 79.99, 80.  ], dtype=float32)Data variables: (4)analysed_sst(time, lat, lon)float32dask.array&lt;chunksize=(1, 2001, 2001), meta=np.ndarray&gt;long_name :analysed sea surface temperaturestandard_name :sea_surface_foundation_temperatureunits :kelvinvalid_min :-32767valid_max :32767comment :\"Final\" version using Multi-Resolution Variational Analysis (MRVA) method for interpolationsource :AMSRE-REMSS, AVHRR_Pathfinder-PFV5.2-NODC_day, AVHRR_Pathfinder-PFV5.2-NODC_night, MODIS_A-JPL, MODIS_T-JPL, iQUAM-NOAA/NESDIS, Ice_Conc-OSISAF\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n901.17 MiB\n15.27 MiB\n\n\nShape\n(59, 2001, 2001)\n(1, 2001, 2001)\n\n\nDask graph\n59 chunks in 120 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\nanalysis_error\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(1, 2001, 2001), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\nestimated error standard deviation of analysed_sst\n\nunits :\n\nkelvin\n\nvalid_min :\n\n0\n\nvalid_max :\n\n32767\n\ncomment :\n\nnone\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n901.17 MiB\n15.27 MiB\n\n\nShape\n(59, 2001, 2001)\n(1, 2001, 2001)\n\n\nDask graph\n59 chunks in 120 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nmask\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(1, 2001, 2001), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\nsea/land field composite mask\n\nvalid_min :\n\n1\n\nvalid_max :\n\n31\n\nflag_masks :\n\n[ 1 2 4 8 16]\n\nflag_values :\n\n[ 1 2 5 9 13]\n\nflag_meanings :\n\n1=open-sea, 2=land, 5=open-lake, 9=open-sea with ice in the grid, 13=open-lake with ice in the grid\n\ncomment :\n\nmask can be used to further filter the data.\n\nsource :\n\nGMT \"grdlandmask\", ice flag from sea_ice_fraction data\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n901.17 MiB\n15.27 MiB\n\n\nShape\n(59, 2001, 2001)\n(1, 2001, 2001)\n\n\nDask graph\n59 chunks in 120 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nsea_ice_fraction\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(1, 2001, 2001), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\nsea ice area fraction\n\nstandard_name :\n\nsea ice area fraction\n\nunits :\n\nfraction (between 0 and 1)\n\nvalid_min :\n\n0\n\nvalid_max :\n\n100\n\nsource :\n\nEUMETSAT OSI-SAF, copyright EUMETSAT\n\ncomment :\n\nice data interpolated by a nearest neighbor approach.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n901.17 MiB\n15.27 MiB\n\n\nShape\n(59, 2001, 2001)\n(1, 2001, 2001)\n\n\nDask graph\n59 chunks in 120 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\nIndexes: (3)timePandasIndexPandasIndex(DatetimeIndex(['2003-01-01 09:00:00', '2003-01-02 09:00:00',\n               '2003-01-03 09:00:00', '2003-01-04 09:00:00',\n               '2003-01-05 09:00:00', '2003-01-06 09:00:00',\n               '2003-01-07 09:00:00', '2003-01-08 09:00:00',\n               '2003-01-09 09:00:00', '2003-01-10 09:00:00',\n               '2003-01-11 09:00:00', '2003-01-12 09:00:00',\n               '2003-01-13 09:00:00', '2003-01-14 09:00:00',\n               '2003-01-15 09:00:00', '2003-01-16 09:00:00',\n               '2003-01-17 09:00:00', '2003-01-18 09:00:00',\n               '2003-01-19 09:00:00', '2003-01-20 09:00:00',\n               '2003-01-21 09:00:00', '2003-01-22 09:00:00',\n               '2003-01-23 09:00:00', '2003-01-24 09:00:00',\n               '2003-01-25 09:00:00', '2003-01-26 09:00:00',\n               '2003-01-27 09:00:00', '2003-01-28 09:00:00',\n               '2003-01-29 09:00:00', '2003-01-30 09:00:00',\n               '2003-01-31 09:00:00', '2003-02-01 09:00:00',\n               '2003-02-02 09:00:00', '2003-02-03 09:00:00',\n               '2003-02-04 09:00:00', '2003-02-05 09:00:00',\n               '2003-02-06 09:00:00', '2003-02-07 09:00:00',\n               '2003-02-08 09:00:00', '2003-02-09 09:00:00',\n               '2003-02-10 09:00:00', '2003-02-11 09:00:00',\n               '2003-02-12 09:00:00', '2003-02-13 09:00:00',\n               '2003-02-14 09:00:00', '2003-02-15 09:00:00',\n               '2003-02-16 09:00:00', '2003-02-17 09:00:00',\n               '2003-02-18 09:00:00', '2003-02-19 09:00:00',\n               '2003-02-20 09:00:00', '2003-02-21 09:00:00',\n               '2003-02-22 09:00:00', '2003-02-23 09:00:00',\n               '2003-02-24 09:00:00', '2003-02-25 09:00:00',\n               '2003-02-26 09:00:00', '2003-02-27 09:00:00',\n               '2003-02-28 09:00:00'],\n              dtype='datetime64[ns]', name='time', freq=None))latPandasIndexPandasIndex(Index([               5.0,  5.010000228881836,  5.019999980926514,\n         5.03000020980835,  5.039999961853027,  5.050000190734863,\n        5.059999942779541,  5.070000171661377,  5.079999923706055,\n        5.090000152587891,\n       ...\n        24.90999984741211, 24.920000076293945,  24.93000030517578,\n       24.940000534057617, 24.950000762939453, 24.959999084472656,\n       24.969999313354492, 24.979999542236328, 24.989999771118164,\n                     25.0],\n      dtype='float32', name='lat', length=2001))lonPandasIndexPandasIndex(Index([              60.0,   60.0099983215332,  60.02000045776367,\n       60.029998779296875, 60.040000915527344,  60.04999923706055,\n       60.060001373291016,  60.06999969482422,  60.08000183105469,\n        60.09000015258789,\n       ...\n        79.91000366210938,  79.91999816894531,  79.93000030517578,\n        79.94000244140625,  79.94999694824219,  79.95999908447266,\n        79.97000122070312,   79.9800033569336,  79.98999786376953,\n                     80.0],\n      dtype='float32', name='lon', length=2001))Attributes: (47)Conventions :CF-1.5title :Daily MUR SST, Final productsummary :A merged, multi-sensor L4 Foundation SST analysis product from JPL.references :http://podaac.jpl.nasa.gov/Multi-scale_Ultra-high_Resolution_MUR-SSTinstitution :Jet Propulsion Laboratoryhistory :created at nominal 4-day latency; replaced nrt (1-day latency) version.comment :MUR = \"Multi-scale Ultra-high Reolution\"license :These data are available free of charge under data policy of JPL PO.DAAC.id :MUR-JPL-L4-GLOB-v04.1naming_authority :org.ghrsstproduct_version :04.1uuid :27665bc0-d5fc-11e1-9b23-0800200c9a66gds_version_id :2.0netcdf_version_id :4.1date_created :20150818T185930Zstart_time :20030101T090000Zstop_time :20030101T090000Ztime_coverage_start :20021231T210000Ztime_coverage_end :20030101T210000Zfile_quality_level :1source :AMSRE-REMSS, AVHRR_Pathfinder-PFV5.2-NODC_day, AVHRR_Pathfinder-PFV5.2-NODC_night, MODIS_A-JPL, MODIS_T-JPL, iQUAM-NOAA/NESDIS, Ice_Conc-OSISAFplatform :Aqua, DMSP, NOAA-POES, Suomi-NPP, Terrasensor :AMSR-E, AVHRR, MODIS, SSM/I, VIIRS, in-situMetadata_Conventions :Unidata Observation Dataset v1.0metadata_link :http://podaac.jpl.nasa.gov/ws/metadata/dataset/?format=iso&shortName=MUR-JPL-L4-GLOB-v04.1keywords :Oceans &gt; Ocean Temperature &gt; Sea Surface Temperaturekeywords_vocabulary :NASA Global Change Master Directory (GCMD) Science Keywordsstandard_name_vocabulary :NetCDF Climate and Forecast (CF) Metadata Conventionsouthernmost_latitude :-90.0northernmost_latitude :90.0westernmost_longitude :-180.0easternmost_longitude :180.0spatial_resolution :0.01 degreesgeospatial_lat_units :degrees northgeospatial_lat_resolution :0.01 degreesgeospatial_lon_units :degrees eastgeospatial_lon_resolution :0.01 degreesacknowledgment :Please acknowledge the use of these data with the following statement:  These data were provided by JPL under support by NASA MEaSUREs program.creator_name :JPL MUR SST projectcreator_email :ghrsst@podaac.jpl.nasa.govcreator_url :http://mur.jpl.nasa.govproject :NASA Making Earth Science Data Records for Use in Research Environments (MEaSUREs) Programpublisher_name :GHRSST Project Officepublisher_url :http://www.ghrsst.orgpublisher_email :ghrsst-po@nceo.ac.ukprocessing_level :L4cdm_data_type :grid",
    "crumbs": [
      "Data Tutorials",
      "Data provider examples",
      "NASA Earth Data"
    ]
  },
  {
    "objectID": "notebooks-data/01_earthaccess_Downloader.html#download-granules-for-an-extended-period-of-time",
    "href": "notebooks-data/01_earthaccess_Downloader.html#download-granules-for-an-extended-period-of-time",
    "title": "NASA Earth Data",
    "section": "Download granules for an extended period of time",
    "text": "Download granules for an extended period of time\nSince you cannot slice data spatially, downloading granules is going to take up a lot of disk space if you only need data within a small bounding box. For our task, we wrote a simple function to slice data and wrote it into a new file.\nYou can consult the earthacess library website or their notebooks for code snippets on how to browse and look up collections. For this notebook, we mainly focus on the downloading aspect. First, we need to get the list of granules to download.\nSince earthacess does not support spatial slicing, we developed a method to download, slice, combine, and export data yearly, then finally delete temporary downloaded files to save disk space. Assumed that you already knew the temporal, spatial range of the dataset of your chosen, we first download the data by year into a temporary folder, then slice the data and then export the combined data to another folder.\n\n# Our approach\n# Month end not included\n\ndef download_and_combine_granules(short_name, month_start, month_end, lat1=5, lat2=25, lon1=60, lon2=80):\n    for month in pd.date_range(month_start, month_end, freq='M').strftime('%Y-%m-%d'):      \n        print('Collecting granules')\n        granules = earthaccess.granule_query().short_name(short_name).temporal(f'{month[:7]}-01',month).get(366)\n        \n        MAIN_FOLDER = 'demonstrated data/earth_data'\n        TEMP_FOLDER = 'temp'\n        path_temp_folder = os.path.join(MAIN_FOLDER, TEMP_FOLDER)\n        path_processed_folder = os.path.join(MAIN_FOLDER, short_name)\n        # create folder to store data\n        if not os.path.exists(path_temp_folder):\n            os.makedirs(path_temp_folder)\n        if not os.path.exists(path_processed_folder):\n            os.makedirs(path_processed_folder)\n        files = earthaccess.download(granules, path_temp_folder)\n       \n        \n        ## if dataset coordinates are slice-able, use:\n        print('Slicing...')\n        data = xr.open_mfdataset(f'{path_temp_folder}/*.nc').sel(lat=slice(lat1, lat2), lon=slice(lon1, lon2))\n    \n        \n        # combine files together \n        ## for some collections, coordinate names are 'lat' and 'lon' while their underlying indices are 'latitude' and 'longitude', respectively\n        ## may or may not be applicable for other datasets on the site.\n        ## get bounding box if not sliceable\n        ### lat1_idx, lat2_idx, lon1_idx, lon2_idx = get_bounding_box(os.path.join(path_temp_folder, first_file), lat1, lat2, lon1, lon2)\n        ### data = xr.open_mfdataset(f'{path_temp_folder}/*.nc').isel(latitude=slice(lat1_idx, lat2_idx+1), longitude=slice(lon1_idx, lon2_idx+1))\n        \n        data.to_netcdf(f'{path_processed_folder}/{month}.nc')\n        \n        # delete files in the temporary folder\n        print('Deleting temporary files...')\n        files = glob.glob(f'{path_temp_folder}/*.*')\n        for f in files:\n            os.remove(f)\n\ndef get_bounding_box(file_path, lat1=0, lat2=30, lon1=60, lon2=80):\n    \"\"\"\n    The dataset we experimented did not have indexed coordinates, \n    so we resorted to slicing using index positions\n    \"\"\"\n    ds = xr.open_dataset(file_path)\n    \n    lat_vals = ds.lat.values\n    lon_vals = ds.lon.values\n    \n    lat1_idx = np.abs(lat_vals-lat1).argmin()\n    lat2_idx = np.abs(lat_vals-lat2).argmin()\n    lon1_idx = np.abs(lon_vals-lon1).argmin()\n    lon2_idx = np.abs(lon_vals-lon1).argmin()\n    \n    return lat1_idx, lat2_idx, lon1_idx, lon2_idx\n\n\n# download and combine every month's worth of data\ndownload_and_combine_granules(short_name='MUR25-JPL-L4-GLOB-v04.2',\n                          month_start='2003-01', month_end='2003-03', \n                          lat1=5, lat2=25, lon1=60, lon2=80)\n\nCollecting granules\n Getting 31 granules, approx download size: 0.0 GB\nSlicing...\nDeleting temporary files...\nCollecting granules\n Getting 28 granules, approx download size: 0.0 GB\nSlicing...\nDeleting temporary files...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nlist_of_missing_dates = [\"2003-01-04\", \"2003-01-18\", \"2003-02-18\"]\n\nfor date in list_of_missing_dates:\n    result = earthaccess.search_data(\n        short_name='MUR-JPL-L4-GLOB-v4.1',\n        cloud_hosted=True,\n        bounding_box = (60, 5, 80, 25),\n        temporal=(date, date)\n    )\n    \n    MAIN_FOLDER = 'demonstrated data/earth_data'\n    TEMP_FOLDER = 'temp'\n    path_temp_folder = os.path.join(MAIN_FOLDER, TEMP_FOLDER)\n    file = earthaccess.download(result, path_temp_folder)\n\nGranules found: 1\n Getting 1 granules, approx download size: 0.0 GB\nError while downloading the file 20030218090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1.nc\nTraceback (most recent call last):\n  File \"/srv/conda/envs/notebook/lib/python3.9/site-packages/earthaccess/store.py\", line 488, in _download_file\n    r.raise_for_status()\n  File \"/srv/conda/envs/notebook/lib/python3.9/site-packages/requests/models.py\", line 960, in raise_for_status\n    raise HTTPError(http_error_msg, response=self)\nrequests.exceptions.HTTPError: 502 Server Error: Bad Gateway for url: https://archive.podaac.earthdata.nasa.gov/podaac-ops-cumulus-protected/MUR-JPL-L4-GLOB-v4.1/20030218090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1.nc",
    "crumbs": [
      "Data Tutorials",
      "Data provider examples",
      "NASA Earth Data"
    ]
  },
  {
    "objectID": "notebooks-data/01_earthaccess_Downloader.html#combine-files-together",
    "href": "notebooks-data/01_earthaccess_Downloader.html#combine-files-together",
    "title": "NASA Earth Data",
    "section": "Combine files together",
    "text": "Combine files together\nNow that we have all netcdf4 files in one place, all spatially sliced, combining the rest of the data is a piece of cake! Note that some of the data will be overlap in the process of combing data every year earlier, so it’s best practice to remove duplicates (if any)\n\nds\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:           (time: 59, lat: 17999, lon: 36000)\nCoordinates:\n  * time              (time) datetime64[ns] 2003-01-01T09:00:00 ... 2003-02-2...\n  * lat               (lat) float32 -89.99 -89.98 -89.97 ... 89.97 89.98 89.99\n  * lon               (lon) float32 -180.0 -180.0 -180.0 ... 180.0 180.0 180.0\nData variables:\n    analysed_sst      (time, lat, lon) float32 dask.array&lt;chunksize=(1, 17999, 36000), meta=np.ndarray&gt;\n    analysis_error    (time, lat, lon) float32 dask.array&lt;chunksize=(1, 17999, 36000), meta=np.ndarray&gt;\n    mask              (time, lat, lon) float32 dask.array&lt;chunksize=(1, 17999, 36000), meta=np.ndarray&gt;\n    sea_ice_fraction  (time, lat, lon) float32 dask.array&lt;chunksize=(1, 17999, 36000), meta=np.ndarray&gt;\nAttributes: (12/47)\n    Conventions:                CF-1.5\n    title:                      Daily MUR SST, Final product\n    summary:                    A merged, multi-sensor L4 Foundation SST anal...\n    references:                 http://podaac.jpl.nasa.gov/Multi-scale_Ultra-...\n    institution:                Jet Propulsion Laboratory\n    history:                    created at nominal 4-day latency; replaced nr...\n    ...                         ...\n    project:                    NASA Making Earth Science Data Records for Us...\n    publisher_name:             GHRSST Project Office\n    publisher_url:              http://www.ghrsst.org\n    publisher_email:            ghrsst-po@nceo.ac.uk\n    processing_level:           L4\n    cdm_data_type:              gridxarray.DatasetDimensions:time: 59lat: 17999lon: 36000Coordinates: (3)time(time)datetime64[ns]2003-01-01T09:00:00 ... 2003-02-...long_name :reference time of sst fieldstandard_name :timeaxis :Tcomment :Nominal time of analyzed fieldsarray(['2003-01-01T09:00:00.000000000', '2003-01-02T09:00:00.000000000',\n       '2003-01-03T09:00:00.000000000', '2003-01-04T09:00:00.000000000',\n       '2003-01-05T09:00:00.000000000', '2003-01-06T09:00:00.000000000',\n       '2003-01-07T09:00:00.000000000', '2003-01-08T09:00:00.000000000',\n       '2003-01-09T09:00:00.000000000', '2003-01-10T09:00:00.000000000',\n       '2003-01-11T09:00:00.000000000', '2003-01-12T09:00:00.000000000',\n       '2003-01-13T09:00:00.000000000', '2003-01-14T09:00:00.000000000',\n       '2003-01-15T09:00:00.000000000', '2003-01-16T09:00:00.000000000',\n       '2003-01-17T09:00:00.000000000', '2003-01-18T09:00:00.000000000',\n       '2003-01-19T09:00:00.000000000', '2003-01-20T09:00:00.000000000',\n       '2003-01-21T09:00:00.000000000', '2003-01-22T09:00:00.000000000',\n       '2003-01-23T09:00:00.000000000', '2003-01-24T09:00:00.000000000',\n       '2003-01-25T09:00:00.000000000', '2003-01-26T09:00:00.000000000',\n       '2003-01-27T09:00:00.000000000', '2003-01-28T09:00:00.000000000',\n       '2003-01-29T09:00:00.000000000', '2003-01-30T09:00:00.000000000',\n       '2003-01-31T09:00:00.000000000', '2003-02-01T09:00:00.000000000',\n       '2003-02-02T09:00:00.000000000', '2003-02-03T09:00:00.000000000',\n       '2003-02-04T09:00:00.000000000', '2003-02-05T09:00:00.000000000',\n       '2003-02-06T09:00:00.000000000', '2003-02-07T09:00:00.000000000',\n       '2003-02-08T09:00:00.000000000', '2003-02-09T09:00:00.000000000',\n       '2003-02-10T09:00:00.000000000', '2003-02-11T09:00:00.000000000',\n       '2003-02-12T09:00:00.000000000', '2003-02-13T09:00:00.000000000',\n       '2003-02-14T09:00:00.000000000', '2003-02-15T09:00:00.000000000',\n       '2003-02-16T09:00:00.000000000', '2003-02-17T09:00:00.000000000',\n       '2003-02-18T09:00:00.000000000', '2003-02-19T09:00:00.000000000',\n       '2003-02-20T09:00:00.000000000', '2003-02-21T09:00:00.000000000',\n       '2003-02-22T09:00:00.000000000', '2003-02-23T09:00:00.000000000',\n       '2003-02-24T09:00:00.000000000', '2003-02-25T09:00:00.000000000',\n       '2003-02-26T09:00:00.000000000', '2003-02-27T09:00:00.000000000',\n       '2003-02-28T09:00:00.000000000'], dtype='datetime64[ns]')lat(lat)float32-89.99 -89.98 ... 89.98 89.99long_name :latitudestandard_name :latitudeaxis :Yunits :degrees_northvalid_min :-90.0valid_max :90.0comment :nonearray([-89.99, -89.98, -89.97, ...,  89.97,  89.98,  89.99], dtype=float32)lon(lon)float32-180.0 -180.0 ... 180.0 180.0long_name :longitudestandard_name :longitudeaxis :Xunits :degrees_eastvalid_min :-180.0valid_max :180.0comment :nonearray([-179.99, -179.98, -179.97, ...,  179.98,  179.99,  180.  ],\n      dtype=float32)Data variables: (4)analysed_sst(time, lat, lon)float32dask.array&lt;chunksize=(1, 17999, 36000), meta=np.ndarray&gt;long_name :analysed sea surface temperaturestandard_name :sea_surface_foundation_temperatureunits :kelvinvalid_min :-32767valid_max :32767comment :\"Final\" version using Multi-Resolution Variational Analysis (MRVA) method for interpolationsource :AMSRE-REMSS, AVHRR_Pathfinder-PFV5.2-NODC_day, AVHRR_Pathfinder-PFV5.2-NODC_night, MODIS_A-JPL, MODIS_T-JPL, iQUAM-NOAA/NESDIS, Ice_Conc-OSISAF\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n142.42 GiB\n2.41 GiB\n\n\nShape\n(59, 17999, 36000)\n(1, 17999, 36000)\n\n\nDask graph\n59 chunks in 119 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\nanalysis_error\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(1, 17999, 36000), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\nestimated error standard deviation of analysed_sst\n\nunits :\n\nkelvin\n\nvalid_min :\n\n0\n\nvalid_max :\n\n32767\n\ncomment :\n\nnone\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n142.42 GiB\n2.41 GiB\n\n\nShape\n(59, 17999, 36000)\n(1, 17999, 36000)\n\n\nDask graph\n59 chunks in 119 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nmask\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(1, 17999, 36000), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\nsea/land field composite mask\n\nvalid_min :\n\n1\n\nvalid_max :\n\n31\n\nflag_masks :\n\n[ 1 2 4 8 16]\n\nflag_values :\n\n[ 1 2 5 9 13]\n\nflag_meanings :\n\n1=open-sea, 2=land, 5=open-lake, 9=open-sea with ice in the grid, 13=open-lake with ice in the grid\n\ncomment :\n\nmask can be used to further filter the data.\n\nsource :\n\nGMT \"grdlandmask\", ice flag from sea_ice_fraction data\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n142.42 GiB\n2.41 GiB\n\n\nShape\n(59, 17999, 36000)\n(1, 17999, 36000)\n\n\nDask graph\n59 chunks in 119 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nsea_ice_fraction\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(1, 17999, 36000), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\nsea ice area fraction\n\nstandard_name :\n\nsea ice area fraction\n\nunits :\n\nfraction (between 0 and 1)\n\nvalid_min :\n\n0\n\nvalid_max :\n\n100\n\nsource :\n\nEUMETSAT OSI-SAF, copyright EUMETSAT\n\ncomment :\n\nice data interpolated by a nearest neighbor approach.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n142.42 GiB\n2.41 GiB\n\n\nShape\n(59, 17999, 36000)\n(1, 17999, 36000)\n\n\nDask graph\n59 chunks in 119 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\nIndexes: (3)timePandasIndexPandasIndex(DatetimeIndex(['2003-01-01 09:00:00', '2003-01-02 09:00:00',\n               '2003-01-03 09:00:00', '2003-01-04 09:00:00',\n               '2003-01-05 09:00:00', '2003-01-06 09:00:00',\n               '2003-01-07 09:00:00', '2003-01-08 09:00:00',\n               '2003-01-09 09:00:00', '2003-01-10 09:00:00',\n               '2003-01-11 09:00:00', '2003-01-12 09:00:00',\n               '2003-01-13 09:00:00', '2003-01-14 09:00:00',\n               '2003-01-15 09:00:00', '2003-01-16 09:00:00',\n               '2003-01-17 09:00:00', '2003-01-18 09:00:00',\n               '2003-01-19 09:00:00', '2003-01-20 09:00:00',\n               '2003-01-21 09:00:00', '2003-01-22 09:00:00',\n               '2003-01-23 09:00:00', '2003-01-24 09:00:00',\n               '2003-01-25 09:00:00', '2003-01-26 09:00:00',\n               '2003-01-27 09:00:00', '2003-01-28 09:00:00',\n               '2003-01-29 09:00:00', '2003-01-30 09:00:00',\n               '2003-01-31 09:00:00', '2003-02-01 09:00:00',\n               '2003-02-02 09:00:00', '2003-02-03 09:00:00',\n               '2003-02-04 09:00:00', '2003-02-05 09:00:00',\n               '2003-02-06 09:00:00', '2003-02-07 09:00:00',\n               '2003-02-08 09:00:00', '2003-02-09 09:00:00',\n               '2003-02-10 09:00:00', '2003-02-11 09:00:00',\n               '2003-02-12 09:00:00', '2003-02-13 09:00:00',\n               '2003-02-14 09:00:00', '2003-02-15 09:00:00',\n               '2003-02-16 09:00:00', '2003-02-17 09:00:00',\n               '2003-02-18 09:00:00', '2003-02-19 09:00:00',\n               '2003-02-20 09:00:00', '2003-02-21 09:00:00',\n               '2003-02-22 09:00:00', '2003-02-23 09:00:00',\n               '2003-02-24 09:00:00', '2003-02-25 09:00:00',\n               '2003-02-26 09:00:00', '2003-02-27 09:00:00',\n               '2003-02-28 09:00:00'],\n              dtype='datetime64[ns]', name='time', freq=None))latPandasIndexPandasIndex(Index([-89.98999786376953,  -89.9800033569336, -89.97000122070312,\n       -89.95999908447266, -89.94999694824219, -89.94000244140625,\n       -89.93000030517578, -89.91999816894531, -89.91000366210938,\n        -89.9000015258789,\n       ...\n         89.9000015258789,  89.91000366210938,  89.91999816894531,\n        89.93000030517578,  89.94000244140625,  89.94999694824219,\n        89.95999908447266,  89.97000122070312,   89.9800033569336,\n        89.98999786376953],\n      dtype='float32', name='lat', length=17999))lonPandasIndexPandasIndex(Index([-179.99000549316406, -179.97999572753906, -179.97000122070312,\n        -179.9600067138672,  -179.9499969482422, -179.94000244140625,\n       -179.92999267578125,  -179.9199981689453, -179.91000366210938,\n       -179.89999389648438,\n       ...\n        179.91000366210938,   179.9199981689453,  179.92999267578125,\n        179.94000244140625,   179.9499969482422,   179.9600067138672,\n        179.97000122070312,  179.97999572753906,  179.99000549316406,\n                     180.0],\n      dtype='float32', name='lon', length=36000))Attributes: (47)Conventions :CF-1.5title :Daily MUR SST, Final productsummary :A merged, multi-sensor L4 Foundation SST analysis product from JPL.references :http://podaac.jpl.nasa.gov/Multi-scale_Ultra-high_Resolution_MUR-SSTinstitution :Jet Propulsion Laboratoryhistory :created at nominal 4-day latency; replaced nrt (1-day latency) version.comment :MUR = \"Multi-scale Ultra-high Reolution\"license :These data are available free of charge under data policy of JPL PO.DAAC.id :MUR-JPL-L4-GLOB-v04.1naming_authority :org.ghrsstproduct_version :04.1uuid :27665bc0-d5fc-11e1-9b23-0800200c9a66gds_version_id :2.0netcdf_version_id :4.1date_created :20150818T185930Zstart_time :20030101T090000Zstop_time :20030101T090000Ztime_coverage_start :20021231T210000Ztime_coverage_end :20030101T210000Zfile_quality_level :1source :AMSRE-REMSS, AVHRR_Pathfinder-PFV5.2-NODC_day, AVHRR_Pathfinder-PFV5.2-NODC_night, MODIS_A-JPL, MODIS_T-JPL, iQUAM-NOAA/NESDIS, Ice_Conc-OSISAFplatform :Aqua, DMSP, NOAA-POES, Suomi-NPP, Terrasensor :AMSR-E, AVHRR, MODIS, SSM/I, VIIRS, in-situMetadata_Conventions :Unidata Observation Dataset v1.0metadata_link :http://podaac.jpl.nasa.gov/ws/metadata/dataset/?format=iso&shortName=MUR-JPL-L4-GLOB-v04.1keywords :Oceans &gt; Ocean Temperature &gt; Sea Surface Temperaturekeywords_vocabulary :NASA Global Change Master Directory (GCMD) Science Keywordsstandard_name_vocabulary :NetCDF Climate and Forecast (CF) Metadata Conventionsouthernmost_latitude :-90.0northernmost_latitude :90.0westernmost_longitude :-180.0easternmost_longitude :180.0spatial_resolution :0.01 degreesgeospatial_lat_units :degrees northgeospatial_lat_resolution :0.01 degreesgeospatial_lon_units :degrees eastgeospatial_lon_resolution :0.01 degreesacknowledgment :Please acknowledge the use of these data with the following statement:  These data were provided by JPL under support by NASA MEaSUREs program.creator_name :JPL MUR SST projectcreator_email :ghrsst@podaac.jpl.nasa.govcreator_url :http://mur.jpl.nasa.govproject :NASA Making Earth Science Data Records for Use in Research Environments (MEaSUREs) Programpublisher_name :GHRSST Project Officepublisher_url :http://www.ghrsst.orgpublisher_email :ghrsst-po@nceo.ac.ukprocessing_level :L4cdm_data_type :grid\n\n\n\ncombined = xr.open_mfdataset('demonstrated data/earth_data/MUR25-JPL-L4-GLOB-v04.2/*.nc')\n\ncombined\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:           (time: 56, lat: 80, lon: 80)\nCoordinates:\n  * time              (time) datetime64[ns] 2003-01-01T09:00:00 ... 2003-02-2...\n  * lat               (lat) float32 5.125 5.375 5.625 ... 24.38 24.62 24.88\n  * lon               (lon) float32 60.12 60.38 60.62 ... 79.38 79.62 79.88\nData variables:\n    analysed_sst      (time, lat, lon) float32 dask.array&lt;chunksize=(29, 80, 80), meta=np.ndarray&gt;\n    analysis_error    (time, lat, lon) float32 dask.array&lt;chunksize=(29, 80, 80), meta=np.ndarray&gt;\n    mask              (time, lat, lon) float32 dask.array&lt;chunksize=(29, 80, 80), meta=np.ndarray&gt;\n    sea_ice_fraction  (time, lat, lon) float32 dask.array&lt;chunksize=(29, 80, 80), meta=np.ndarray&gt;\n    sst_anomaly       (time, lat, lon) float32 dask.array&lt;chunksize=(29, 80, 80), meta=np.ndarray&gt;\nAttributes: (12/54)\n    Conventions:                CF-1.7, ACDD-1.3\n    title:                      Daily 0.25-degree MUR SST, Final product\n    summary:                    A low-resolution version of the MUR SST analy...\n    keywords:                   Oceans &gt; Ocean Temperature &gt; Sea Surface Temp...\n    keywords_vocabulary:        NASA Global Change Master Directory (GCMD) Sc...\n    standard_name_vocabulary:   NetCDF Climate and Forecast (CF) Metadata Con...\n    ...                         ...\n    publisher_name:             GHRSST Project Office\n    publisher_url:              https://www.ghrsst.org\n    publisher_email:            gpc@ghrsst.org\n    file_quality_level:         3\n    metadata_link:              http://podaac.jpl.nasa.gov/ws/metadata/datase...\n    acknowledgment:             Please acknowledge the use of these data with...xarray.DatasetDimensions:time: 56lat: 80lon: 80Coordinates: (3)time(time)datetime64[ns]2003-01-01T09:00:00 ... 2003-02-...long_name :reference time of sst fieldstandard_name :timecoverage_content_type :coordinateaxis :Tcomment :Nominal time of analyzed fieldsarray(['2003-01-01T09:00:00.000000000', '2003-01-02T09:00:00.000000000',\n       '2003-01-03T09:00:00.000000000', '2003-01-05T09:00:00.000000000',\n       '2003-01-06T09:00:00.000000000', '2003-01-07T09:00:00.000000000',\n       '2003-01-08T09:00:00.000000000', '2003-01-09T09:00:00.000000000',\n       '2003-01-10T09:00:00.000000000', '2003-01-11T09:00:00.000000000',\n       '2003-01-12T09:00:00.000000000', '2003-01-13T09:00:00.000000000',\n       '2003-01-14T09:00:00.000000000', '2003-01-15T09:00:00.000000000',\n       '2003-01-16T09:00:00.000000000', '2003-01-17T09:00:00.000000000',\n       '2003-01-19T09:00:00.000000000', '2003-01-20T09:00:00.000000000',\n       '2003-01-21T09:00:00.000000000', '2003-01-22T09:00:00.000000000',\n       '2003-01-23T09:00:00.000000000', '2003-01-24T09:00:00.000000000',\n       '2003-01-25T09:00:00.000000000', '2003-01-26T09:00:00.000000000',\n       '2003-01-27T09:00:00.000000000', '2003-01-28T09:00:00.000000000',\n       '2003-01-29T09:00:00.000000000', '2003-01-30T09:00:00.000000000',\n       '2003-01-31T09:00:00.000000000', '2003-02-01T09:00:00.000000000',\n       '2003-02-02T09:00:00.000000000', '2003-02-03T09:00:00.000000000',\n       '2003-02-04T09:00:00.000000000', '2003-02-05T09:00:00.000000000',\n       '2003-02-06T09:00:00.000000000', '2003-02-07T09:00:00.000000000',\n       '2003-02-08T09:00:00.000000000', '2003-02-09T09:00:00.000000000',\n       '2003-02-10T09:00:00.000000000', '2003-02-11T09:00:00.000000000',\n       '2003-02-12T09:00:00.000000000', '2003-02-13T09:00:00.000000000',\n       '2003-02-14T09:00:00.000000000', '2003-02-15T09:00:00.000000000',\n       '2003-02-16T09:00:00.000000000', '2003-02-17T09:00:00.000000000',\n       '2003-02-19T09:00:00.000000000', '2003-02-20T09:00:00.000000000',\n       '2003-02-21T09:00:00.000000000', '2003-02-22T09:00:00.000000000',\n       '2003-02-23T09:00:00.000000000', '2003-02-24T09:00:00.000000000',\n       '2003-02-25T09:00:00.000000000', '2003-02-26T09:00:00.000000000',\n       '2003-02-27T09:00:00.000000000', '2003-02-28T09:00:00.000000000'],\n      dtype='datetime64[ns]')lat(lat)float325.125 5.375 5.625 ... 24.62 24.88long_name :latitudestandard_name :latitudecoverage_content_type :coordinateaxis :Yunits :degrees_northvalid_min :-90.0valid_max :90.0comment :geolocations inherited from the input data without correctionarray([ 5.125,  5.375,  5.625,  5.875,  6.125,  6.375,  6.625,  6.875,  7.125,\n        7.375,  7.625,  7.875,  8.125,  8.375,  8.625,  8.875,  9.125,  9.375,\n        9.625,  9.875, 10.125, 10.375, 10.625, 10.875, 11.125, 11.375, 11.625,\n       11.875, 12.125, 12.375, 12.625, 12.875, 13.125, 13.375, 13.625, 13.875,\n       14.125, 14.375, 14.625, 14.875, 15.125, 15.375, 15.625, 15.875, 16.125,\n       16.375, 16.625, 16.875, 17.125, 17.375, 17.625, 17.875, 18.125, 18.375,\n       18.625, 18.875, 19.125, 19.375, 19.625, 19.875, 20.125, 20.375, 20.625,\n       20.875, 21.125, 21.375, 21.625, 21.875, 22.125, 22.375, 22.625, 22.875,\n       23.125, 23.375, 23.625, 23.875, 24.125, 24.375, 24.625, 24.875],\n      dtype=float32)lon(lon)float3260.12 60.38 60.62 ... 79.62 79.88long_name :longitudestandard_name :longitudecoverage_content_type :coordinateaxis :Xunits :degrees_eastvalid_min :-180.0valid_max :180.0comment :geolocations inherited from the input data without correctionarray([60.125, 60.375, 60.625, 60.875, 61.125, 61.375, 61.625, 61.875, 62.125,\n       62.375, 62.625, 62.875, 63.125, 63.375, 63.625, 63.875, 64.125, 64.375,\n       64.625, 64.875, 65.125, 65.375, 65.625, 65.875, 66.125, 66.375, 66.625,\n       66.875, 67.125, 67.375, 67.625, 67.875, 68.125, 68.375, 68.625, 68.875,\n       69.125, 69.375, 69.625, 69.875, 70.125, 70.375, 70.625, 70.875, 71.125,\n       71.375, 71.625, 71.875, 72.125, 72.375, 72.625, 72.875, 73.125, 73.375,\n       73.625, 73.875, 74.125, 74.375, 74.625, 74.875, 75.125, 75.375, 75.625,\n       75.875, 76.125, 76.375, 76.625, 76.875, 77.125, 77.375, 77.625, 77.875,\n       78.125, 78.375, 78.625, 78.875, 79.125, 79.375, 79.625, 79.875],\n      dtype=float32)Data variables: (5)analysed_sst(time, lat, lon)float32dask.array&lt;chunksize=(29, 80, 80), meta=np.ndarray&gt;long_name :analysed sea surface temperaturestandard_name :sea_surface_foundation_temperaturecoverage_content_type :physicalMeasurementunits :kelvinvalid_min :-32767valid_max :32767comment :\"Final\" version using Multi-Resolution Variational Analysis (MRVA) method for interpolationsource :MODIS_T-JPL, MODIS_A-JPL, AMSRE-REMSS, AVHRR17_G-ACSPO, iQUAM-NOAA/NESDIS, Ice_Conc-OSISAF\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n1.37 MiB\n725.00 kiB\n\n\nShape\n(56, 80, 80)\n(29, 80, 80)\n\n\nDask graph\n2 chunks in 5 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\nanalysis_error\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 80, 80), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\nestimated error standard deviation of analysed_sst\n\ncoverage_content_type :\n\nqualityInformation\n\nunits :\n\nkelvin\n\nvalid_min :\n\n0\n\nvalid_max :\n\n32767\n\ncomment :\n\nuncertainty in \"analysed_sst\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n1.37 MiB\n725.00 kiB\n\n\nShape\n(56, 80, 80)\n(29, 80, 80)\n\n\nDask graph\n2 chunks in 5 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nmask\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 80, 80), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\nsea/land field composite mask\n\ncoverage_content_type :\n\nreferenceInformation\n\nvalid_min :\n\n1\n\nvalid_max :\n\n31\n\nflag_masks :\n\n[ 1 2 4 8 16]\n\nflag_meanings :\n\nwater land optional_lake_surface sea_ice optional_river_surface\n\ncomment :\n\nflag interpretation as integer values: 1=water, 2=land, 5=lake, 9=water with ice in the grid, 13=lake with ice in the grid, 17=river\n\nsource :\n\nGMT \"grdlandmask\", ice flag from sea_ice_fraction data\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n1.37 MiB\n725.00 kiB\n\n\nShape\n(56, 80, 80)\n(29, 80, 80)\n\n\nDask graph\n2 chunks in 5 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nsea_ice_fraction\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 80, 80), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\nsea ice area fraction\n\nstandard_name :\n\nsea_ice_area_fraction\n\ncoverage_content_type :\n\nauxiliaryInformation\n\nvalid_min :\n\n0\n\nvalid_max :\n\n100\n\nsource :\n\nEUMETSAT OSI-SAF, copyright EUMETSAT\n\ncomment :\n\nice fraction is a dimensionless quantity between 0 and 1; it has been interpolated by a nearest neighbor approach.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n1.37 MiB\n725.00 kiB\n\n\nShape\n(56, 80, 80)\n(29, 80, 80)\n\n\nDask graph\n2 chunks in 5 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nsst_anomaly\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 80, 80), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\nSST anomaly from a seasonal SST climatology based on the MUR data over 2003-2014 period\n\ncoverage_content_type :\n\nauxiliaryInformation\n\nunits :\n\nkelvin\n\nvalid_min :\n\n-32767\n\nvalid_max :\n\n32767\n\ncomment :\n\nanomaly reference to the day-of-year average between 2003 and 2014\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n1.37 MiB\n725.00 kiB\n\n\nShape\n(56, 80, 80)\n(29, 80, 80)\n\n\nDask graph\n2 chunks in 5 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\nIndexes: (3)timePandasIndexPandasIndex(DatetimeIndex(['2003-01-01 09:00:00', '2003-01-02 09:00:00',\n               '2003-01-03 09:00:00', '2003-01-05 09:00:00',\n               '2003-01-06 09:00:00', '2003-01-07 09:00:00',\n               '2003-01-08 09:00:00', '2003-01-09 09:00:00',\n               '2003-01-10 09:00:00', '2003-01-11 09:00:00',\n               '2003-01-12 09:00:00', '2003-01-13 09:00:00',\n               '2003-01-14 09:00:00', '2003-01-15 09:00:00',\n               '2003-01-16 09:00:00', '2003-01-17 09:00:00',\n               '2003-01-19 09:00:00', '2003-01-20 09:00:00',\n               '2003-01-21 09:00:00', '2003-01-22 09:00:00',\n               '2003-01-23 09:00:00', '2003-01-24 09:00:00',\n               '2003-01-25 09:00:00', '2003-01-26 09:00:00',\n               '2003-01-27 09:00:00', '2003-01-28 09:00:00',\n               '2003-01-29 09:00:00', '2003-01-30 09:00:00',\n               '2003-01-31 09:00:00', '2003-02-01 09:00:00',\n               '2003-02-02 09:00:00', '2003-02-03 09:00:00',\n               '2003-02-04 09:00:00', '2003-02-05 09:00:00',\n               '2003-02-06 09:00:00', '2003-02-07 09:00:00',\n               '2003-02-08 09:00:00', '2003-02-09 09:00:00',\n               '2003-02-10 09:00:00', '2003-02-11 09:00:00',\n               '2003-02-12 09:00:00', '2003-02-13 09:00:00',\n               '2003-02-14 09:00:00', '2003-02-15 09:00:00',\n               '2003-02-16 09:00:00', '2003-02-17 09:00:00',\n               '2003-02-19 09:00:00', '2003-02-20 09:00:00',\n               '2003-02-21 09:00:00', '2003-02-22 09:00:00',\n               '2003-02-23 09:00:00', '2003-02-24 09:00:00',\n               '2003-02-25 09:00:00', '2003-02-26 09:00:00',\n               '2003-02-27 09:00:00', '2003-02-28 09:00:00'],\n              dtype='datetime64[ns]', name='time', freq=None))latPandasIndexPandasIndex(Index([ 5.125,  5.375,  5.625,  5.875,  6.125,  6.375,  6.625,  6.875,  7.125,\n        7.375,  7.625,  7.875,  8.125,  8.375,  8.625,  8.875,  9.125,  9.375,\n        9.625,  9.875, 10.125, 10.375, 10.625, 10.875, 11.125, 11.375, 11.625,\n       11.875, 12.125, 12.375, 12.625, 12.875, 13.125, 13.375, 13.625, 13.875,\n       14.125, 14.375, 14.625, 14.875, 15.125, 15.375, 15.625, 15.875, 16.125,\n       16.375, 16.625, 16.875, 17.125, 17.375, 17.625, 17.875, 18.125, 18.375,\n       18.625, 18.875, 19.125, 19.375, 19.625, 19.875, 20.125, 20.375, 20.625,\n       20.875, 21.125, 21.375, 21.625, 21.875, 22.125, 22.375, 22.625, 22.875,\n       23.125, 23.375, 23.625, 23.875, 24.125, 24.375, 24.625, 24.875],\n      dtype='float32', name='lat'))lonPandasIndexPandasIndex(Index([60.125, 60.375, 60.625, 60.875, 61.125, 61.375, 61.625, 61.875, 62.125,\n       62.375, 62.625, 62.875, 63.125, 63.375, 63.625, 63.875, 64.125, 64.375,\n       64.625, 64.875, 65.125, 65.375, 65.625, 65.875, 66.125, 66.375, 66.625,\n       66.875, 67.125, 67.375, 67.625, 67.875, 68.125, 68.375, 68.625, 68.875,\n       69.125, 69.375, 69.625, 69.875, 70.125, 70.375, 70.625, 70.875, 71.125,\n       71.375, 71.625, 71.875, 72.125, 72.375, 72.625, 72.875, 73.125, 73.375,\n       73.625, 73.875, 74.125, 74.375, 74.625, 74.875, 75.125, 75.375, 75.625,\n       75.875, 76.125, 76.375, 76.625, 76.875, 77.125, 77.375, 77.625, 77.875,\n       78.125, 78.375, 78.625, 78.875, 79.125, 79.375, 79.625, 79.875],\n      dtype='float32', name='lon'))Attributes: (54)Conventions :CF-1.7, ACDD-1.3title :Daily 0.25-degree MUR SST, Final productsummary :A low-resolution version of the MUR SST analysis, a merged, multi-sensor L4 Foundation SST analysis product from JPL.keywords :Oceans &gt; Ocean Temperature &gt; Sea Surface Temperaturekeywords_vocabulary :NASA Global Change Master Directory (GCMD) Science Keywordsstandard_name_vocabulary :NetCDF Climate and Forecast (CF) Metadata Conventionhistory :created at nominal 4-day latency; replaced nrt (1-day latency) version.source :MODIS_T-JPL, MODIS_A-JPL, AMSRE-REMSS, AVHRR17_G-ACSPO, iQUAM-NOAA/NESDIS, Ice_Conc-OSISAFplatform :Terra, Aqua, NOAA-17, Buoys/Shipsinstrument :MODIS, AMSR-E, AVHRR, in-situsensor :MODIS, AMSR-E, AVHRR, in-situprocessing_level :L4cdm_data_type :gridproduct_version :04.2references :Chin et al. (2017) \"Remote Sensing of Environment\", volulme 200, pages 154-169.  http://dx.doi.org/10.1016/j.rse.2017.07.029creator_name :JPL MUR SST projectcreator_email :ghrsst@podaac.jpl.nasa.govcreator_url :http://mur.jpl.nasa.govcreator_institution :Jet Propulsion Laboratoryinstitution :Jet Propulsion Laboratoryproject :NASA MEaSUREs and COVERAGEprogram :NASA Earth Science Data and Information System (ESDIS)southernmost_latitude :-90.0northernmost_latitude :90.0westernmost_longitude :-180.0easternmost_longitude :180.0geospatial_lat_min :-90.0geospatial_lat_max :90.0geospatial_lon_min :-180.0geospatial_lon_max :180.0geospatial_lat_units :degrees northgeospatial_lat_resolution :0.25geospatial_lon_units :degrees eastgeospatial_lon_resolution :0.25date_created :2019-08-28start_time :20030101T090000Zstop_time :20030101T090000Ztime_coverage_start :20021231T210000Ztime_coverage_end :20030101T210000Ztime_coverage_resolution :P1Dlicense :These data are available free of charge under data policy of JPL PO.DAAC.id :MUR25-JPL-L4-GLOB-v04.2uuid :27665bc0-d5fc-11e1-9b23-0800200c9a66comment :MUR = \"Multi-scale Ultra-high Resolution\"naming_authority :org.ghrsstgds_version_id :2.0netcdf_version_id :04.2spatial_resolution :0.25 degreespublisher_name :GHRSST Project Officepublisher_url :https://www.ghrsst.orgpublisher_email :gpc@ghrsst.orgfile_quality_level :3metadata_link :http://podaac.jpl.nasa.gov/ws/metadata/dataset/?format=iso&shortName=MUR25-JPL-L4-GLOB-v04.2acknowledgment :Please acknowledge the use of these data with the following statement:  These data were provided by JPL under support by NASA MEaSUREs and COVERAGE programs.\n\n\nYou can see that we do not need all variables: let’s take a look into each and see what we need.\nThe data is “chunked” (broke down into smaller, more mangaeable pieces to eliminate duplicated copies of repeating data on storage). Therefore you can’t see the actual data if you clicking on the interactive panel above, as it is lazy-loaded to only show the general information of the whole object.\nSimply load the dataset to see the actual underlying data values\n\n# load sst_anomaly to see underlying data\ncombined.sst_anomaly.compute()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray 'sst_anomaly' (time: 56, lat: 80, lon: 80)&gt;\narray([[[-0.086     , -0.02      , -0.026     , ..., -0.252     ,\n         -0.49400002, -0.499     ],\n        [-0.03      , -0.24300002, -0.163     , ..., -0.344     ,\n         -0.416     , -0.38200003],\n        [-0.41700003, -0.37100002, -0.082     , ...,  0.1       ,\n         -0.066     , -0.1       ],\n        ...,\n        [-0.628     , -1.077     , -1.2720001 , ...,         nan,\n                 nan,         nan],\n        [-0.39000002, -0.564     , -0.80500007, ...,         nan,\n                 nan,         nan],\n        [-0.75600004, -0.675     , -0.53900003, ...,         nan,\n                 nan,         nan]],\n\n       [[-0.046     , -0.06900001, -0.089     , ..., -0.333     ,\n         -0.51000005, -0.60400003],\n        [-0.177     , -0.379     , -0.277     , ..., -0.34300002,\n         -0.418     , -0.43100002],\n        [-0.358     , -0.38700002, -0.16600001, ..., -0.026     ,\n         -0.158     , -0.12900001],\n...\n        [ 0.43300003,  0.48000002,  0.633     , ...,         nan,\n                 nan,         nan],\n        [ 0.439     ,  0.54200006,  0.51900005, ...,         nan,\n                 nan,         nan],\n        [ 0.642     ,  0.637     ,  0.609     , ...,         nan,\n                 nan,         nan]],\n\n       [[ 0.194     ,  0.432     ,  0.31      , ..., -0.081     ,\n          0.162     ,  0.14      ],\n        [ 0.147     ,  0.20400001,  0.164     , ...,  0.035     ,\n          0.32500002,  0.094     ],\n        [ 0.194     ,  0.216     ,  0.11300001, ...,  0.24700001,\n          0.33900002,  0.231     ],\n        ...,\n        [-0.085     ,  0.098     ,  0.23200001, ...,         nan,\n                 nan,         nan],\n        [-0.156     , -0.20700002, -0.014     , ...,         nan,\n                 nan,         nan],\n        [-0.037     , -0.07      , -0.012     , ...,         nan,\n                 nan,         nan]]], dtype=float32)\nCoordinates:\n  * time     (time) datetime64[ns] 2003-01-01T09:00:00 ... 2003-02-28T09:00:00\n  * lat      (lat) float32 5.125 5.375 5.625 5.875 ... 24.12 24.38 24.62 24.88\n  * lon      (lon) float32 60.12 60.38 60.62 60.88 ... 79.12 79.38 79.62 79.88\nAttributes:\n    long_name:              SST anomaly from a seasonal SST climatology based...\n    coverage_content_type:  auxiliaryInformation\n    units:                  kelvin\n    valid_min:              -32767\n    valid_max:              32767\n    comment:                anomaly reference to the day-of-year average betw...xarray.DataArray'sst_anomaly'time: 56lat: 80lon: 80-0.086 -0.02 -0.026 -0.038 0.026 0.099 ... nan nan nan nan nan nanarray([[[-0.086     , -0.02      , -0.026     , ..., -0.252     ,\n         -0.49400002, -0.499     ],\n        [-0.03      , -0.24300002, -0.163     , ..., -0.344     ,\n         -0.416     , -0.38200003],\n        [-0.41700003, -0.37100002, -0.082     , ...,  0.1       ,\n         -0.066     , -0.1       ],\n        ...,\n        [-0.628     , -1.077     , -1.2720001 , ...,         nan,\n                 nan,         nan],\n        [-0.39000002, -0.564     , -0.80500007, ...,         nan,\n                 nan,         nan],\n        [-0.75600004, -0.675     , -0.53900003, ...,         nan,\n                 nan,         nan]],\n\n       [[-0.046     , -0.06900001, -0.089     , ..., -0.333     ,\n         -0.51000005, -0.60400003],\n        [-0.177     , -0.379     , -0.277     , ..., -0.34300002,\n         -0.418     , -0.43100002],\n        [-0.358     , -0.38700002, -0.16600001, ..., -0.026     ,\n         -0.158     , -0.12900001],\n...\n        [ 0.43300003,  0.48000002,  0.633     , ...,         nan,\n                 nan,         nan],\n        [ 0.439     ,  0.54200006,  0.51900005, ...,         nan,\n                 nan,         nan],\n        [ 0.642     ,  0.637     ,  0.609     , ...,         nan,\n                 nan,         nan]],\n\n       [[ 0.194     ,  0.432     ,  0.31      , ..., -0.081     ,\n          0.162     ,  0.14      ],\n        [ 0.147     ,  0.20400001,  0.164     , ...,  0.035     ,\n          0.32500002,  0.094     ],\n        [ 0.194     ,  0.216     ,  0.11300001, ...,  0.24700001,\n          0.33900002,  0.231     ],\n        ...,\n        [-0.085     ,  0.098     ,  0.23200001, ...,         nan,\n                 nan,         nan],\n        [-0.156     , -0.20700002, -0.014     , ...,         nan,\n                 nan,         nan],\n        [-0.037     , -0.07      , -0.012     , ...,         nan,\n                 nan,         nan]]], dtype=float32)Coordinates: (3)time(time)datetime64[ns]2003-01-01T09:00:00 ... 2003-02-...long_name :reference time of sst fieldstandard_name :timecoverage_content_type :coordinateaxis :Tcomment :Nominal time of analyzed fieldsarray(['2003-01-01T09:00:00.000000000', '2003-01-02T09:00:00.000000000',\n       '2003-01-03T09:00:00.000000000', '2003-01-05T09:00:00.000000000',\n       '2003-01-06T09:00:00.000000000', '2003-01-07T09:00:00.000000000',\n       '2003-01-08T09:00:00.000000000', '2003-01-09T09:00:00.000000000',\n       '2003-01-10T09:00:00.000000000', '2003-01-11T09:00:00.000000000',\n       '2003-01-12T09:00:00.000000000', '2003-01-13T09:00:00.000000000',\n       '2003-01-14T09:00:00.000000000', '2003-01-15T09:00:00.000000000',\n       '2003-01-16T09:00:00.000000000', '2003-01-17T09:00:00.000000000',\n       '2003-01-19T09:00:00.000000000', '2003-01-20T09:00:00.000000000',\n       '2003-01-21T09:00:00.000000000', '2003-01-22T09:00:00.000000000',\n       '2003-01-23T09:00:00.000000000', '2003-01-24T09:00:00.000000000',\n       '2003-01-25T09:00:00.000000000', '2003-01-26T09:00:00.000000000',\n       '2003-01-27T09:00:00.000000000', '2003-01-28T09:00:00.000000000',\n       '2003-01-29T09:00:00.000000000', '2003-01-30T09:00:00.000000000',\n       '2003-01-31T09:00:00.000000000', '2003-02-01T09:00:00.000000000',\n       '2003-02-02T09:00:00.000000000', '2003-02-03T09:00:00.000000000',\n       '2003-02-04T09:00:00.000000000', '2003-02-05T09:00:00.000000000',\n       '2003-02-06T09:00:00.000000000', '2003-02-07T09:00:00.000000000',\n       '2003-02-08T09:00:00.000000000', '2003-02-09T09:00:00.000000000',\n       '2003-02-10T09:00:00.000000000', '2003-02-11T09:00:00.000000000',\n       '2003-02-12T09:00:00.000000000', '2003-02-13T09:00:00.000000000',\n       '2003-02-14T09:00:00.000000000', '2003-02-15T09:00:00.000000000',\n       '2003-02-16T09:00:00.000000000', '2003-02-17T09:00:00.000000000',\n       '2003-02-19T09:00:00.000000000', '2003-02-20T09:00:00.000000000',\n       '2003-02-21T09:00:00.000000000', '2003-02-22T09:00:00.000000000',\n       '2003-02-23T09:00:00.000000000', '2003-02-24T09:00:00.000000000',\n       '2003-02-25T09:00:00.000000000', '2003-02-26T09:00:00.000000000',\n       '2003-02-27T09:00:00.000000000', '2003-02-28T09:00:00.000000000'],\n      dtype='datetime64[ns]')lat(lat)float325.125 5.375 5.625 ... 24.62 24.88long_name :latitudestandard_name :latitudecoverage_content_type :coordinateaxis :Yunits :degrees_northvalid_min :-90.0valid_max :90.0comment :geolocations inherited from the input data without correctionarray([ 5.125,  5.375,  5.625,  5.875,  6.125,  6.375,  6.625,  6.875,  7.125,\n        7.375,  7.625,  7.875,  8.125,  8.375,  8.625,  8.875,  9.125,  9.375,\n        9.625,  9.875, 10.125, 10.375, 10.625, 10.875, 11.125, 11.375, 11.625,\n       11.875, 12.125, 12.375, 12.625, 12.875, 13.125, 13.375, 13.625, 13.875,\n       14.125, 14.375, 14.625, 14.875, 15.125, 15.375, 15.625, 15.875, 16.125,\n       16.375, 16.625, 16.875, 17.125, 17.375, 17.625, 17.875, 18.125, 18.375,\n       18.625, 18.875, 19.125, 19.375, 19.625, 19.875, 20.125, 20.375, 20.625,\n       20.875, 21.125, 21.375, 21.625, 21.875, 22.125, 22.375, 22.625, 22.875,\n       23.125, 23.375, 23.625, 23.875, 24.125, 24.375, 24.625, 24.875],\n      dtype=float32)lon(lon)float3260.12 60.38 60.62 ... 79.62 79.88long_name :longitudestandard_name :longitudecoverage_content_type :coordinateaxis :Xunits :degrees_eastvalid_min :-180.0valid_max :180.0comment :geolocations inherited from the input data without correctionarray([60.125, 60.375, 60.625, 60.875, 61.125, 61.375, 61.625, 61.875, 62.125,\n       62.375, 62.625, 62.875, 63.125, 63.375, 63.625, 63.875, 64.125, 64.375,\n       64.625, 64.875, 65.125, 65.375, 65.625, 65.875, 66.125, 66.375, 66.625,\n       66.875, 67.125, 67.375, 67.625, 67.875, 68.125, 68.375, 68.625, 68.875,\n       69.125, 69.375, 69.625, 69.875, 70.125, 70.375, 70.625, 70.875, 71.125,\n       71.375, 71.625, 71.875, 72.125, 72.375, 72.625, 72.875, 73.125, 73.375,\n       73.625, 73.875, 74.125, 74.375, 74.625, 74.875, 75.125, 75.375, 75.625,\n       75.875, 76.125, 76.375, 76.625, 76.875, 77.125, 77.375, 77.625, 77.875,\n       78.125, 78.375, 78.625, 78.875, 79.125, 79.375, 79.625, 79.875],\n      dtype=float32)Indexes: (3)timePandasIndexPandasIndex(DatetimeIndex(['2003-01-01 09:00:00', '2003-01-02 09:00:00',\n               '2003-01-03 09:00:00', '2003-01-05 09:00:00',\n               '2003-01-06 09:00:00', '2003-01-07 09:00:00',\n               '2003-01-08 09:00:00', '2003-01-09 09:00:00',\n               '2003-01-10 09:00:00', '2003-01-11 09:00:00',\n               '2003-01-12 09:00:00', '2003-01-13 09:00:00',\n               '2003-01-14 09:00:00', '2003-01-15 09:00:00',\n               '2003-01-16 09:00:00', '2003-01-17 09:00:00',\n               '2003-01-19 09:00:00', '2003-01-20 09:00:00',\n               '2003-01-21 09:00:00', '2003-01-22 09:00:00',\n               '2003-01-23 09:00:00', '2003-01-24 09:00:00',\n               '2003-01-25 09:00:00', '2003-01-26 09:00:00',\n               '2003-01-27 09:00:00', '2003-01-28 09:00:00',\n               '2003-01-29 09:00:00', '2003-01-30 09:00:00',\n               '2003-01-31 09:00:00', '2003-02-01 09:00:00',\n               '2003-02-02 09:00:00', '2003-02-03 09:00:00',\n               '2003-02-04 09:00:00', '2003-02-05 09:00:00',\n               '2003-02-06 09:00:00', '2003-02-07 09:00:00',\n               '2003-02-08 09:00:00', '2003-02-09 09:00:00',\n               '2003-02-10 09:00:00', '2003-02-11 09:00:00',\n               '2003-02-12 09:00:00', '2003-02-13 09:00:00',\n               '2003-02-14 09:00:00', '2003-02-15 09:00:00',\n               '2003-02-16 09:00:00', '2003-02-17 09:00:00',\n               '2003-02-19 09:00:00', '2003-02-20 09:00:00',\n               '2003-02-21 09:00:00', '2003-02-22 09:00:00',\n               '2003-02-23 09:00:00', '2003-02-24 09:00:00',\n               '2003-02-25 09:00:00', '2003-02-26 09:00:00',\n               '2003-02-27 09:00:00', '2003-02-28 09:00:00'],\n              dtype='datetime64[ns]', name='time', freq=None))latPandasIndexPandasIndex(Index([ 5.125,  5.375,  5.625,  5.875,  6.125,  6.375,  6.625,  6.875,  7.125,\n        7.375,  7.625,  7.875,  8.125,  8.375,  8.625,  8.875,  9.125,  9.375,\n        9.625,  9.875, 10.125, 10.375, 10.625, 10.875, 11.125, 11.375, 11.625,\n       11.875, 12.125, 12.375, 12.625, 12.875, 13.125, 13.375, 13.625, 13.875,\n       14.125, 14.375, 14.625, 14.875, 15.125, 15.375, 15.625, 15.875, 16.125,\n       16.375, 16.625, 16.875, 17.125, 17.375, 17.625, 17.875, 18.125, 18.375,\n       18.625, 18.875, 19.125, 19.375, 19.625, 19.875, 20.125, 20.375, 20.625,\n       20.875, 21.125, 21.375, 21.625, 21.875, 22.125, 22.375, 22.625, 22.875,\n       23.125, 23.375, 23.625, 23.875, 24.125, 24.375, 24.625, 24.875],\n      dtype='float32', name='lat'))lonPandasIndexPandasIndex(Index([60.125, 60.375, 60.625, 60.875, 61.125, 61.375, 61.625, 61.875, 62.125,\n       62.375, 62.625, 62.875, 63.125, 63.375, 63.625, 63.875, 64.125, 64.375,\n       64.625, 64.875, 65.125, 65.375, 65.625, 65.875, 66.125, 66.375, 66.625,\n       66.875, 67.125, 67.375, 67.625, 67.875, 68.125, 68.375, 68.625, 68.875,\n       69.125, 69.375, 69.625, 69.875, 70.125, 70.375, 70.625, 70.875, 71.125,\n       71.375, 71.625, 71.875, 72.125, 72.375, 72.625, 72.875, 73.125, 73.375,\n       73.625, 73.875, 74.125, 74.375, 74.625, 74.875, 75.125, 75.375, 75.625,\n       75.875, 76.125, 76.375, 76.625, 76.875, 77.125, 77.375, 77.625, 77.875,\n       78.125, 78.375, 78.625, 78.875, 79.125, 79.375, 79.625, 79.875],\n      dtype='float32', name='lon'))Attributes: (6)long_name :SST anomaly from a seasonal SST climatology based on the MUR data over 2003-2014 periodcoverage_content_type :auxiliaryInformationunits :kelvinvalid_min :-32767valid_max :32767comment :anomaly reference to the day-of-year average between 2003 and 2014",
    "crumbs": [
      "Data Tutorials",
      "Data provider examples",
      "NASA Earth Data"
    ]
  },
  {
    "objectID": "notebooks-data/02_Graphing_Map_Data.html#install-and-import-necessary-libraries",
    "href": "notebooks-data/02_Graphing_Map_Data.html#install-and-import-necessary-libraries",
    "title": "Graphing Data from our final product",
    "section": "(Install and) Import necessary libraries",
    "text": "(Install and) Import necessary libraries\n\n! pip install cmocean\n\nRequirement already satisfied: cmocean in /srv/conda/envs/notebook/lib/python3.9/site-packages (3.0.3)\nRequirement already satisfied: matplotlib in /srv/conda/envs/notebook/lib/python3.9/site-packages (from cmocean) (3.7.1)\nRequirement already satisfied: numpy in /srv/conda/envs/notebook/lib/python3.9/site-packages (from cmocean) (1.23.5)\nRequirement already satisfied: packaging in /srv/conda/envs/notebook/lib/python3.9/site-packages (from cmocean) (23.1)\nRequirement already satisfied: contourpy&gt;=1.0.1 in /srv/conda/envs/notebook/lib/python3.9/site-packages (from matplotlib-&gt;cmocean) (1.0.7)\nRequirement already satisfied: cycler&gt;=0.10 in /srv/conda/envs/notebook/lib/python3.9/site-packages (from matplotlib-&gt;cmocean) (0.11.0)\nRequirement already satisfied: fonttools&gt;=4.22.0 in /srv/conda/envs/notebook/lib/python3.9/site-packages (from matplotlib-&gt;cmocean) (4.39.4)\nRequirement already satisfied: kiwisolver&gt;=1.0.1 in /srv/conda/envs/notebook/lib/python3.9/site-packages (from matplotlib-&gt;cmocean) (1.4.4)\nRequirement already satisfied: pillow&gt;=6.2.0 in /srv/conda/envs/notebook/lib/python3.9/site-packages (from matplotlib-&gt;cmocean) (9.5.0)\nRequirement already satisfied: pyparsing&gt;=2.3.1 in /srv/conda/envs/notebook/lib/python3.9/site-packages (from matplotlib-&gt;cmocean) (3.0.9)\nRequirement already satisfied: python-dateutil&gt;=2.7 in /srv/conda/envs/notebook/lib/python3.9/site-packages (from matplotlib-&gt;cmocean) (2.8.2)\nRequirement already satisfied: importlib-resources&gt;=3.2.0 in /srv/conda/envs/notebook/lib/python3.9/site-packages (from matplotlib-&gt;cmocean) (5.12.0)\nRequirement already satisfied: zipp&gt;=3.1.0 in /srv/conda/envs/notebook/lib/python3.9/site-packages (from importlib-resources&gt;=3.2.0-&gt;matplotlib-&gt;cmocean) (3.15.0)\nRequirement already satisfied: six&gt;=1.5 in /srv/conda/envs/notebook/lib/python3.9/site-packages (from python-dateutil&gt;=2.7-&gt;matplotlib-&gt;cmocean) (1.16.0)\n\n\n\n! conda install --channel conda-forge pygmt -y\n\nCollecting package metadata (current_repodata.json): done\nSolving environment: done\n\n\n==&gt; WARNING: A newer version of conda exists. &lt;==\n  current version: 22.11.1\n  latest version: 23.7.4\n\nPlease update conda by running\n\n    $ conda update -n base -c conda-forge conda\n\nOr to minimize the number of packages updated during conda update use\n\n     conda install conda=23.7.4\n\n\n\n# All requested packages already installed.\n\n\n\n\n# Run in terminal\n# conda create --name pygmt --channel conda-forge pygmt\n# then run\n# conda activate pygmt\n\n\nCommandNotFoundError: Your shell has not been properly configured to use 'conda activate'.\nTo initialize your shell, run\n\n    $ conda init &lt;SHELL_NAME&gt;\n\nCurrently supported shells are:\n  - bash\n  - fish\n  - tcsh\n  - xonsh\n  - zsh\n  - powershell\n\nSee 'conda init --help' for more information and options.\n\nIMPORTANT: You may need to close and restart your shell after running 'conda init'.\n\n\n\n\n\nimport xarray as xr\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport holoviews as hv\nimport hvplot.xarray\nimport cmocean\nimport cartopy\n\n\n\n\n\n\n\n\n\n\n\nimport pygmt",
    "crumbs": [
      "Data Tutorials",
      "Data viz and use",
      "Graphing Data from our final product"
    ]
  },
  {
    "objectID": "notebooks-data/02_Graphing_Map_Data.html#read-data",
    "href": "notebooks-data/02_Graphing_Map_Data.html#read-data",
    "title": "Graphing Data from our final product",
    "section": "Read data",
    "text": "Read data\n\n# Change the file path accordingly\nds = xr.open_zarr('/home/jovyan/shared-readwrite/data/INDIAN_OCEAN_025GRID_DAILY.zarr/')",
    "crumbs": [
      "Data Tutorials",
      "Data viz and use",
      "Graphing Data from our final product"
    ]
  },
  {
    "objectID": "notebooks-data/02_Graphing_Map_Data.html#slicing-data",
    "href": "notebooks-data/02_Graphing_Map_Data.html#slicing-data",
    "title": "Graphing Data from our final product",
    "section": "Slicing data",
    "text": "Slicing data\n\nds\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:          (time: 8523, lat: 177, lon: 241)\nCoordinates:\n  * lat              (lat) float32 32.0 31.75 31.5 31.25 ... -11.5 -11.75 -12.0\n  * lon              (lon) float32 42.0 42.25 42.5 42.75 ... 101.5 101.8 102.0\n  * time             (time) datetime64[ns] 1997-09-01 1997-09-02 ... 2020-12-31\nData variables: (12/14)\n    CHL              (time, lat, lon) float32 dask.array&lt;chunksize=(29, 177, 241), meta=np.ndarray&gt;\n    CHL_uncertainty  (time, lat, lon) float32 dask.array&lt;chunksize=(29, 177, 241), meta=np.ndarray&gt;\n    adt              (time, lat, lon) float32 dask.array&lt;chunksize=(29, 177, 241), meta=np.ndarray&gt;\n    air_temp         (time, lat, lon) float32 dask.array&lt;chunksize=(29, 177, 241), meta=np.ndarray&gt;\n    direction        (time, lat, lon) float32 dask.array&lt;chunksize=(29, 177, 241), meta=np.ndarray&gt;\n    sla              (time, lat, lon) float32 dask.array&lt;chunksize=(29, 177, 241), meta=np.ndarray&gt;\n    ...               ...\n    u_curr           (time, lat, lon) float32 dask.array&lt;chunksize=(29, 177, 241), meta=np.ndarray&gt;\n    u_wind           (time, lat, lon) float32 dask.array&lt;chunksize=(29, 177, 241), meta=np.ndarray&gt;\n    ug_curr          (time, lat, lon) float32 dask.array&lt;chunksize=(29, 177, 241), meta=np.ndarray&gt;\n    v_curr           (time, lat, lon) float32 dask.array&lt;chunksize=(29, 177, 241), meta=np.ndarray&gt;\n    v_wind           (time, lat, lon) float32 dask.array&lt;chunksize=(29, 177, 241), meta=np.ndarray&gt;\n    vg_curr          (time, lat, lon) float32 dask.array&lt;chunksize=(29, 177, 241), meta=np.ndarray&gt;\nAttributes: (12/17)\n    creator_email:              minhphan@uw.edu\n    creator_name:               Minh Phan\n    creator_type:               person\n    date_created:               2023-07-07\n    geospatial_lat_max:         32.0\n    geospatial_lat_min:         -12.0\n    ...                         ...\n    geospatial_lon_units:       degrees_east\n    source:                     OSCAR, ERA5 Reanalysis, Copernicus Climate Ch...\n    summary:                    Daily mean of 0.25 x 0.25 degrees gridded dat...\n    time_coverage_end:          2020-12-31T23:59:59\n    time_coverage_start:        2000-01-01T00:00:00\n    title:                      Climate Data for Coastal Upwelling Machine Le...xarray.DatasetDimensions:time: 8523lat: 177lon: 241Coordinates: (3)lat(lat)float3232.0 31.75 31.5 ... -11.75 -12.0long_name :latitudestandard_name :latitudeunits :degrees_northarray([ 32.  ,  31.75,  31.5 ,  31.25,  31.  ,  30.75,  30.5 ,  30.25,  30.  ,\n        29.75,  29.5 ,  29.25,  29.  ,  28.75,  28.5 ,  28.25,  28.  ,  27.75,\n        27.5 ,  27.25,  27.  ,  26.75,  26.5 ,  26.25,  26.  ,  25.75,  25.5 ,\n        25.25,  25.  ,  24.75,  24.5 ,  24.25,  24.  ,  23.75,  23.5 ,  23.25,\n        23.  ,  22.75,  22.5 ,  22.25,  22.  ,  21.75,  21.5 ,  21.25,  21.  ,\n        20.75,  20.5 ,  20.25,  20.  ,  19.75,  19.5 ,  19.25,  19.  ,  18.75,\n        18.5 ,  18.25,  18.  ,  17.75,  17.5 ,  17.25,  17.  ,  16.75,  16.5 ,\n        16.25,  16.  ,  15.75,  15.5 ,  15.25,  15.  ,  14.75,  14.5 ,  14.25,\n        14.  ,  13.75,  13.5 ,  13.25,  13.  ,  12.75,  12.5 ,  12.25,  12.  ,\n        11.75,  11.5 ,  11.25,  11.  ,  10.75,  10.5 ,  10.25,  10.  ,   9.75,\n         9.5 ,   9.25,   9.  ,   8.75,   8.5 ,   8.25,   8.  ,   7.75,   7.5 ,\n         7.25,   7.  ,   6.75,   6.5 ,   6.25,   6.  ,   5.75,   5.5 ,   5.25,\n         5.  ,   4.75,   4.5 ,   4.25,   4.  ,   3.75,   3.5 ,   3.25,   3.  ,\n         2.75,   2.5 ,   2.25,   2.  ,   1.75,   1.5 ,   1.25,   1.  ,   0.75,\n         0.5 ,   0.25,   0.  ,  -0.25,  -0.5 ,  -0.75,  -1.  ,  -1.25,  -1.5 ,\n        -1.75,  -2.  ,  -2.25,  -2.5 ,  -2.75,  -3.  ,  -3.25,  -3.5 ,  -3.75,\n        -4.  ,  -4.25,  -4.5 ,  -4.75,  -5.  ,  -5.25,  -5.5 ,  -5.75,  -6.  ,\n        -6.25,  -6.5 ,  -6.75,  -7.  ,  -7.25,  -7.5 ,  -7.75,  -8.  ,  -8.25,\n        -8.5 ,  -8.75,  -9.  ,  -9.25,  -9.5 ,  -9.75, -10.  , -10.25, -10.5 ,\n       -10.75, -11.  , -11.25, -11.5 , -11.75, -12.  ], dtype=float32)lon(lon)float3242.0 42.25 42.5 ... 101.8 102.0long_name :longitudestandard_name :longitudeunits :degrees_eastarray([ 42.  ,  42.25,  42.5 , ..., 101.5 , 101.75, 102.  ], dtype=float32)time(time)datetime64[ns]1997-09-01 ... 2020-12-31axis :Tcomment :Data is averaged over the daylong_name :time centered on the daystandard_name :timetime_bounds :2000-01-01 00:00:00 to 2000-01-01 23:59:59array(['1997-09-01T00:00:00.000000000', '1997-09-02T00:00:00.000000000',\n       '1997-09-03T00:00:00.000000000', ..., '2020-12-29T00:00:00.000000000',\n       '2020-12-30T00:00:00.000000000', '2020-12-31T00:00:00.000000000'],\n      dtype='datetime64[ns]')Data variables: (14)CHL(time, lat, lon)float32dask.array&lt;chunksize=(29, 177, 241), meta=np.ndarray&gt;_ChunkSizes :[1, 256, 256]ancillary_variables :flags CHL_uncertaintycoverage_content_type :modelResultinput_files_reprocessings :Processors versions: MODIS R2022.0NRT/VIIRSN R2022.0NRT/OLCIA 07.02/VIIRSJ1 R2022.0NRT/OLCIB 07.02long_name :Chlorophyll-a concentration - Mean of the binned pixelsstandard_name :mass_concentration_of_chlorophyll_a_in_sea_watertype :surfaceunits :milligram m-3valid_max :1000.0valid_min :0.0\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n1.35 GiB\n16.27 MiB\n\n\nShape\n(8523, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n87 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\nCHL_uncertainty\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 177, 241), meta=np.ndarray&gt;\n\n\n\n\n_ChunkSizes :\n\n[1, 256, 256]\n\ncoverage_content_type :\n\nqualityInformation\n\nlong_name :\n\nChlorophyll-a concentration - Uncertainty estimation\n\nunits :\n\n%\n\nvalid_max :\n\n32767\n\nvalid_min :\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n1.35 GiB\n16.27 MiB\n\n\nShape\n(8523, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n87 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nadt\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 177, 241), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nThe absolute dynamic topography is the sea surface height above geoid; the adt is obtained as follows: adt=sla+mdt where mdt is the mean dynamic topography; see the product user manual for details\n\ngrid_mapping :\n\ncrs\n\nlong_name :\n\nAbsolute dynamic topography\n\nstandard_name :\n\nsea_surface_height_above_geoid\n\nunits :\n\nm\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n1.35 GiB\n16.27 MiB\n\n\nShape\n(8523, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n87 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nair_temp\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 177, 241), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n2 metre temperature\n\nnameCDM :\n\n2_metre_temperature_surface\n\nnameECMWF :\n\n2 metre temperature\n\nproduct_type :\n\nanalysis\n\nshortNameECMWF :\n\n2t\n\nstandard_name :\n\nair_temperature\n\nunits :\n\nK\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n1.35 GiB\n16.27 MiB\n\n\nShape\n(8523, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n87 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\ndirection\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 177, 241), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n10 metre wind direction\n\nunits :\n\n°C\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n1.35 GiB\n16.27 MiB\n\n\nShape\n(8523, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n87 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nsla\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 177, 241), meta=np.ndarray&gt;\n\n\n\n\nancillary_variables :\n\nerr_sla\n\ncomment :\n\nThe sea level anomaly is the sea surface height above mean sea surface; it is referenced to the [1993, 2012] period; see the product user manual for details\n\ngrid_mapping :\n\ncrs\n\nlong_name :\n\nSea level anomaly\n\nstandard_name :\n\nsea_surface_height_above_sea_level\n\nunits :\n\nm\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n1.35 GiB\n16.27 MiB\n\n\nShape\n(8523, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n87 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nspeed\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 177, 241), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n10 metre absolute speed\n\nunits :\n\nm s**-1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n1.35 GiB\n16.27 MiB\n\n\nShape\n(8523, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n87 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nsst\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 177, 241), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\nSea surface temperature\n\nnameCDM :\n\nSea_surface_temperature_surface\n\nnameECMWF :\n\nSea surface temperature\n\nproduct_type :\n\nanalysis\n\nshortNameECMWF :\n\nsst\n\nstandard_name :\n\nsea_surface_temperature\n\nunits :\n\nK\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n1.35 GiB\n16.27 MiB\n\n\nShape\n(8523, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n87 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nu_curr\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 177, 241), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nVelocities are an average over the top 30m of the mixed layer\n\ncoverage_content_type :\n\nmodelResult\n\ndepth :\n\n15m\n\nlong_name :\n\nzonal total surface current\n\nsource :\n\nSSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148 ; WIND source: ECMWF ERA5 10m wind DOI: 10.24381/cds.adbb2d47 ; SST source: CMC 0.2 deg SST V2.0 DOI: 10.5067/GHCMC-4FM02\n\nstandard_name :\n\neastward_sea_water_velocity\n\nunits :\n\nm s-1\n\nvalid_max :\n\n3.0\n\nvalid_min :\n\n-3.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n1.35 GiB\n16.27 MiB\n\n\nShape\n(8523, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n87 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nu_wind\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 177, 241), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n10 metre U wind component\n\nnameCDM :\n\n10_metre_U_wind_component_surface\n\nnameECMWF :\n\n10 metre U wind component\n\nproduct_type :\n\nanalysis\n\nshortNameECMWF :\n\n10u\n\nstandard_name :\n\neastward_wind\n\nunits :\n\nm s**-1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n1.35 GiB\n16.27 MiB\n\n\nShape\n(8523, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n87 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nug_curr\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 177, 241), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nGeostrophic velocities calculated from absolute dynamic topography\n\ndepth :\n\n15m\n\nlong_name :\n\nzonal geostrophic surface current\n\nsource :\n\nSSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148\n\nstandard_name :\n\ngeostrophic_eastward_sea_water_velocity\n\nunits :\n\nm s-1\n\nvalid_max :\n\n3.0\n\nvalid_min :\n\n-3.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n1.35 GiB\n16.27 MiB\n\n\nShape\n(8523, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n87 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nv_curr\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 177, 241), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nVelocities are an average over the top 30m of the mixed layer\n\ncoverage_content_type :\n\nmodelResult\n\ndepth :\n\n15m\n\nlong_name :\n\nmeridional total surface current\n\nsource :\n\nSSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148 ; WIND source: ECMWF ERA5 10m wind DOI: 10.24381/cds.adbb2d47 ; SST source: CMC 0.2 deg SST V2.0 DOI: 10.5067/GHCMC-4FM02\n\nstandard_name :\n\nnorthward_sea_water_velocity\n\nunits :\n\nm s-1\n\nvalid_max :\n\n3.0\n\nvalid_min :\n\n-3.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n1.35 GiB\n16.27 MiB\n\n\nShape\n(8523, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n87 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nv_wind\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 177, 241), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n10 metre V wind component\n\nnameCDM :\n\n10_metre_V_wind_component_surface\n\nnameECMWF :\n\n10 metre V wind component\n\nproduct_type :\n\nanalysis\n\nshortNameECMWF :\n\n10v\n\nstandard_name :\n\nnorthward_wind\n\nunits :\n\nm s**-1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n1.35 GiB\n16.27 MiB\n\n\nShape\n(8523, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n87 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nvg_curr\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 177, 241), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nGeostrophic velocities calculated from absolute dynamic topography\n\ndepth :\n\n15m\n\nlong_name :\n\nmeridional geostrophic surface current\n\nsource :\n\nSSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148\n\nstandard_name :\n\ngeostrophic_northward_sea_water_velocity\n\nunits :\n\nm s-1\n\nvalid_max :\n\n3.0\n\nvalid_min :\n\n-3.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n1.35 GiB\n16.27 MiB\n\n\nShape\n(8523, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n87 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\nAttributes: (17)creator_email :minhphan@uw.educreator_name :Minh Phancreator_type :persondate_created :2023-07-07geospatial_lat_max :32.0geospatial_lat_min :-12.0geospatial_lat_resolution :0.25geospatial_lat_units :degrees_northgeospatial_lon_max :102.0geospatial_lon_min :42.0geospatial_lon_resolution :0.25geospatial_lon_units :degrees_eastsource :OSCAR, ERA5 Reanalysis, Copernicus Climate Change Service (C3S), Copernicus Marine Environment Monitoring Service (CMEMS)summary :Daily mean of 0.25 x 0.25 degrees gridded data from multiple climate variables that may influence the patterns of coastal upwelling in the focused areatime_coverage_end :2020-12-31T23:59:59time_coverage_start :2000-01-01T00:00:00title :Climate Data for Coastal Upwelling Machine Learning Project in Indian Ocean\n\n\nWe can slice data by the dimensions (latitude, longitude, time) and data variables.\n\n# slice by latitude\n# notice how we specify the range in reverse\nds.sel(lat=slice(0, -12))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:          (time: 8523, lat: 49, lon: 241)\nCoordinates:\n  * lat              (lat) float32 0.0 -0.25 -0.5 -0.75 ... -11.5 -11.75 -12.0\n  * lon              (lon) float32 42.0 42.25 42.5 42.75 ... 101.5 101.8 102.0\n  * time             (time) datetime64[ns] 1997-09-01 1997-09-02 ... 2020-12-31\nData variables: (12/14)\n    CHL              (time, lat, lon) float32 dask.array&lt;chunksize=(29, 49, 241), meta=np.ndarray&gt;\n    CHL_uncertainty  (time, lat, lon) float32 dask.array&lt;chunksize=(29, 49, 241), meta=np.ndarray&gt;\n    adt              (time, lat, lon) float32 dask.array&lt;chunksize=(29, 49, 241), meta=np.ndarray&gt;\n    air_temp         (time, lat, lon) float32 dask.array&lt;chunksize=(29, 49, 241), meta=np.ndarray&gt;\n    direction        (time, lat, lon) float32 dask.array&lt;chunksize=(29, 49, 241), meta=np.ndarray&gt;\n    sla              (time, lat, lon) float32 dask.array&lt;chunksize=(29, 49, 241), meta=np.ndarray&gt;\n    ...               ...\n    u_curr           (time, lat, lon) float32 dask.array&lt;chunksize=(29, 49, 241), meta=np.ndarray&gt;\n    u_wind           (time, lat, lon) float32 dask.array&lt;chunksize=(29, 49, 241), meta=np.ndarray&gt;\n    ug_curr          (time, lat, lon) float32 dask.array&lt;chunksize=(29, 49, 241), meta=np.ndarray&gt;\n    v_curr           (time, lat, lon) float32 dask.array&lt;chunksize=(29, 49, 241), meta=np.ndarray&gt;\n    v_wind           (time, lat, lon) float32 dask.array&lt;chunksize=(29, 49, 241), meta=np.ndarray&gt;\n    vg_curr          (time, lat, lon) float32 dask.array&lt;chunksize=(29, 49, 241), meta=np.ndarray&gt;\nAttributes: (12/17)\n    creator_email:              minhphan@uw.edu\n    creator_name:               Minh Phan\n    creator_type:               person\n    date_created:               2023-07-07\n    geospatial_lat_max:         32.0\n    geospatial_lat_min:         -12.0\n    ...                         ...\n    geospatial_lon_units:       degrees_east\n    source:                     OSCAR, ERA5 Reanalysis, Copernicus Climate Ch...\n    summary:                    Daily mean of 0.25 x 0.25 degrees gridded dat...\n    time_coverage_end:          2020-12-31T23:59:59\n    time_coverage_start:        2000-01-01T00:00:00\n    title:                      Climate Data for Coastal Upwelling Machine Le...xarray.DatasetDimensions:time: 8523lat: 49lon: 241Coordinates: (3)lat(lat)float320.0 -0.25 -0.5 ... -11.75 -12.0long_name :latitudestandard_name :latitudeunits :degrees_northarray([  0.  ,  -0.25,  -0.5 ,  -0.75,  -1.  ,  -1.25,  -1.5 ,  -1.75,  -2.  ,\n        -2.25,  -2.5 ,  -2.75,  -3.  ,  -3.25,  -3.5 ,  -3.75,  -4.  ,  -4.25,\n        -4.5 ,  -4.75,  -5.  ,  -5.25,  -5.5 ,  -5.75,  -6.  ,  -6.25,  -6.5 ,\n        -6.75,  -7.  ,  -7.25,  -7.5 ,  -7.75,  -8.  ,  -8.25,  -8.5 ,  -8.75,\n        -9.  ,  -9.25,  -9.5 ,  -9.75, -10.  , -10.25, -10.5 , -10.75, -11.  ,\n       -11.25, -11.5 , -11.75, -12.  ], dtype=float32)lon(lon)float3242.0 42.25 42.5 ... 101.8 102.0long_name :longitudestandard_name :longitudeunits :degrees_eastarray([ 42.  ,  42.25,  42.5 , ..., 101.5 , 101.75, 102.  ], dtype=float32)time(time)datetime64[ns]1997-09-01 ... 2020-12-31axis :Tcomment :Data is averaged over the daylong_name :time centered on the daystandard_name :timetime_bounds :2000-01-01 00:00:00 to 2000-01-01 23:59:59array(['1997-09-01T00:00:00.000000000', '1997-09-02T00:00:00.000000000',\n       '1997-09-03T00:00:00.000000000', ..., '2020-12-29T00:00:00.000000000',\n       '2020-12-30T00:00:00.000000000', '2020-12-31T00:00:00.000000000'],\n      dtype='datetime64[ns]')Data variables: (14)CHL(time, lat, lon)float32dask.array&lt;chunksize=(29, 49, 241), meta=np.ndarray&gt;_ChunkSizes :[1, 256, 256]ancillary_variables :flags CHL_uncertaintycoverage_content_type :modelResultinput_files_reprocessings :Processors versions: MODIS R2022.0NRT/VIIRSN R2022.0NRT/OLCIA 07.02/VIIRSJ1 R2022.0NRT/OLCIB 07.02long_name :Chlorophyll-a concentration - Mean of the binned pixelsstandard_name :mass_concentration_of_chlorophyll_a_in_sea_watertype :surfaceunits :milligram m-3valid_max :1000.0valid_min :0.0\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n383.94 MiB\n4.50 MiB\n\n\nShape\n(8523, 49, 241)\n(100, 49, 241)\n\n\nDask graph\n87 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\nCHL_uncertainty\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 49, 241), meta=np.ndarray&gt;\n\n\n\n\n_ChunkSizes :\n\n[1, 256, 256]\n\ncoverage_content_type :\n\nqualityInformation\n\nlong_name :\n\nChlorophyll-a concentration - Uncertainty estimation\n\nunits :\n\n%\n\nvalid_max :\n\n32767\n\nvalid_min :\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n383.94 MiB\n4.50 MiB\n\n\nShape\n(8523, 49, 241)\n(100, 49, 241)\n\n\nDask graph\n87 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nadt\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 49, 241), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nThe absolute dynamic topography is the sea surface height above geoid; the adt is obtained as follows: adt=sla+mdt where mdt is the mean dynamic topography; see the product user manual for details\n\ngrid_mapping :\n\ncrs\n\nlong_name :\n\nAbsolute dynamic topography\n\nstandard_name :\n\nsea_surface_height_above_geoid\n\nunits :\n\nm\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n383.94 MiB\n4.50 MiB\n\n\nShape\n(8523, 49, 241)\n(100, 49, 241)\n\n\nDask graph\n87 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nair_temp\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 49, 241), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n2 metre temperature\n\nnameCDM :\n\n2_metre_temperature_surface\n\nnameECMWF :\n\n2 metre temperature\n\nproduct_type :\n\nanalysis\n\nshortNameECMWF :\n\n2t\n\nstandard_name :\n\nair_temperature\n\nunits :\n\nK\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n383.94 MiB\n4.50 MiB\n\n\nShape\n(8523, 49, 241)\n(100, 49, 241)\n\n\nDask graph\n87 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\ndirection\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 49, 241), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n10 metre wind direction\n\nunits :\n\n°C\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n383.94 MiB\n4.50 MiB\n\n\nShape\n(8523, 49, 241)\n(100, 49, 241)\n\n\nDask graph\n87 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nsla\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 49, 241), meta=np.ndarray&gt;\n\n\n\n\nancillary_variables :\n\nerr_sla\n\ncomment :\n\nThe sea level anomaly is the sea surface height above mean sea surface; it is referenced to the [1993, 2012] period; see the product user manual for details\n\ngrid_mapping :\n\ncrs\n\nlong_name :\n\nSea level anomaly\n\nstandard_name :\n\nsea_surface_height_above_sea_level\n\nunits :\n\nm\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n383.94 MiB\n4.50 MiB\n\n\nShape\n(8523, 49, 241)\n(100, 49, 241)\n\n\nDask graph\n87 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nspeed\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 49, 241), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n10 metre absolute speed\n\nunits :\n\nm s**-1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n383.94 MiB\n4.50 MiB\n\n\nShape\n(8523, 49, 241)\n(100, 49, 241)\n\n\nDask graph\n87 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nsst\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 49, 241), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\nSea surface temperature\n\nnameCDM :\n\nSea_surface_temperature_surface\n\nnameECMWF :\n\nSea surface temperature\n\nproduct_type :\n\nanalysis\n\nshortNameECMWF :\n\nsst\n\nstandard_name :\n\nsea_surface_temperature\n\nunits :\n\nK\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n383.94 MiB\n4.50 MiB\n\n\nShape\n(8523, 49, 241)\n(100, 49, 241)\n\n\nDask graph\n87 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nu_curr\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 49, 241), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nVelocities are an average over the top 30m of the mixed layer\n\ncoverage_content_type :\n\nmodelResult\n\ndepth :\n\n15m\n\nlong_name :\n\nzonal total surface current\n\nsource :\n\nSSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148 ; WIND source: ECMWF ERA5 10m wind DOI: 10.24381/cds.adbb2d47 ; SST source: CMC 0.2 deg SST V2.0 DOI: 10.5067/GHCMC-4FM02\n\nstandard_name :\n\neastward_sea_water_velocity\n\nunits :\n\nm s-1\n\nvalid_max :\n\n3.0\n\nvalid_min :\n\n-3.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n383.94 MiB\n4.50 MiB\n\n\nShape\n(8523, 49, 241)\n(100, 49, 241)\n\n\nDask graph\n87 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nu_wind\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 49, 241), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n10 metre U wind component\n\nnameCDM :\n\n10_metre_U_wind_component_surface\n\nnameECMWF :\n\n10 metre U wind component\n\nproduct_type :\n\nanalysis\n\nshortNameECMWF :\n\n10u\n\nstandard_name :\n\neastward_wind\n\nunits :\n\nm s**-1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n383.94 MiB\n4.50 MiB\n\n\nShape\n(8523, 49, 241)\n(100, 49, 241)\n\n\nDask graph\n87 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nug_curr\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 49, 241), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nGeostrophic velocities calculated from absolute dynamic topography\n\ndepth :\n\n15m\n\nlong_name :\n\nzonal geostrophic surface current\n\nsource :\n\nSSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148\n\nstandard_name :\n\ngeostrophic_eastward_sea_water_velocity\n\nunits :\n\nm s-1\n\nvalid_max :\n\n3.0\n\nvalid_min :\n\n-3.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n383.94 MiB\n4.50 MiB\n\n\nShape\n(8523, 49, 241)\n(100, 49, 241)\n\n\nDask graph\n87 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nv_curr\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 49, 241), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nVelocities are an average over the top 30m of the mixed layer\n\ncoverage_content_type :\n\nmodelResult\n\ndepth :\n\n15m\n\nlong_name :\n\nmeridional total surface current\n\nsource :\n\nSSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148 ; WIND source: ECMWF ERA5 10m wind DOI: 10.24381/cds.adbb2d47 ; SST source: CMC 0.2 deg SST V2.0 DOI: 10.5067/GHCMC-4FM02\n\nstandard_name :\n\nnorthward_sea_water_velocity\n\nunits :\n\nm s-1\n\nvalid_max :\n\n3.0\n\nvalid_min :\n\n-3.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n383.94 MiB\n4.50 MiB\n\n\nShape\n(8523, 49, 241)\n(100, 49, 241)\n\n\nDask graph\n87 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nv_wind\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 49, 241), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n10 metre V wind component\n\nnameCDM :\n\n10_metre_V_wind_component_surface\n\nnameECMWF :\n\n10 metre V wind component\n\nproduct_type :\n\nanalysis\n\nshortNameECMWF :\n\n10v\n\nstandard_name :\n\nnorthward_wind\n\nunits :\n\nm s**-1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n383.94 MiB\n4.50 MiB\n\n\nShape\n(8523, 49, 241)\n(100, 49, 241)\n\n\nDask graph\n87 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nvg_curr\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 49, 241), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nGeostrophic velocities calculated from absolute dynamic topography\n\ndepth :\n\n15m\n\nlong_name :\n\nmeridional geostrophic surface current\n\nsource :\n\nSSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148\n\nstandard_name :\n\ngeostrophic_northward_sea_water_velocity\n\nunits :\n\nm s-1\n\nvalid_max :\n\n3.0\n\nvalid_min :\n\n-3.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n383.94 MiB\n4.50 MiB\n\n\nShape\n(8523, 49, 241)\n(100, 49, 241)\n\n\nDask graph\n87 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\nAttributes: (17)creator_email :minhphan@uw.educreator_name :Minh Phancreator_type :persondate_created :2023-07-07geospatial_lat_max :32.0geospatial_lat_min :-12.0geospatial_lat_resolution :0.25geospatial_lat_units :degrees_northgeospatial_lon_max :102.0geospatial_lon_min :42.0geospatial_lon_resolution :0.25geospatial_lon_units :degrees_eastsource :OSCAR, ERA5 Reanalysis, Copernicus Climate Change Service (C3S), Copernicus Marine Environment Monitoring Service (CMEMS)summary :Daily mean of 0.25 x 0.25 degrees gridded data from multiple climate variables that may influence the patterns of coastal upwelling in the focused areatime_coverage_end :2020-12-31T23:59:59time_coverage_start :2000-01-01T00:00:00title :Climate Data for Coastal Upwelling Machine Learning Project in Indian Ocean\n\n\n\n# slice by longitude\nds.sel(lon=slice(42, 45))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:          (time: 8523, lat: 177, lon: 13)\nCoordinates:\n  * lat              (lat) float32 32.0 31.75 31.5 31.25 ... -11.5 -11.75 -12.0\n  * lon              (lon) float32 42.0 42.25 42.5 42.75 ... 44.5 44.75 45.0\n  * time             (time) datetime64[ns] 1997-09-01 1997-09-02 ... 2020-12-31\nData variables: (12/14)\n    CHL              (time, lat, lon) float32 dask.array&lt;chunksize=(29, 177, 13), meta=np.ndarray&gt;\n    CHL_uncertainty  (time, lat, lon) float32 dask.array&lt;chunksize=(29, 177, 13), meta=np.ndarray&gt;\n    adt              (time, lat, lon) float32 dask.array&lt;chunksize=(29, 177, 13), meta=np.ndarray&gt;\n    air_temp         (time, lat, lon) float32 dask.array&lt;chunksize=(29, 177, 13), meta=np.ndarray&gt;\n    direction        (time, lat, lon) float32 dask.array&lt;chunksize=(29, 177, 13), meta=np.ndarray&gt;\n    sla              (time, lat, lon) float32 dask.array&lt;chunksize=(29, 177, 13), meta=np.ndarray&gt;\n    ...               ...\n    u_curr           (time, lat, lon) float32 dask.array&lt;chunksize=(29, 177, 13), meta=np.ndarray&gt;\n    u_wind           (time, lat, lon) float32 dask.array&lt;chunksize=(29, 177, 13), meta=np.ndarray&gt;\n    ug_curr          (time, lat, lon) float32 dask.array&lt;chunksize=(29, 177, 13), meta=np.ndarray&gt;\n    v_curr           (time, lat, lon) float32 dask.array&lt;chunksize=(29, 177, 13), meta=np.ndarray&gt;\n    v_wind           (time, lat, lon) float32 dask.array&lt;chunksize=(29, 177, 13), meta=np.ndarray&gt;\n    vg_curr          (time, lat, lon) float32 dask.array&lt;chunksize=(29, 177, 13), meta=np.ndarray&gt;\nAttributes: (12/17)\n    creator_email:              minhphan@uw.edu\n    creator_name:               Minh Phan\n    creator_type:               person\n    date_created:               2023-07-07\n    geospatial_lat_max:         32.0\n    geospatial_lat_min:         -12.0\n    ...                         ...\n    geospatial_lon_units:       degrees_east\n    source:                     OSCAR, ERA5 Reanalysis, Copernicus Climate Ch...\n    summary:                    Daily mean of 0.25 x 0.25 degrees gridded dat...\n    time_coverage_end:          2020-12-31T23:59:59\n    time_coverage_start:        2000-01-01T00:00:00\n    title:                      Climate Data for Coastal Upwelling Machine Le...xarray.DatasetDimensions:time: 8523lat: 177lon: 13Coordinates: (3)lat(lat)float3232.0 31.75 31.5 ... -11.75 -12.0long_name :latitudestandard_name :latitudeunits :degrees_northarray([ 32.  ,  31.75,  31.5 ,  31.25,  31.  ,  30.75,  30.5 ,  30.25,  30.  ,\n        29.75,  29.5 ,  29.25,  29.  ,  28.75,  28.5 ,  28.25,  28.  ,  27.75,\n        27.5 ,  27.25,  27.  ,  26.75,  26.5 ,  26.25,  26.  ,  25.75,  25.5 ,\n        25.25,  25.  ,  24.75,  24.5 ,  24.25,  24.  ,  23.75,  23.5 ,  23.25,\n        23.  ,  22.75,  22.5 ,  22.25,  22.  ,  21.75,  21.5 ,  21.25,  21.  ,\n        20.75,  20.5 ,  20.25,  20.  ,  19.75,  19.5 ,  19.25,  19.  ,  18.75,\n        18.5 ,  18.25,  18.  ,  17.75,  17.5 ,  17.25,  17.  ,  16.75,  16.5 ,\n        16.25,  16.  ,  15.75,  15.5 ,  15.25,  15.  ,  14.75,  14.5 ,  14.25,\n        14.  ,  13.75,  13.5 ,  13.25,  13.  ,  12.75,  12.5 ,  12.25,  12.  ,\n        11.75,  11.5 ,  11.25,  11.  ,  10.75,  10.5 ,  10.25,  10.  ,   9.75,\n         9.5 ,   9.25,   9.  ,   8.75,   8.5 ,   8.25,   8.  ,   7.75,   7.5 ,\n         7.25,   7.  ,   6.75,   6.5 ,   6.25,   6.  ,   5.75,   5.5 ,   5.25,\n         5.  ,   4.75,   4.5 ,   4.25,   4.  ,   3.75,   3.5 ,   3.25,   3.  ,\n         2.75,   2.5 ,   2.25,   2.  ,   1.75,   1.5 ,   1.25,   1.  ,   0.75,\n         0.5 ,   0.25,   0.  ,  -0.25,  -0.5 ,  -0.75,  -1.  ,  -1.25,  -1.5 ,\n        -1.75,  -2.  ,  -2.25,  -2.5 ,  -2.75,  -3.  ,  -3.25,  -3.5 ,  -3.75,\n        -4.  ,  -4.25,  -4.5 ,  -4.75,  -5.  ,  -5.25,  -5.5 ,  -5.75,  -6.  ,\n        -6.25,  -6.5 ,  -6.75,  -7.  ,  -7.25,  -7.5 ,  -7.75,  -8.  ,  -8.25,\n        -8.5 ,  -8.75,  -9.  ,  -9.25,  -9.5 ,  -9.75, -10.  , -10.25, -10.5 ,\n       -10.75, -11.  , -11.25, -11.5 , -11.75, -12.  ], dtype=float32)lon(lon)float3242.0 42.25 42.5 ... 44.5 44.75 45.0long_name :longitudestandard_name :longitudeunits :degrees_eastarray([42.  , 42.25, 42.5 , 42.75, 43.  , 43.25, 43.5 , 43.75, 44.  , 44.25,\n       44.5 , 44.75, 45.  ], dtype=float32)time(time)datetime64[ns]1997-09-01 ... 2020-12-31axis :Tcomment :Data is averaged over the daylong_name :time centered on the daystandard_name :timetime_bounds :2000-01-01 00:00:00 to 2000-01-01 23:59:59array(['1997-09-01T00:00:00.000000000', '1997-09-02T00:00:00.000000000',\n       '1997-09-03T00:00:00.000000000', ..., '2020-12-29T00:00:00.000000000',\n       '2020-12-30T00:00:00.000000000', '2020-12-31T00:00:00.000000000'],\n      dtype='datetime64[ns]')Data variables: (14)CHL(time, lat, lon)float32dask.array&lt;chunksize=(29, 177, 13), meta=np.ndarray&gt;_ChunkSizes :[1, 256, 256]ancillary_variables :flags CHL_uncertaintycoverage_content_type :modelResultinput_files_reprocessings :Processors versions: MODIS R2022.0NRT/VIIRSN R2022.0NRT/OLCIA 07.02/VIIRSJ1 R2022.0NRT/OLCIB 07.02long_name :Chlorophyll-a concentration - Mean of the binned pixelsstandard_name :mass_concentration_of_chlorophyll_a_in_sea_watertype :surfaceunits :milligram m-3valid_max :1000.0valid_min :0.0\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n74.81 MiB\n898.83 kiB\n\n\nShape\n(8523, 177, 13)\n(100, 177, 13)\n\n\nDask graph\n87 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\nCHL_uncertainty\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 177, 13), meta=np.ndarray&gt;\n\n\n\n\n_ChunkSizes :\n\n[1, 256, 256]\n\ncoverage_content_type :\n\nqualityInformation\n\nlong_name :\n\nChlorophyll-a concentration - Uncertainty estimation\n\nunits :\n\n%\n\nvalid_max :\n\n32767\n\nvalid_min :\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n74.81 MiB\n898.83 kiB\n\n\nShape\n(8523, 177, 13)\n(100, 177, 13)\n\n\nDask graph\n87 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nadt\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 177, 13), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nThe absolute dynamic topography is the sea surface height above geoid; the adt is obtained as follows: adt=sla+mdt where mdt is the mean dynamic topography; see the product user manual for details\n\ngrid_mapping :\n\ncrs\n\nlong_name :\n\nAbsolute dynamic topography\n\nstandard_name :\n\nsea_surface_height_above_geoid\n\nunits :\n\nm\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n74.81 MiB\n898.83 kiB\n\n\nShape\n(8523, 177, 13)\n(100, 177, 13)\n\n\nDask graph\n87 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nair_temp\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 177, 13), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n2 metre temperature\n\nnameCDM :\n\n2_metre_temperature_surface\n\nnameECMWF :\n\n2 metre temperature\n\nproduct_type :\n\nanalysis\n\nshortNameECMWF :\n\n2t\n\nstandard_name :\n\nair_temperature\n\nunits :\n\nK\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n74.81 MiB\n898.83 kiB\n\n\nShape\n(8523, 177, 13)\n(100, 177, 13)\n\n\nDask graph\n87 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\ndirection\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 177, 13), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n10 metre wind direction\n\nunits :\n\n°C\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n74.81 MiB\n898.83 kiB\n\n\nShape\n(8523, 177, 13)\n(100, 177, 13)\n\n\nDask graph\n87 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nsla\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 177, 13), meta=np.ndarray&gt;\n\n\n\n\nancillary_variables :\n\nerr_sla\n\ncomment :\n\nThe sea level anomaly is the sea surface height above mean sea surface; it is referenced to the [1993, 2012] period; see the product user manual for details\n\ngrid_mapping :\n\ncrs\n\nlong_name :\n\nSea level anomaly\n\nstandard_name :\n\nsea_surface_height_above_sea_level\n\nunits :\n\nm\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n74.81 MiB\n898.83 kiB\n\n\nShape\n(8523, 177, 13)\n(100, 177, 13)\n\n\nDask graph\n87 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nspeed\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 177, 13), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n10 metre absolute speed\n\nunits :\n\nm s**-1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n74.81 MiB\n898.83 kiB\n\n\nShape\n(8523, 177, 13)\n(100, 177, 13)\n\n\nDask graph\n87 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nsst\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 177, 13), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\nSea surface temperature\n\nnameCDM :\n\nSea_surface_temperature_surface\n\nnameECMWF :\n\nSea surface temperature\n\nproduct_type :\n\nanalysis\n\nshortNameECMWF :\n\nsst\n\nstandard_name :\n\nsea_surface_temperature\n\nunits :\n\nK\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n74.81 MiB\n898.83 kiB\n\n\nShape\n(8523, 177, 13)\n(100, 177, 13)\n\n\nDask graph\n87 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nu_curr\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 177, 13), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nVelocities are an average over the top 30m of the mixed layer\n\ncoverage_content_type :\n\nmodelResult\n\ndepth :\n\n15m\n\nlong_name :\n\nzonal total surface current\n\nsource :\n\nSSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148 ; WIND source: ECMWF ERA5 10m wind DOI: 10.24381/cds.adbb2d47 ; SST source: CMC 0.2 deg SST V2.0 DOI: 10.5067/GHCMC-4FM02\n\nstandard_name :\n\neastward_sea_water_velocity\n\nunits :\n\nm s-1\n\nvalid_max :\n\n3.0\n\nvalid_min :\n\n-3.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n74.81 MiB\n898.83 kiB\n\n\nShape\n(8523, 177, 13)\n(100, 177, 13)\n\n\nDask graph\n87 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nu_wind\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 177, 13), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n10 metre U wind component\n\nnameCDM :\n\n10_metre_U_wind_component_surface\n\nnameECMWF :\n\n10 metre U wind component\n\nproduct_type :\n\nanalysis\n\nshortNameECMWF :\n\n10u\n\nstandard_name :\n\neastward_wind\n\nunits :\n\nm s**-1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n74.81 MiB\n898.83 kiB\n\n\nShape\n(8523, 177, 13)\n(100, 177, 13)\n\n\nDask graph\n87 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nug_curr\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 177, 13), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nGeostrophic velocities calculated from absolute dynamic topography\n\ndepth :\n\n15m\n\nlong_name :\n\nzonal geostrophic surface current\n\nsource :\n\nSSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148\n\nstandard_name :\n\ngeostrophic_eastward_sea_water_velocity\n\nunits :\n\nm s-1\n\nvalid_max :\n\n3.0\n\nvalid_min :\n\n-3.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n74.81 MiB\n898.83 kiB\n\n\nShape\n(8523, 177, 13)\n(100, 177, 13)\n\n\nDask graph\n87 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nv_curr\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 177, 13), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nVelocities are an average over the top 30m of the mixed layer\n\ncoverage_content_type :\n\nmodelResult\n\ndepth :\n\n15m\n\nlong_name :\n\nmeridional total surface current\n\nsource :\n\nSSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148 ; WIND source: ECMWF ERA5 10m wind DOI: 10.24381/cds.adbb2d47 ; SST source: CMC 0.2 deg SST V2.0 DOI: 10.5067/GHCMC-4FM02\n\nstandard_name :\n\nnorthward_sea_water_velocity\n\nunits :\n\nm s-1\n\nvalid_max :\n\n3.0\n\nvalid_min :\n\n-3.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n74.81 MiB\n898.83 kiB\n\n\nShape\n(8523, 177, 13)\n(100, 177, 13)\n\n\nDask graph\n87 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nv_wind\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 177, 13), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n10 metre V wind component\n\nnameCDM :\n\n10_metre_V_wind_component_surface\n\nnameECMWF :\n\n10 metre V wind component\n\nproduct_type :\n\nanalysis\n\nshortNameECMWF :\n\n10v\n\nstandard_name :\n\nnorthward_wind\n\nunits :\n\nm s**-1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n74.81 MiB\n898.83 kiB\n\n\nShape\n(8523, 177, 13)\n(100, 177, 13)\n\n\nDask graph\n87 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nvg_curr\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 177, 13), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nGeostrophic velocities calculated from absolute dynamic topography\n\ndepth :\n\n15m\n\nlong_name :\n\nmeridional geostrophic surface current\n\nsource :\n\nSSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148\n\nstandard_name :\n\ngeostrophic_northward_sea_water_velocity\n\nunits :\n\nm s-1\n\nvalid_max :\n\n3.0\n\nvalid_min :\n\n-3.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n74.81 MiB\n898.83 kiB\n\n\nShape\n(8523, 177, 13)\n(100, 177, 13)\n\n\nDask graph\n87 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\nAttributes: (17)creator_email :minhphan@uw.educreator_name :Minh Phancreator_type :persondate_created :2023-07-07geospatial_lat_max :32.0geospatial_lat_min :-12.0geospatial_lat_resolution :0.25geospatial_lat_units :degrees_northgeospatial_lon_max :102.0geospatial_lon_min :42.0geospatial_lon_resolution :0.25geospatial_lon_units :degrees_eastsource :OSCAR, ERA5 Reanalysis, Copernicus Climate Change Service (C3S), Copernicus Marine Environment Monitoring Service (CMEMS)summary :Daily mean of 0.25 x 0.25 degrees gridded data from multiple climate variables that may influence the patterns of coastal upwelling in the focused areatime_coverage_end :2020-12-31T23:59:59time_coverage_start :2000-01-01T00:00:00title :Climate Data for Coastal Upwelling Machine Learning Project in Indian Ocean\n\n\n\n# slice by time\nds.sel(time=slice('1998', '1999'))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:          (time: 730, lat: 177, lon: 241)\nCoordinates:\n  * lat              (lat) float32 32.0 31.75 31.5 31.25 ... -11.5 -11.75 -12.0\n  * lon              (lon) float32 42.0 42.25 42.5 42.75 ... 101.5 101.8 102.0\n  * time             (time) datetime64[ns] 1998-01-01 1998-01-02 ... 1999-12-31\nData variables: (12/14)\n    CHL              (time, lat, lon) float32 dask.array&lt;chunksize=(7, 177, 241), meta=np.ndarray&gt;\n    CHL_uncertainty  (time, lat, lon) float32 dask.array&lt;chunksize=(7, 177, 241), meta=np.ndarray&gt;\n    adt              (time, lat, lon) float32 dask.array&lt;chunksize=(7, 177, 241), meta=np.ndarray&gt;\n    air_temp         (time, lat, lon) float32 dask.array&lt;chunksize=(7, 177, 241), meta=np.ndarray&gt;\n    direction        (time, lat, lon) float32 dask.array&lt;chunksize=(7, 177, 241), meta=np.ndarray&gt;\n    sla              (time, lat, lon) float32 dask.array&lt;chunksize=(7, 177, 241), meta=np.ndarray&gt;\n    ...               ...\n    u_curr           (time, lat, lon) float32 dask.array&lt;chunksize=(7, 177, 241), meta=np.ndarray&gt;\n    u_wind           (time, lat, lon) float32 dask.array&lt;chunksize=(7, 177, 241), meta=np.ndarray&gt;\n    ug_curr          (time, lat, lon) float32 dask.array&lt;chunksize=(7, 177, 241), meta=np.ndarray&gt;\n    v_curr           (time, lat, lon) float32 dask.array&lt;chunksize=(7, 177, 241), meta=np.ndarray&gt;\n    v_wind           (time, lat, lon) float32 dask.array&lt;chunksize=(7, 177, 241), meta=np.ndarray&gt;\n    vg_curr          (time, lat, lon) float32 dask.array&lt;chunksize=(7, 177, 241), meta=np.ndarray&gt;\nAttributes: (12/17)\n    creator_email:              minhphan@uw.edu\n    creator_name:               Minh Phan\n    creator_type:               person\n    date_created:               2023-07-07\n    geospatial_lat_max:         32.0\n    geospatial_lat_min:         -12.0\n    ...                         ...\n    geospatial_lon_units:       degrees_east\n    source:                     OSCAR, ERA5 Reanalysis, Copernicus Climate Ch...\n    summary:                    Daily mean of 0.25 x 0.25 degrees gridded dat...\n    time_coverage_end:          2020-12-31T23:59:59\n    time_coverage_start:        2000-01-01T00:00:00\n    title:                      Climate Data for Coastal Upwelling Machine Le...xarray.DatasetDimensions:time: 730lat: 177lon: 241Coordinates: (3)lat(lat)float3232.0 31.75 31.5 ... -11.75 -12.0long_name :latitudestandard_name :latitudeunits :degrees_northarray([ 32.  ,  31.75,  31.5 ,  31.25,  31.  ,  30.75,  30.5 ,  30.25,  30.  ,\n        29.75,  29.5 ,  29.25,  29.  ,  28.75,  28.5 ,  28.25,  28.  ,  27.75,\n        27.5 ,  27.25,  27.  ,  26.75,  26.5 ,  26.25,  26.  ,  25.75,  25.5 ,\n        25.25,  25.  ,  24.75,  24.5 ,  24.25,  24.  ,  23.75,  23.5 ,  23.25,\n        23.  ,  22.75,  22.5 ,  22.25,  22.  ,  21.75,  21.5 ,  21.25,  21.  ,\n        20.75,  20.5 ,  20.25,  20.  ,  19.75,  19.5 ,  19.25,  19.  ,  18.75,\n        18.5 ,  18.25,  18.  ,  17.75,  17.5 ,  17.25,  17.  ,  16.75,  16.5 ,\n        16.25,  16.  ,  15.75,  15.5 ,  15.25,  15.  ,  14.75,  14.5 ,  14.25,\n        14.  ,  13.75,  13.5 ,  13.25,  13.  ,  12.75,  12.5 ,  12.25,  12.  ,\n        11.75,  11.5 ,  11.25,  11.  ,  10.75,  10.5 ,  10.25,  10.  ,   9.75,\n         9.5 ,   9.25,   9.  ,   8.75,   8.5 ,   8.25,   8.  ,   7.75,   7.5 ,\n         7.25,   7.  ,   6.75,   6.5 ,   6.25,   6.  ,   5.75,   5.5 ,   5.25,\n         5.  ,   4.75,   4.5 ,   4.25,   4.  ,   3.75,   3.5 ,   3.25,   3.  ,\n         2.75,   2.5 ,   2.25,   2.  ,   1.75,   1.5 ,   1.25,   1.  ,   0.75,\n         0.5 ,   0.25,   0.  ,  -0.25,  -0.5 ,  -0.75,  -1.  ,  -1.25,  -1.5 ,\n        -1.75,  -2.  ,  -2.25,  -2.5 ,  -2.75,  -3.  ,  -3.25,  -3.5 ,  -3.75,\n        -4.  ,  -4.25,  -4.5 ,  -4.75,  -5.  ,  -5.25,  -5.5 ,  -5.75,  -6.  ,\n        -6.25,  -6.5 ,  -6.75,  -7.  ,  -7.25,  -7.5 ,  -7.75,  -8.  ,  -8.25,\n        -8.5 ,  -8.75,  -9.  ,  -9.25,  -9.5 ,  -9.75, -10.  , -10.25, -10.5 ,\n       -10.75, -11.  , -11.25, -11.5 , -11.75, -12.  ], dtype=float32)lon(lon)float3242.0 42.25 42.5 ... 101.8 102.0long_name :longitudestandard_name :longitudeunits :degrees_eastarray([ 42.  ,  42.25,  42.5 , ..., 101.5 , 101.75, 102.  ], dtype=float32)time(time)datetime64[ns]1998-01-01 ... 1999-12-31axis :Tcomment :Data is averaged over the daylong_name :time centered on the daystandard_name :timetime_bounds :2000-01-01 00:00:00 to 2000-01-01 23:59:59array(['1998-01-01T00:00:00.000000000', '1998-01-02T00:00:00.000000000',\n       '1998-01-03T00:00:00.000000000', ..., '1999-12-29T00:00:00.000000000',\n       '1999-12-30T00:00:00.000000000', '1999-12-31T00:00:00.000000000'],\n      dtype='datetime64[ns]')Data variables: (14)CHL(time, lat, lon)float32dask.array&lt;chunksize=(7, 177, 241), meta=np.ndarray&gt;_ChunkSizes :[1, 256, 256]ancillary_variables :flags CHL_uncertaintycoverage_content_type :modelResultinput_files_reprocessings :Processors versions: MODIS R2022.0NRT/VIIRSN R2022.0NRT/OLCIA 07.02/VIIRSJ1 R2022.0NRT/OLCIB 07.02long_name :Chlorophyll-a concentration - Mean of the binned pixelsstandard_name :mass_concentration_of_chlorophyll_a_in_sea_watertype :surfaceunits :milligram m-3valid_max :1000.0valid_min :0.0\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n118.79 MiB\n16.27 MiB\n\n\nShape\n(730, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n9 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\nCHL_uncertainty\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(7, 177, 241), meta=np.ndarray&gt;\n\n\n\n\n_ChunkSizes :\n\n[1, 256, 256]\n\ncoverage_content_type :\n\nqualityInformation\n\nlong_name :\n\nChlorophyll-a concentration - Uncertainty estimation\n\nunits :\n\n%\n\nvalid_max :\n\n32767\n\nvalid_min :\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n118.79 MiB\n16.27 MiB\n\n\nShape\n(730, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n9 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nadt\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(7, 177, 241), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nThe absolute dynamic topography is the sea surface height above geoid; the adt is obtained as follows: adt=sla+mdt where mdt is the mean dynamic topography; see the product user manual for details\n\ngrid_mapping :\n\ncrs\n\nlong_name :\n\nAbsolute dynamic topography\n\nstandard_name :\n\nsea_surface_height_above_geoid\n\nunits :\n\nm\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n118.79 MiB\n16.27 MiB\n\n\nShape\n(730, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n9 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nair_temp\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(7, 177, 241), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n2 metre temperature\n\nnameCDM :\n\n2_metre_temperature_surface\n\nnameECMWF :\n\n2 metre temperature\n\nproduct_type :\n\nanalysis\n\nshortNameECMWF :\n\n2t\n\nstandard_name :\n\nair_temperature\n\nunits :\n\nK\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n118.79 MiB\n16.27 MiB\n\n\nShape\n(730, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n9 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\ndirection\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(7, 177, 241), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n10 metre wind direction\n\nunits :\n\n°C\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n118.79 MiB\n16.27 MiB\n\n\nShape\n(730, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n9 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nsla\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(7, 177, 241), meta=np.ndarray&gt;\n\n\n\n\nancillary_variables :\n\nerr_sla\n\ncomment :\n\nThe sea level anomaly is the sea surface height above mean sea surface; it is referenced to the [1993, 2012] period; see the product user manual for details\n\ngrid_mapping :\n\ncrs\n\nlong_name :\n\nSea level anomaly\n\nstandard_name :\n\nsea_surface_height_above_sea_level\n\nunits :\n\nm\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n118.79 MiB\n16.27 MiB\n\n\nShape\n(730, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n9 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nspeed\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(7, 177, 241), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n10 metre absolute speed\n\nunits :\n\nm s**-1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n118.79 MiB\n16.27 MiB\n\n\nShape\n(730, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n9 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nsst\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(7, 177, 241), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\nSea surface temperature\n\nnameCDM :\n\nSea_surface_temperature_surface\n\nnameECMWF :\n\nSea surface temperature\n\nproduct_type :\n\nanalysis\n\nshortNameECMWF :\n\nsst\n\nstandard_name :\n\nsea_surface_temperature\n\nunits :\n\nK\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n118.79 MiB\n16.27 MiB\n\n\nShape\n(730, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n9 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nu_curr\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(7, 177, 241), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nVelocities are an average over the top 30m of the mixed layer\n\ncoverage_content_type :\n\nmodelResult\n\ndepth :\n\n15m\n\nlong_name :\n\nzonal total surface current\n\nsource :\n\nSSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148 ; WIND source: ECMWF ERA5 10m wind DOI: 10.24381/cds.adbb2d47 ; SST source: CMC 0.2 deg SST V2.0 DOI: 10.5067/GHCMC-4FM02\n\nstandard_name :\n\neastward_sea_water_velocity\n\nunits :\n\nm s-1\n\nvalid_max :\n\n3.0\n\nvalid_min :\n\n-3.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n118.79 MiB\n16.27 MiB\n\n\nShape\n(730, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n9 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nu_wind\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(7, 177, 241), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n10 metre U wind component\n\nnameCDM :\n\n10_metre_U_wind_component_surface\n\nnameECMWF :\n\n10 metre U wind component\n\nproduct_type :\n\nanalysis\n\nshortNameECMWF :\n\n10u\n\nstandard_name :\n\neastward_wind\n\nunits :\n\nm s**-1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n118.79 MiB\n16.27 MiB\n\n\nShape\n(730, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n9 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nug_curr\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(7, 177, 241), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nGeostrophic velocities calculated from absolute dynamic topography\n\ndepth :\n\n15m\n\nlong_name :\n\nzonal geostrophic surface current\n\nsource :\n\nSSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148\n\nstandard_name :\n\ngeostrophic_eastward_sea_water_velocity\n\nunits :\n\nm s-1\n\nvalid_max :\n\n3.0\n\nvalid_min :\n\n-3.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n118.79 MiB\n16.27 MiB\n\n\nShape\n(730, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n9 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nv_curr\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(7, 177, 241), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nVelocities are an average over the top 30m of the mixed layer\n\ncoverage_content_type :\n\nmodelResult\n\ndepth :\n\n15m\n\nlong_name :\n\nmeridional total surface current\n\nsource :\n\nSSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148 ; WIND source: ECMWF ERA5 10m wind DOI: 10.24381/cds.adbb2d47 ; SST source: CMC 0.2 deg SST V2.0 DOI: 10.5067/GHCMC-4FM02\n\nstandard_name :\n\nnorthward_sea_water_velocity\n\nunits :\n\nm s-1\n\nvalid_max :\n\n3.0\n\nvalid_min :\n\n-3.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n118.79 MiB\n16.27 MiB\n\n\nShape\n(730, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n9 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nv_wind\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(7, 177, 241), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n10 metre V wind component\n\nnameCDM :\n\n10_metre_V_wind_component_surface\n\nnameECMWF :\n\n10 metre V wind component\n\nproduct_type :\n\nanalysis\n\nshortNameECMWF :\n\n10v\n\nstandard_name :\n\nnorthward_wind\n\nunits :\n\nm s**-1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n118.79 MiB\n16.27 MiB\n\n\nShape\n(730, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n9 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nvg_curr\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(7, 177, 241), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nGeostrophic velocities calculated from absolute dynamic topography\n\ndepth :\n\n15m\n\nlong_name :\n\nmeridional geostrophic surface current\n\nsource :\n\nSSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148\n\nstandard_name :\n\ngeostrophic_northward_sea_water_velocity\n\nunits :\n\nm s-1\n\nvalid_max :\n\n3.0\n\nvalid_min :\n\n-3.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n118.79 MiB\n16.27 MiB\n\n\nShape\n(730, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n9 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\nAttributes: (17)creator_email :minhphan@uw.educreator_name :Minh Phancreator_type :persondate_created :2023-07-07geospatial_lat_max :32.0geospatial_lat_min :-12.0geospatial_lat_resolution :0.25geospatial_lat_units :degrees_northgeospatial_lon_max :102.0geospatial_lon_min :42.0geospatial_lon_resolution :0.25geospatial_lon_units :degrees_eastsource :OSCAR, ERA5 Reanalysis, Copernicus Climate Change Service (C3S), Copernicus Marine Environment Monitoring Service (CMEMS)summary :Daily mean of 0.25 x 0.25 degrees gridded data from multiple climate variables that may influence the patterns of coastal upwelling in the focused areatime_coverage_end :2020-12-31T23:59:59time_coverage_start :2000-01-01T00:00:00title :Climate Data for Coastal Upwelling Machine Learning Project in Indian Ocean\n\n\n\n# slice by variable\nds[['u_curr', 'u_wind']]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:  (time: 8523, lat: 177, lon: 241)\nCoordinates:\n  * lat      (lat) float32 32.0 31.75 31.5 31.25 ... -11.25 -11.5 -11.75 -12.0\n  * lon      (lon) float32 42.0 42.25 42.5 42.75 ... 101.2 101.5 101.8 102.0\n  * time     (time) datetime64[ns] 1997-09-01 1997-09-02 ... 2020-12-31\nData variables:\n    u_curr   (time, lat, lon) float32 dask.array&lt;chunksize=(29, 177, 241), meta=np.ndarray&gt;\n    u_wind   (time, lat, lon) float32 dask.array&lt;chunksize=(29, 177, 241), meta=np.ndarray&gt;\nAttributes: (12/17)\n    creator_email:              minhphan@uw.edu\n    creator_name:               Minh Phan\n    creator_type:               person\n    date_created:               2023-07-07\n    geospatial_lat_max:         32.0\n    geospatial_lat_min:         -12.0\n    ...                         ...\n    geospatial_lon_units:       degrees_east\n    source:                     OSCAR, ERA5 Reanalysis, Copernicus Climate Ch...\n    summary:                    Daily mean of 0.25 x 0.25 degrees gridded dat...\n    time_coverage_end:          2020-12-31T23:59:59\n    time_coverage_start:        2000-01-01T00:00:00\n    title:                      Climate Data for Coastal Upwelling Machine Le...xarray.DatasetDimensions:time: 8523lat: 177lon: 241Coordinates: (3)lat(lat)float3232.0 31.75 31.5 ... -11.75 -12.0long_name :latitudestandard_name :latitudeunits :degrees_northarray([ 32.  ,  31.75,  31.5 ,  31.25,  31.  ,  30.75,  30.5 ,  30.25,  30.  ,\n        29.75,  29.5 ,  29.25,  29.  ,  28.75,  28.5 ,  28.25,  28.  ,  27.75,\n        27.5 ,  27.25,  27.  ,  26.75,  26.5 ,  26.25,  26.  ,  25.75,  25.5 ,\n        25.25,  25.  ,  24.75,  24.5 ,  24.25,  24.  ,  23.75,  23.5 ,  23.25,\n        23.  ,  22.75,  22.5 ,  22.25,  22.  ,  21.75,  21.5 ,  21.25,  21.  ,\n        20.75,  20.5 ,  20.25,  20.  ,  19.75,  19.5 ,  19.25,  19.  ,  18.75,\n        18.5 ,  18.25,  18.  ,  17.75,  17.5 ,  17.25,  17.  ,  16.75,  16.5 ,\n        16.25,  16.  ,  15.75,  15.5 ,  15.25,  15.  ,  14.75,  14.5 ,  14.25,\n        14.  ,  13.75,  13.5 ,  13.25,  13.  ,  12.75,  12.5 ,  12.25,  12.  ,\n        11.75,  11.5 ,  11.25,  11.  ,  10.75,  10.5 ,  10.25,  10.  ,   9.75,\n         9.5 ,   9.25,   9.  ,   8.75,   8.5 ,   8.25,   8.  ,   7.75,   7.5 ,\n         7.25,   7.  ,   6.75,   6.5 ,   6.25,   6.  ,   5.75,   5.5 ,   5.25,\n         5.  ,   4.75,   4.5 ,   4.25,   4.  ,   3.75,   3.5 ,   3.25,   3.  ,\n         2.75,   2.5 ,   2.25,   2.  ,   1.75,   1.5 ,   1.25,   1.  ,   0.75,\n         0.5 ,   0.25,   0.  ,  -0.25,  -0.5 ,  -0.75,  -1.  ,  -1.25,  -1.5 ,\n        -1.75,  -2.  ,  -2.25,  -2.5 ,  -2.75,  -3.  ,  -3.25,  -3.5 ,  -3.75,\n        -4.  ,  -4.25,  -4.5 ,  -4.75,  -5.  ,  -5.25,  -5.5 ,  -5.75,  -6.  ,\n        -6.25,  -6.5 ,  -6.75,  -7.  ,  -7.25,  -7.5 ,  -7.75,  -8.  ,  -8.25,\n        -8.5 ,  -8.75,  -9.  ,  -9.25,  -9.5 ,  -9.75, -10.  , -10.25, -10.5 ,\n       -10.75, -11.  , -11.25, -11.5 , -11.75, -12.  ], dtype=float32)lon(lon)float3242.0 42.25 42.5 ... 101.8 102.0long_name :longitudestandard_name :longitudeunits :degrees_eastarray([ 42.  ,  42.25,  42.5 , ..., 101.5 , 101.75, 102.  ], dtype=float32)time(time)datetime64[ns]1997-09-01 ... 2020-12-31axis :Tcomment :Data is averaged over the daylong_name :time centered on the daystandard_name :timetime_bounds :2000-01-01 00:00:00 to 2000-01-01 23:59:59array(['1997-09-01T00:00:00.000000000', '1997-09-02T00:00:00.000000000',\n       '1997-09-03T00:00:00.000000000', ..., '2020-12-29T00:00:00.000000000',\n       '2020-12-30T00:00:00.000000000', '2020-12-31T00:00:00.000000000'],\n      dtype='datetime64[ns]')Data variables: (2)u_curr(time, lat, lon)float32dask.array&lt;chunksize=(29, 177, 241), meta=np.ndarray&gt;comment :Velocities are an average over the top 30m of the mixed layercoverage_content_type :modelResultdepth :15mlong_name :zonal total surface currentsource :SSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148 ; WIND source: ECMWF ERA5 10m wind DOI: 10.24381/cds.adbb2d47 ; SST source: CMC 0.2 deg SST V2.0 DOI: 10.5067/GHCMC-4FM02standard_name :eastward_sea_water_velocityunits :m s-1valid_max :3.0valid_min :-3.0\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n1.35 GiB\n16.27 MiB\n\n\nShape\n(8523, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n87 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\nu_wind\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 177, 241), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n10 metre U wind component\n\nnameCDM :\n\n10_metre_U_wind_component_surface\n\nnameECMWF :\n\n10 metre U wind component\n\nproduct_type :\n\nanalysis\n\nshortNameECMWF :\n\n10u\n\nstandard_name :\n\neastward_wind\n\nunits :\n\nm s**-1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n1.35 GiB\n16.27 MiB\n\n\nShape\n(8523, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n87 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\nAttributes: (17)creator_email :minhphan@uw.educreator_name :Minh Phancreator_type :persondate_created :2023-07-07geospatial_lat_max :32.0geospatial_lat_min :-12.0geospatial_lat_resolution :0.25geospatial_lat_units :degrees_northgeospatial_lon_max :102.0geospatial_lon_min :42.0geospatial_lon_resolution :0.25geospatial_lon_units :degrees_eastsource :OSCAR, ERA5 Reanalysis, Copernicus Climate Change Service (C3S), Copernicus Marine Environment Monitoring Service (CMEMS)summary :Daily mean of 0.25 x 0.25 degrees gridded data from multiple climate variables that may influence the patterns of coastal upwelling in the focused areatime_coverage_end :2020-12-31T23:59:59time_coverage_start :2000-01-01T00:00:00title :Climate Data for Coastal Upwelling Machine Learning Project in Indian Ocean\n\n\n\n# combine multiple slicing options all at once\nds[['u_curr', 'u_wind']].sel(time=slice('1998', '1999'), \n                             lat=slice(0, -12), \n                             lon=slice(42, 45))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:  (time: 730, lat: 49, lon: 13)\nCoordinates:\n  * lat      (lat) float32 0.0 -0.25 -0.5 -0.75 ... -11.25 -11.5 -11.75 -12.0\n  * lon      (lon) float32 42.0 42.25 42.5 42.75 43.0 ... 44.25 44.5 44.75 45.0\n  * time     (time) datetime64[ns] 1998-01-01 1998-01-02 ... 1999-12-31\nData variables:\n    u_curr   (time, lat, lon) float32 dask.array&lt;chunksize=(7, 49, 13), meta=np.ndarray&gt;\n    u_wind   (time, lat, lon) float32 dask.array&lt;chunksize=(7, 49, 13), meta=np.ndarray&gt;\nAttributes: (12/17)\n    creator_email:              minhphan@uw.edu\n    creator_name:               Minh Phan\n    creator_type:               person\n    date_created:               2023-07-07\n    geospatial_lat_max:         32.0\n    geospatial_lat_min:         -12.0\n    ...                         ...\n    geospatial_lon_units:       degrees_east\n    source:                     OSCAR, ERA5 Reanalysis, Copernicus Climate Ch...\n    summary:                    Daily mean of 0.25 x 0.25 degrees gridded dat...\n    time_coverage_end:          2020-12-31T23:59:59\n    time_coverage_start:        2000-01-01T00:00:00\n    title:                      Climate Data for Coastal Upwelling Machine Le...xarray.DatasetDimensions:time: 730lat: 49lon: 13Coordinates: (3)lat(lat)float320.0 -0.25 -0.5 ... -11.75 -12.0long_name :latitudestandard_name :latitudeunits :degrees_northarray([  0.  ,  -0.25,  -0.5 ,  -0.75,  -1.  ,  -1.25,  -1.5 ,  -1.75,  -2.  ,\n        -2.25,  -2.5 ,  -2.75,  -3.  ,  -3.25,  -3.5 ,  -3.75,  -4.  ,  -4.25,\n        -4.5 ,  -4.75,  -5.  ,  -5.25,  -5.5 ,  -5.75,  -6.  ,  -6.25,  -6.5 ,\n        -6.75,  -7.  ,  -7.25,  -7.5 ,  -7.75,  -8.  ,  -8.25,  -8.5 ,  -8.75,\n        -9.  ,  -9.25,  -9.5 ,  -9.75, -10.  , -10.25, -10.5 , -10.75, -11.  ,\n       -11.25, -11.5 , -11.75, -12.  ], dtype=float32)lon(lon)float3242.0 42.25 42.5 ... 44.5 44.75 45.0long_name :longitudestandard_name :longitudeunits :degrees_eastarray([42.  , 42.25, 42.5 , 42.75, 43.  , 43.25, 43.5 , 43.75, 44.  , 44.25,\n       44.5 , 44.75, 45.  ], dtype=float32)time(time)datetime64[ns]1998-01-01 ... 1999-12-31axis :Tcomment :Data is averaged over the daylong_name :time centered on the daystandard_name :timetime_bounds :2000-01-01 00:00:00 to 2000-01-01 23:59:59array(['1998-01-01T00:00:00.000000000', '1998-01-02T00:00:00.000000000',\n       '1998-01-03T00:00:00.000000000', ..., '1999-12-29T00:00:00.000000000',\n       '1999-12-30T00:00:00.000000000', '1999-12-31T00:00:00.000000000'],\n      dtype='datetime64[ns]')Data variables: (2)u_curr(time, lat, lon)float32dask.array&lt;chunksize=(7, 49, 13), meta=np.ndarray&gt;comment :Velocities are an average over the top 30m of the mixed layercoverage_content_type :modelResultdepth :15mlong_name :zonal total surface currentsource :SSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148 ; WIND source: ECMWF ERA5 10m wind DOI: 10.24381/cds.adbb2d47 ; SST source: CMC 0.2 deg SST V2.0 DOI: 10.5067/GHCMC-4FM02standard_name :eastward_sea_water_velocityunits :m s-1valid_max :3.0valid_min :-3.0\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n1.77 MiB\n248.83 kiB\n\n\nShape\n(730, 49, 13)\n(100, 49, 13)\n\n\nDask graph\n9 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\nu_wind\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(7, 49, 13), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n10 metre U wind component\n\nnameCDM :\n\n10_metre_U_wind_component_surface\n\nnameECMWF :\n\n10 metre U wind component\n\nproduct_type :\n\nanalysis\n\nshortNameECMWF :\n\n10u\n\nstandard_name :\n\neastward_wind\n\nunits :\n\nm s**-1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n1.77 MiB\n248.83 kiB\n\n\nShape\n(730, 49, 13)\n(100, 49, 13)\n\n\nDask graph\n9 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\nAttributes: (17)creator_email :minhphan@uw.educreator_name :Minh Phancreator_type :persondate_created :2023-07-07geospatial_lat_max :32.0geospatial_lat_min :-12.0geospatial_lat_resolution :0.25geospatial_lat_units :degrees_northgeospatial_lon_max :102.0geospatial_lon_min :42.0geospatial_lon_resolution :0.25geospatial_lon_units :degrees_eastsource :OSCAR, ERA5 Reanalysis, Copernicus Climate Change Service (C3S), Copernicus Marine Environment Monitoring Service (CMEMS)summary :Daily mean of 0.25 x 0.25 degrees gridded data from multiple climate variables that may influence the patterns of coastal upwelling in the focused areatime_coverage_end :2020-12-31T23:59:59time_coverage_start :2000-01-01T00:00:00title :Climate Data for Coastal Upwelling Machine Learning Project in Indian Ocean",
    "crumbs": [
      "Data Tutorials",
      "Data viz and use",
      "Graphing Data from our final product"
    ]
  },
  {
    "objectID": "notebooks-data/02_Graphing_Map_Data.html#basic-data-graphing",
    "href": "notebooks-data/02_Graphing_Map_Data.html#basic-data-graphing",
    "title": "Graphing Data from our final product",
    "section": "Basic data graphing",
    "text": "Basic data graphing\nWe can also graph the data right from slicing, especially heatmaps from 2D arrays, or line charts. This is especially useful when we want to inspect elements on the go.\n\n# make sure that the array you slice for a heatmap visualization is a 2D array\nheatmap_arr = ds['wind_speed'].sel(time='2000-01-02')\nheatmap_arr\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray 'wind_speed' (lat: 177, lon: 241)&gt;\ndask.array&lt;getitem, shape=(177, 241), dtype=float32, chunksize=(177, 241), chunktype=numpy.ndarray&gt;\nCoordinates:\n  * lat      (lat) float32 32.0 31.75 31.5 31.25 ... -11.25 -11.5 -11.75 -12.0\n  * lon      (lon) float32 42.0 42.25 42.5 42.75 ... 101.2 101.5 101.8 102.0\n    time     datetime64[ns] 2000-01-02\nAttributes:\n    long_name:  10 metre absolute speed\n    units:      m s**-1xarray.DataArray'wind_speed'lat: 177lon: 241dask.array&lt;chunksize=(177, 241), meta=np.ndarray&gt;\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n166.63 kiB\n166.63 kiB\n\n\nShape\n(177, 241)\n(177, 241)\n\n\nDask graph\n1 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\nCoordinates: (3)lat(lat)float3232.0 31.75 31.5 ... -11.75 -12.0long_name :latitudestandard_name :latitudeunits :degrees_northarray([ 32.  ,  31.75,  31.5 ,  31.25,  31.  ,  30.75,  30.5 ,  30.25,  30.  ,\n        29.75,  29.5 ,  29.25,  29.  ,  28.75,  28.5 ,  28.25,  28.  ,  27.75,\n        27.5 ,  27.25,  27.  ,  26.75,  26.5 ,  26.25,  26.  ,  25.75,  25.5 ,\n        25.25,  25.  ,  24.75,  24.5 ,  24.25,  24.  ,  23.75,  23.5 ,  23.25,\n        23.  ,  22.75,  22.5 ,  22.25,  22.  ,  21.75,  21.5 ,  21.25,  21.  ,\n        20.75,  20.5 ,  20.25,  20.  ,  19.75,  19.5 ,  19.25,  19.  ,  18.75,\n        18.5 ,  18.25,  18.  ,  17.75,  17.5 ,  17.25,  17.  ,  16.75,  16.5 ,\n        16.25,  16.  ,  15.75,  15.5 ,  15.25,  15.  ,  14.75,  14.5 ,  14.25,\n        14.  ,  13.75,  13.5 ,  13.25,  13.  ,  12.75,  12.5 ,  12.25,  12.  ,\n        11.75,  11.5 ,  11.25,  11.  ,  10.75,  10.5 ,  10.25,  10.  ,   9.75,\n         9.5 ,   9.25,   9.  ,   8.75,   8.5 ,   8.25,   8.  ,   7.75,   7.5 ,\n         7.25,   7.  ,   6.75,   6.5 ,   6.25,   6.  ,   5.75,   5.5 ,   5.25,\n         5.  ,   4.75,   4.5 ,   4.25,   4.  ,   3.75,   3.5 ,   3.25,   3.  ,\n         2.75,   2.5 ,   2.25,   2.  ,   1.75,   1.5 ,   1.25,   1.  ,   0.75,\n         0.5 ,   0.25,   0.  ,  -0.25,  -0.5 ,  -0.75,  -1.  ,  -1.25,  -1.5 ,\n        -1.75,  -2.  ,  -2.25,  -2.5 ,  -2.75,  -3.  ,  -3.25,  -3.5 ,  -3.75,\n        -4.  ,  -4.25,  -4.5 ,  -4.75,  -5.  ,  -5.25,  -5.5 ,  -5.75,  -6.  ,\n        -6.25,  -6.5 ,  -6.75,  -7.  ,  -7.25,  -7.5 ,  -7.75,  -8.  ,  -8.25,\n        -8.5 ,  -8.75,  -9.  ,  -9.25,  -9.5 ,  -9.75, -10.  , -10.25, -10.5 ,\n       -10.75, -11.  , -11.25, -11.5 , -11.75, -12.  ], dtype=float32)lon(lon)float3242.0 42.25 42.5 ... 101.8 102.0long_name :longitudestandard_name :longitudeunits :degrees_eastarray([ 42.  ,  42.25,  42.5 , ..., 101.5 , 101.75, 102.  ], dtype=float32)time()datetime64[ns]2000-01-02axis :Tcomment :Data is averaged over the daylong_name :time centered on the daystandard_name :timetime_bounds :2000-01-01 00:00:00 to 2000-01-01 23:59:59array('2000-01-02T00:00:00.000000000', dtype='datetime64[ns]')Indexes: (2)latPandasIndexPandasIndex(Index([  32.0,  31.75,   31.5,  31.25,   31.0,  30.75,   30.5,  30.25,   30.0,\n        29.75,\n       ...\n        -9.75,  -10.0, -10.25,  -10.5, -10.75,  -11.0, -11.25,  -11.5, -11.75,\n        -12.0],\n      dtype='float32', name='lat', length=177))lonPandasIndexPandasIndex(Index([  42.0,  42.25,   42.5,  42.75,   43.0,  43.25,   43.5,  43.75,   44.0,\n        44.25,\n       ...\n        99.75,  100.0, 100.25,  100.5, 100.75,  101.0, 101.25,  101.5, 101.75,\n        102.0],\n      dtype='float32', name='lon', length=241))Attributes: (2)long_name :10 metre absolute speedunits :m s**-1\n\n\n\n2D array graphing with matplotlib\nBy default, graphing arrays with Xarray is done using matplotlib.\nFor 2D arrays we have multiple options to choose for our graphs\n\nHeatmaps\n\nheatmap_arr.plot.imshow()\n\n\n\n\n\n\nContour maps\n\n# contour map with no filling\nheatmap_arr.plot.contour()\n\n\n\n\n\n# contour map with color filling\nheatmap_arr.plot.contourf()\n\n\n\n\n\n\nSurface plot\n\nheatmap_arr.plot.surface()\n\n\n\n\n\n\n\n1D array graphing with Matplotlib\n\nLine plots\nWe can also plot line graphs if our data is presented in 1D arrays. For the example below, we average our wind speed over the whole area and plot it over time. Matplotlib automatically infers what graph to create if you don’t explicitly call which one to. This piece of code below is a demonstration:\n\nds['wind_speed'].mean(dim=['lat', 'lon']).plot(figsize=(10, 5))\n\n\n\n\nWe can add in parameters to customize our graphs, as additional arguments are passed to the underlying matplotlib plot() function.\n\nds['air_temp'].mean(dim=['lat', 'lon']).sel(time=slice('2007', '2009')).plot.line('r-o', figsize=(10,5), markersize=1)\n\n\n\n\n\n\nHistogram\n\n# creating a new Axe object if there is no currently\n# available one\nax = plt.gca() \nds['wind_dir'].plot.hist(ax = ax)\nax.set_xlabel('10 metre wind direction (degrees east)')\nax.set_ylabel('frequency')\nax.set_title('Daily average wind direction distribution over covered area (1979-2022)')\n\nText(0.5, 1.0, 'Daily average wind direction distribution over covered area (1979-2022)')\n\n\n\n\n\n\n\n\nGraphing with holoviews\nXarray also support graphing using holoviews if you want interactive visualizations.\n\n# scroll along the axes to stretch the graph\nheatmap_arr.hvplot().options(cmap='bgy', width=600, height=500)",
    "crumbs": [
      "Data Tutorials",
      "Data viz and use",
      "Graphing Data from our final product"
    ]
  },
  {
    "objectID": "notebooks-data/02_Graphing_Map_Data.html#maps",
    "href": "notebooks-data/02_Graphing_Map_Data.html#maps",
    "title": "Graphing Data from our final product",
    "section": "Maps",
    "text": "Maps\nSometimes we want to identify areas in which our data may behave differently. One of the best ways to do this is to create maps.\n\nCoastline mapping\nCoastlines can help us separate land and ocean area. We can plot the coastline for our region of interest without using any data.\n\ngeo_axes = plt.axes(projection=cartopy.crs.PlateCarree())\n# add stock image\n# geo_axes.stock_img()\ngeo_axes.set_extent([42, 102, -12, 32])\ngeo_axes.coastlines()\n\n\n\n\nWe can also apply the coastline onto our data. The example below shows a heatmap with the coastline drawn on top of it\n\ntopo = xr.open_dataset('/home/jovyan/shared-readwrite/data/INDIAN_OCEAN_HQ_TOPO.nc')\n\n\nfig, ax = plt.subplots(subplot_kw=dict(projection=cartopy.crs.PlateCarree()))\ntopo.topo.plot.imshow(ax=ax)\nax.add_feature(cartopy.feature.COASTLINE)\n\n\n\n\n\n\nTopography mapping\nWe also have a topography dataset that spans the same grid as our final dataset. At the moment of writing this moment, this dataset has not been incoporated into the latter one yet, as you have seen earlier in this notebook that we have to import it separately.\nWe can use this dataset to visualize the topography through contour maps.\n\ntopo\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:    (latitude: 5281, longitude: 7201)\nCoordinates:\n  * latitude   (latitude) float64 32.0 31.99 31.98 31.98 ... -11.98 -11.99 -12.0\n  * longitude  (longitude) float64 42.0 42.01 42.02 42.03 ... 102.0 102.0 102.0\nData variables:\n    topo       (latitude, longitude) float32 349.0 352.0 ... -3.727e+03xarray.DatasetDimensions:latitude: 5281longitude: 7201Coordinates: (2)latitude(latitude)float6432.0 31.99 31.98 ... -11.99 -12.0_CoordinateAxisType :Latactual_range :[-89.99166667  90.        ]axis :Yioos_category :Locationlong_name :Latitudestandard_name :latitudeunits :degrees_northarray([ 32.      ,  31.991667,  31.983333, ..., -11.983333, -11.991667,\n       -12.      ])longitude(longitude)float6442.0 42.01 42.02 ... 102.0 102.0_CoordinateAxisType :Lonactual_range :[-180.          179.99166667]axis :Xioos_category :Locationlong_name :Longitudestandard_name :longitudeunits :degrees_eastarray([ 42.      ,  42.008333,  42.016667, ..., 101.983333, 101.991667,\n       102.      ])Data variables: (1)topo(latitude, longitude)float32349.0 352.0 ... -3.727e+03colorBarMaximum :8000.0colorBarMinimum :-8000.0colorBarPalette :Topographygrid_mapping :GDAL_Geographicsioos_category :Locationlong_name :Topographystandard_name :altitudeunits :metersarray([[  349.,   352.,   351., ...,  3313.,  2918.,  2786.],\n       [  349.,   351.,   351., ...,  3538.,  3142.,  3249.],\n       [  351.,   353.,   351., ...,  3497.,  3352.,  3515.],\n       ...,\n       [-2651., -2653., -2657., ..., -3197., -3361., -3517.],\n       [-2654., -2657., -2661., ..., -3318., -3472., -3616.],\n       [-2658., -2661., -2666., ..., -3450., -3594., -3727.]], dtype=float32)Indexes: (2)latitudePandasIndexPandasIndex(Index([               32.0,  31.991666666666667,  31.983333333333334,\n                    31.975,   31.96666666666667,  31.958333333333336,\n        31.950000000000003,   31.94166666666667,  31.933333333333337,\n        31.925000000000004,\n       ...\n       -11.924999999999997, -11.933333333333337, -11.941666666666663,\n       -11.950000000000003, -11.958333333333329, -11.966666666666669,\n       -11.974999999999994, -11.983333333333334,  -11.99166666666666,\n                     -12.0],\n      dtype='float64', name='latitude', length=5281))longitudePandasIndexPandasIndex(Index([              42.0, 42.008333333333326,  42.01666666666665,\n       42.025000000000006,  42.03333333333333,  42.04166666666666,\n        42.04999999999998,  42.05833333333334,  42.06666666666666,\n        42.07499999999999,\n       ...\n       101.92500000000001, 101.93333333333334, 101.94166666666666,\n       101.94999999999999, 101.95833333333331, 101.96666666666664,\n       101.97500000000002, 101.98333333333335, 101.99166666666667,\n                    102.0],\n      dtype='float64', name='longitude', length=7201))Attributes: (0)\n\n\n\nfig, (ax1, ax2) = plt.subplots(2,1, figsize=(8, 12))\ntopo_contour = topo.topo.plot.contour(levels=12, ax=ax1, cmap='coolwarm')\ntopo_contourf = topo.topo.plot.contourf(levels=12, ax=ax2, cmap='coolwarm', label='')\n# add label in line\n# ax.clabel(topo_contour, inline=1, fontsize=10)\n\nhue1, color1 = topo_contour.legend_elements()\nhue2, color2 = topo_contourf.legend_elements()\nax1.legend(hue1, color1, loc='center left', bbox_to_anchor=(1, 0.5))\nax1.set_aspect('equal')\nax2.set_aspect('equal')\n# ax2.get_legend().set_visible(False)\n\n/srv/conda/envs/notebook/lib/python3.9/site-packages/xarray/plot/dataarray_plot.py:2141: UserWarning: The following kwargs were not used by contour: 'label'\n  primitive = ax.contourf(x, y, z, **kwargs)\n\n\n\n\n\nExporting the contour lines to graph on other datasets:\n\n# extract lines from contour paths\nlines = []\nfor contour_path in topo_contour.collections:\n    for path in contour_path.get_paths():\n        lines.extend(path.to_polygons())\n\n\nlen(lines)\n\n12327\n\n\nWe want to graph the topography lines on top of this heatmap. Can we do this with matplotlib?\nLet’s take a look of the contour lines generated from matplotlib.pyplot.contour() function: it returned a list of PathCollection objects containing elevent different contour types based on elevation (each with a different color). Each elevation has multiple “lines” as each of the line denotes an elevation mark.\n\ntopo_contour.collections\n\n&lt;a list of 11 PathCollection objects&gt;\n\n\n\nlen(topo_contour.collections[0].get_paths())\n\n0\n\n\n\nlen(topo_contour.collections[2].get_paths())\n\n30\n\n\nIn the example below, we graph the contour lines back onto the original contour maps.\n\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 7))\ntopo.topo.plot.imshow(ax=ax1)\nfor contour in topo_contour.collections[2:9]:\n    for path in contour.get_paths():\n        for line in path.to_polygons():\n            ax1.scatter(line[:,0], line[:, 1], color='black', s=0.1) # graph some of the contours (as dots)\n\ntopo.topo.plot.imshow(ax=ax2)\nfor line in lines:\n    ax2.scatter(line[:,0], line[:, 1], color='black', s=0.5) # graph all contours (as dots)\n    \nax1.set_aspect('equal')\nax2.set_aspect('equal')\n\n\n\n\n\n# very weird lines\nax = plt.gca()\ntopo.topo.plot.imshow(ax=ax)\nfor line in lines[:1200]: # there is an order of the lines sorted by topography height\n    ax.plot(line[:,0], line[:, 1], color='black', markersize=0.1)\n\n\n\n\n\n\nCreating topography contour maps with pygmt\nBecause of the weird lines caused by the connection of the open-ended paths, we want to experiment with some other packages.\n\n# Load Earth relief grids (topography and bathymetry) in various resolutions.\n# get contour grid\ngrid = pygmt.datasets.load_earth_relief(resolution=\"15m\", region=[42, 102, -12, 32])\nfig = pygmt.Figure()\n# add the heatmap first\nfig.grdimage(topo.topo, region='42/102/-12/32', cmap='topo', projection='M4i') # mercator projection\n# and then the contour map on top of it\nfig.grdcontour(grid=grid,\n              annotation='1000+f6p', # font 6p\n              interval=1000,\n              limit=[-5000, 0],\n              projection='M4i',\n              pen=\"a0.15p\") # 0.15 point\nfig.show()\n\n\n\n\n\n# coastline only\nfig2 = pygmt.Figure()\nfig2.grdimage(topo.topo, region='42/102/-12/32', cmap='topo', projection='M4i')\nfig2.coast(\n    region='42/102/-12/32',\n    projection='M4i',\n    shorelines=True\n)\nfig2.colorbar()\nfig2.show()\n\n\n\n\n\n# wind direction\ngrid = pygmt.datasets.load_earth_relief(resolution=\"15m\", region=[42, 102, -12, 32])\n\nfig3 = pygmt.Figure()\nfig3.grdimage(ds.v_wind.isel(time=0), region='42/102/-12/32', projection='M4i')\nfig3.grdcontour(grid=grid,\n              annotation='1000+f6p', # font 6p\n              interval=1000, # every 1000m elevation\n              limit=[-5000, 0],\n              projection='M4i',\n              pen=\"a0.15p\") # 0.15 point\nfig3.coast(\n    region='42/102/-12/32',\n    projection='M4i',\n    shorelines=\"1p,black,solid\"\n)\nfig3.colorbar()\nfig3.show()\n\n\n\n\n\n# wind direction\nfig3 = pygmt.Figure()\nfig3.grdimage(ds.direction.isel(time=0), region='42/102/-12/32', projection='M4i')\nfig3.coast(\n    region='42/102/-12/32',\n    projection='M4i',\n    shorelines=True\n)\nfig3.colorbar()\nfig3.show()\n\n\nfig, ax = plt.subplots(subplot_kw=dict(projection=cartopy.crs.PlateCarree()))\nds.wind_dir.isel(time=0).plot.imshow(ax=ax)\nax.set_aspect('equal')\nax.add_feature(cartopy.feature.COASTLINE)",
    "crumbs": [
      "Data Tutorials",
      "Data viz and use",
      "Graphing Data from our final product"
    ]
  },
  {
    "objectID": "notebooks-data/02_Xarray.html#why-do-we-need-xarray",
    "href": "notebooks-data/02_Xarray.html#why-do-we-need-xarray",
    "title": "03. Introduction to xarray",
    "section": "Why do we need xarray?",
    "text": "Why do we need xarray?\nAs Geoscientists, we often work with time series of data with two or more dimensions: a time series of calibrated, orthorectified satellite images; two-dimensional grids of surface air temperature from an atmospheric reanalysis; or three-dimensional (level, x, y) cubes of ocean salinity from an ocean model. These data are often provided in GeoTIFF, NetCDF or HDF format with rich and useful metadata that we want to retain, or even use in our analysis. Common analyses include calculating means, standard deviations and anomalies over time or one or more spatial dimensions (e.g. zonal means). Model output often includes multiple variables that you want to apply similar analyses to.\n\n\n\nA schematic of multi-dimensional data\n\n\nThe schematic above shows a typical data structure for multi-dimensional data. There are two data cubes, one for temperature and one for precipitation. Common coordinate variables, in this case latitude, longitude and time are associated with each variable. Each variable, including coordinate variables, will have a set of attributes: name, units, missing value, etc. The file containing the data may also have attributes: source of the data, model name coordinate reference system if the data are projected. Writing code using low-level packages such as netcdf4 and numpy to read the data, then perform analysis, and write the results to file is time consuming and prone to errors."
  },
  {
    "objectID": "notebooks-data/02_Xarray.html#what-is-xarray",
    "href": "notebooks-data/02_Xarray.html#what-is-xarray",
    "title": "03. Introduction to xarray",
    "section": "What is xarray",
    "text": "What is xarray\nxarray is an open-source project and python package to work with labelled multi-dimensional arrays. It is leverages numpy, pandas, matplotlib and dask to build Dataset and DataArray objects with built-in methods to subset, analyze, interpolate, and plot multi-dimensional data. It makes working with multi-dimensional data cubes efficient and fun. It will change your life for the better. You’ll be more attractive, more interesting, and better equiped to take on lifes challenges."
  },
  {
    "objectID": "notebooks-data/02_Xarray.html#what-you-will-learn-from-this-tutorial",
    "href": "notebooks-data/02_Xarray.html#what-you-will-learn-from-this-tutorial",
    "title": "03. Introduction to xarray",
    "section": "What you will learn from this tutorial",
    "text": "What you will learn from this tutorial\nIn this tutorial you will learn how to:\n\nload a netcdf file into xarray\ninterrogate the Dataset and understand the difference between DataArray and Dataset\nsubset a Dataset\ncalculate annual and monthly mean fields\ncalculate a time series of zonal means\nplot these results\n\nAs always, we’ll start by importing xarray. We’ll follow convention by giving the module the shortname xr\n\nimport xarray as xr\nxr.set_options(keep_attrs=True)\n\nI’m going to use one of xarray’s tutorial datasets. In this case, air temperature from the NCEP reanalysis. I’ll assign the result of the open_dataset to ds. I may change this to access a dataset directly\n\nds = xr.tutorial.open_dataset(\"air_temperature\")\n\nAs we are in an interactive environment, we can just type ds to see what we have.\n\nds\n\nFirst thing to notice is that ds is an xarray.Dataset object. It has dimensions, lat, lon, and time. It also has coordinate variables with the same names as these dimensions. These coordinate variables are 1-dimensional. This is a NetCDF convention. The Dataset contains one data variable, air. This has dimensions (time, lat, lon).\nClicking on the document icon reveals attributes for each variable. Clicking on the disk icon reveals a representation of the data.\nEach of the data and coordinate variables can be accessed and examined using the variable name as a key.\n\nds.air\n\n\nds['air']\n\nThese are xarray.DataArray objects. This is the basic building block for xarray.\nVariables can also be accessed as attributes of ds.\n\nds.time\n\nA major difference between accessing a variable as an attribute versus using a key is that the attribute is read-only but the key method can be used to update the variable. For example, if I want to convert the units of air from Kelvin to degrees Celsius.\n\nds['air'] = ds.air - 273.15\n\nThis approach can also be used to add new variables\n\nds['air_kelvin'] = ds.air + 273.15\n\nIt is helpful to update attributes such as units, this saves time, confusion and mistakes, especially when you save the dataset.\n\nds['air'].attrs['units'] = 'degC'\n\n\nds"
  },
  {
    "objectID": "notebooks-data/02_Xarray.html#subsetting-and-indexing",
    "href": "notebooks-data/02_Xarray.html#subsetting-and-indexing",
    "title": "03. Introduction to xarray",
    "section": "Subsetting and Indexing",
    "text": "Subsetting and Indexing\nSubsetting and indexing methods depend on whether you are working with a Dataset or DataArray. A DataArray can be accessed using positional indexing just like a numpy array. To access the temperature field for the first time step, you do the following.\n\nds['air'][0,:,:]\n\nNote this returns a DataArray with coordinates but not attributes.\nHowever, the real power is being able to access variables using coordinate variables. I can get the same subset using the following. (It’s also more explicit about what is being selected and robust in case I modify the DataArray and expect the same output.)\n\nds['air'].sel(time='2013-01-01').time\n\n\nds.air.sel(time='2013-01-01')\n\nI can also do slices. I’ll extract temperatures for the state of Colorado. The bounding box for the state is [-109 E, -102 E, 37 N, 41 N].\nIn the code below, pay attention to both the order of the coordinates and the range of values. The first value of the lat coordinate variable is 41 N, the second value is 37 N. Unfortunately, xarray expects slices of coordinates to be in the same order as the coordinates. Note lon is 0 to 360 not -180 to 180, and I let python calculate it for me within the slice.\n\nds.air.sel(lat=slice(41.,37.), lon=slice(360-109,360-102))\n\nWhat if we want temperature for a point, for example Denver, CO (39.72510678889283 N, -104.98785545855408 E). xarray can handle this! If we just want data from the nearest grid point, we can use sel and specify the method as “nearest”.\n\ndenver_lat, denver_lon = 39.72510678889283, -104.98785545855408\n\n\nds.air.sel(lat=denver_lat, lon=360+denver_lon, method='nearest')\n\nIf we want to interpolate, we can use interp(). In this case I use linear or bilinear interpolation.\ninterp() can also be used to resample data to a new grid and even reproject data\n\nds.air.interp(lat=denver_lat, lon=360+denver_lon, method='linear')\n\nsel() and interp() can also be used on Dataset objects.\n\nds.sel(lat=slice(41.,37.), lon=slice(360-109,360-102))\n\n\nds.interp(lat=denver_lat, lon=360+denver_lon, method='linear')"
  },
  {
    "objectID": "notebooks-data/02_Xarray.html#analysis",
    "href": "notebooks-data/02_Xarray.html#analysis",
    "title": "03. Introduction to xarray",
    "section": "Analysis",
    "text": "Analysis\nAs a simple example, let’s try to calculate a mean field for the whole time range.\n\nds.mean(dim='time')\n\nWe can also calculate a zonal mean (averaging over longitude)\n\nds.mean(dim='lon')\n\nOther aggregation methods include min(), max(), std(), along with others.\n\nds.std(dim='time')\n\nThe data we have are in 6h timesteps. This can be resampled to daily or monthly. If you are familiar with pandas, xarray uses the same methods.\n\nds.resample(time='M').mean()\n\n\nds_mon = ds.resample(time='M').mean()\nds_mon\n\nThis is a really short time series but as an example, let’s calculate a monthly climatology (at least for 2 months). For this we can use groupby()\n\nds_clim = ds_mon.groupby(ds_mon.time.dt.month).mean()"
  },
  {
    "objectID": "notebooks-data/02_Xarray.html#plot-results",
    "href": "notebooks-data/02_Xarray.html#plot-results",
    "title": "03. Introduction to xarray",
    "section": "Plot results",
    "text": "Plot results\nFinally, let’s plot the results! This will plot the lat/lon axes of the original ds DataArray.\n\nds_clim.air.sel(month=10).plot()"
  },
  {
    "objectID": "notebooks-data/02_Zarr_Access_netCDF.html#summary",
    "href": "notebooks-data/02_Zarr_Access_netCDF.html#summary",
    "title": "Zarr Access for NetCDF4 files",
    "section": "Summary",
    "text": "Summary\nZarr is an open source library for storing N-dimensional array data. It supports multidimensional arrays with attributes and dimensions similar to NetCDF4, and it can be read by XArray. Zarr is often used for data held in cloud object storage (like Amazon S3), because it is better optimized for these situations than NetCDF4.\nDO NOT USE zarr-eodis-store is depends on only XArray\nThe zarr-eosdis-store library allows NASA EOSDIS NetCDF4 files to be read more efficiently by transferring only file metadata and data needed for computation in a small number of requests, rather than moving the whole file or making many small requests. It works by making the files directly readable by the Zarr Python library and XArray across a network. To use it, files must have a corresponding metadata file ending in .dmrpp, which increasingly true for cloud-accessible EOSDIS data. https://github.com/nasa/zarr-eosdis-store\nThe zarr-eosdis-store library provides several benefits over downloading EOSDIS data files and accessing them using XArray, NetCDF4, or HDF5 Python libraries:\n\nIt only downloads the chunks of data you actually read, so if you don’t read all variables or the full spatiotemporal extent of a file, you usually won’t spend time downloading those portions of the file\nIt parallelizes and optimizes downloads for the portions of files you do read, so download speeds can be faster in general\nIt automatically interoperates with Earthdata Login if you have a .netrc file set up\nIt is aware of some EOSDIS cloud implementation quirks and provides caching that can save time for repeated requests to individual files\n\nIt can also be faster than using XArray pointing NetCDF4 files with s3:// URLs, depending on the file’s internal structure, and is often more convenient.\nConsider using this library when: 1. The portion of the data file you need to use is much smaller than the full file, e.g. in cases of spatial subsets or reading a single variable from a file containing several 1. s3:// URLs are not readily available 1. Code need to run outside of the AWS cloud or us-west-2 region or in a hybrid cloud / non-cloud manner 1. s3:// access using XArray seems slower than you would expect (possibly due to unoptimized internal file structure) 1. No readily-available, public, cloud-optimized version of the data exists already. The example we show is also available as an AWS Public Dataset: https://registry.opendata.aws/mur/ 1. Adding “.dmrpp” to the end of a data URL returns a file\n\nObjectives\n\nBuild on prior knowledge from CMR and Earthdata Login tutorials\nWork through an example of using the EOSDIS Zarr Store to access data using XArray\nLearn about the Zarr format and library for accessing data in the cloud",
    "crumbs": [
      "Data Tutorials",
      "Earth data basics",
      "Zarr Access for NetCDF4 files"
    ]
  },
  {
    "objectID": "notebooks-data/02_Zarr_Access_netCDF.html#exercise",
    "href": "notebooks-data/02_Zarr_Access_netCDF.html#exercise",
    "title": "Zarr Access for NetCDF4 files",
    "section": "Exercise",
    "text": "Exercise\nIn this exercise, we will be using the eosdis-zarr-store library to aggregate and analyze a month of sea surface temperature for the Great Lakes region\n\nSet up\n\nImport Required Packages\n\n# Core libraries for this tutorial\n# Available via `pip install zarr zarr-eosdis-store`\nfrom eosdis_store import EosdisStore\nimport xarray as xr\n\n# Other Python libraries\nimport requests\nfrom pqdm.threads import pqdm\nfrom matplotlib import animation, pyplot as plt\nfrom IPython.core.display import display, HTML\n\n# Python standard library imports\nfrom pprint import pprint\n\nAlso set the width / height for plots we show\n\nplt.rcParams['figure.figsize'] = 12, 6\n\n\n\nSet Dataset, Time, and Region of Interest\nLook in PO.DAAC’s cloud archive for Group for High Resolution Sea Surface Temperature (GHRSST) Level 4 Multiscale Ultrahigh Resolution (MUR) data\n\ndata_provider = 'POCLOUD'\nmur_short_name = 'MUR-JPL-L4-GLOB-v4.1'\n\nLooking for data from the month of September over the Great Lakes\n\nstart_time = '2021-09-01T21:00:00Z'\nend_time = '2021-09-30T20:59:59Z'\n\n# Bounding box around the Great Lakes\nlats = slice(41, 49)\nlons = slice(-93, -76)\n\n# Some other possibly interesting bounding boxes:\n\n# Hawaiian Islands\n# lats = slice(18, 22.5)\n# lons = slice(-161, -154)\n\n# Mediterranean Sea\n# lats = slice(29, 45)\n# lons = slice(-7, 37)\n\n\n\n\nFind URLs for the dataset and AOI\nSet up a CMR granules search for our area of interest, as we saw in prior tutorials\n\ncmr_url = 'https://cmr.earthdata.nasa.gov/search/granules.json'\n\nSearch for granules in our area of interest, expecting one granule per day of September\n\nresponse = requests.get(cmr_url, \n                        params={\n                            'provider': data_provider,\n                            'short_name': mur_short_name, \n                            'temporal': f'{start_time},{end_time}',\n                            'bounding_box': f'{lons.start},{lats.start},{lons.stop},{lats.stop}',\n                            'page_size': 2000,\n                            }\n                       )\n\n\ngranules = response.json()['feed']['entry']\n\nfor granule in granules:\n    print(granule['title'])\n\n20210901090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1\n20210902090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1\n20210903090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1\n20210904090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1\n20210905090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1\n20210906090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1\n20210907090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1\n20210908090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1\n20210909090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1\n20210910090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1\n20210911090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1\n20210912090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1\n20210913090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1\n20210914090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1\n20210915090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1\n20210916090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1\n20210917090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1\n20210918090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1\n20210919090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1\n20210920090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1\n20210921090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1\n20210922090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1\n20210923090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1\n20210924090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1\n20210925090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1\n20210926090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1\n20210927090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1\n20210928090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1\n20210929090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1\n20210930090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1\n\n\n\npprint(granules[0])\n\n{'boxes': ['-90 -180 90 180'],\n 'browse_flag': False,\n 'collection_concept_id': 'C1996881146-POCLOUD',\n 'coordinate_system': 'CARTESIAN',\n 'data_center': 'POCLOUD',\n 'dataset_id': 'GHRSST Level 4 MUR Global Foundation Sea Surface Temperature '\n               'Analysis (v4.1)',\n 'day_night_flag': 'UNSPECIFIED',\n 'granule_size': '9.059906005859375E-5',\n 'id': 'G2113241213-POCLOUD',\n 'links': [{'href': 's3://podaac-ops-cumulus-protected/MUR-JPL-L4-GLOB-v4.1/20210901090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1.nc',\n            'hreflang': 'en-US',\n            'rel': 'http://esipfed.org/ns/fedsearch/1.1/s3#',\n            'title': 'This link provides direct download access via S3 to the '\n                     'granule.'},\n           {'href': 'https://archive.podaac.earthdata.nasa.gov/podaac-ops-cumulus-protected/MUR-JPL-L4-GLOB-v4.1/20210901090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1.nc',\n            'hreflang': 'en-US',\n            'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#',\n            'title': 'Download '\n                     '20210901090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1.nc'},\n           {'href': 'https://archive.podaac.earthdata.nasa.gov/podaac-ops-cumulus-public/MUR-JPL-L4-GLOB-v4.1/20210901090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1.nc.md5',\n            'hreflang': 'en-US',\n            'rel': 'http://esipfed.org/ns/fedsearch/1.1/metadata#',\n            'title': 'Download '\n                     '20210901090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1.nc.md5'},\n           {'href': 'https://archive.podaac.earthdata.nasa.gov/s3credentials',\n            'hreflang': 'en-US',\n            'rel': 'http://esipfed.org/ns/fedsearch/1.1/metadata#',\n            'title': 'api endpoint to retrieve temporary credentials valid for '\n                     'same-region direct s3 access'},\n           {'href': 'https://opendap.earthdata.nasa.gov/collections/C1996881146-POCLOUD/granules/20210901090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1',\n            'hreflang': 'en-US',\n            'rel': 'http://esipfed.org/ns/fedsearch/1.1/service#',\n            'title': 'OPeNDAP request URL'},\n           {'href': 'https://github.com/nasa/podaac_tools_and_services/tree/master/subset_opendap',\n            'hreflang': 'en-US',\n            'inherited': True,\n            'rel': 'http://esipfed.org/ns/fedsearch/1.1/documentation#'},\n           {'href': 'https://ghrsst.jpl.nasa.gov',\n            'hreflang': 'en-US',\n            'inherited': True,\n            'rel': 'http://esipfed.org/ns/fedsearch/1.1/documentation#'},\n           {'href': 'https://earthdata.nasa.gov/esds/competitive-programs/measures/mur-sst',\n            'hreflang': 'en-US',\n            'inherited': True,\n            'rel': 'http://esipfed.org/ns/fedsearch/1.1/metadata#'},\n           {'href': 'http://journals.ametsoc.org/doi/abs/10.1175/1520-0426%281998%29015%3C0741:BSHWSS%3E2.0.CO;2',\n            'hreflang': 'en-US',\n            'inherited': True,\n            'rel': 'http://esipfed.org/ns/fedsearch/1.1/documentation#'},\n           {'href': 'https://podaac-tools.jpl.nasa.gov/drive/files/OceanTemperature/ghrsst/docs/GDS20r5.pdf',\n            'hreflang': 'en-US',\n            'inherited': True,\n            'rel': 'http://esipfed.org/ns/fedsearch/1.1/documentation#'},\n           {'href': 'https://github.com/podaac/data-readers',\n            'hreflang': 'en-US',\n            'inherited': True,\n            'rel': 'http://esipfed.org/ns/fedsearch/1.1/documentation#'},\n           {'href': 'https://doi.org/10.1016/j.rse.2017.07.029',\n            'hreflang': 'en-US',\n            'inherited': True,\n            'rel': 'http://esipfed.org/ns/fedsearch/1.1/documentation#'},\n           {'href': 'https://registry.opendata.aws/mur/#usageexa',\n            'hreflang': 'en-US',\n            'inherited': True,\n            'rel': 'http://esipfed.org/ns/fedsearch/1.1/metadata#'},\n           {'href': 'http://www.ghrsst.org',\n            'hreflang': 'en-US',\n            'inherited': True,\n            'rel': 'http://esipfed.org/ns/fedsearch/1.1/documentation#'},\n           {'href': 'https://podaac.jpl.nasa.gov/CitingPODAAC',\n            'hreflang': 'en-US',\n            'inherited': True,\n            'rel': 'http://esipfed.org/ns/fedsearch/1.1/documentation#'},\n           {'href': 'https://cmr.earthdata.nasa.gov/virtual-directory/collections/C1996881146-POCLOUD ',\n            'hreflang': 'en-US',\n            'inherited': True,\n            'length': '300.0MB',\n            'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#'},\n           {'href': ' '\n                    'https://search.earthdata.nasa.gov/search/granules?p=C1996881146-POCLOUD ',\n            'hreflang': 'en-US',\n            'inherited': True,\n            'length': '700.0MB',\n            'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#'},\n           {'href': 'https://podaac.jpl.nasa.gov/MEaSUREs-MUR',\n            'hreflang': 'en-US',\n            'inherited': True,\n            'rel': 'http://esipfed.org/ns/fedsearch/1.1/documentation#'},\n           {'href': 'https://github.com/podaac/tutorials/blob/master/notebooks/SWOT-EA-2021/Colocate_satellite_insitu_ocean.ipynb',\n            'hreflang': 'en-US',\n            'inherited': True,\n            'rel': 'http://esipfed.org/ns/fedsearch/1.1/documentation#'}],\n 'online_access_flag': True,\n 'original_format': 'UMM_JSON',\n 'time_end': '2021-09-01T21:00:00.000Z',\n 'time_start': '2021-08-31T21:00:00.000Z',\n 'title': '20210901090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1',\n 'updated': '2021-09-10T07:29:40.511Z'}\n\n\n\nurls = []\nfor granule in granules:\n    for link in granule['links']:\n        if link['rel'].endswith('/data#'):\n            urls.append(link['href'])\n            break\npprint(urls)\n\n['https://archive.podaac.earthdata.nasa.gov/podaac-ops-cumulus-protected/MUR-JPL-L4-GLOB-v4.1/20210901090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1.nc',\n 'https://archive.podaac.earthdata.nasa.gov/podaac-ops-cumulus-protected/MUR-JPL-L4-GLOB-v4.1/20210902090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1.nc',\n 'https://archive.podaac.earthdata.nasa.gov/podaac-ops-cumulus-protected/MUR-JPL-L4-GLOB-v4.1/20210903090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1.nc',\n 'https://archive.podaac.earthdata.nasa.gov/podaac-ops-cumulus-protected/MUR-JPL-L4-GLOB-v4.1/20210904090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1.nc',\n 'https://archive.podaac.earthdata.nasa.gov/podaac-ops-cumulus-protected/MUR-JPL-L4-GLOB-v4.1/20210905090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1.nc',\n 'https://archive.podaac.earthdata.nasa.gov/podaac-ops-cumulus-protected/MUR-JPL-L4-GLOB-v4.1/20210906090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1.nc',\n 'https://archive.podaac.earthdata.nasa.gov/podaac-ops-cumulus-protected/MUR-JPL-L4-GLOB-v4.1/20210907090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1.nc',\n 'https://archive.podaac.earthdata.nasa.gov/podaac-ops-cumulus-protected/MUR-JPL-L4-GLOB-v4.1/20210908090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1.nc',\n 'https://archive.podaac.earthdata.nasa.gov/podaac-ops-cumulus-protected/MUR-JPL-L4-GLOB-v4.1/20210909090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1.nc',\n 'https://archive.podaac.earthdata.nasa.gov/podaac-ops-cumulus-protected/MUR-JPL-L4-GLOB-v4.1/20210910090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1.nc',\n 'https://archive.podaac.earthdata.nasa.gov/podaac-ops-cumulus-protected/MUR-JPL-L4-GLOB-v4.1/20210911090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1.nc',\n 'https://archive.podaac.earthdata.nasa.gov/podaac-ops-cumulus-protected/MUR-JPL-L4-GLOB-v4.1/20210912090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1.nc',\n 'https://archive.podaac.earthdata.nasa.gov/podaac-ops-cumulus-protected/MUR-JPL-L4-GLOB-v4.1/20210913090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1.nc',\n 'https://archive.podaac.earthdata.nasa.gov/podaac-ops-cumulus-protected/MUR-JPL-L4-GLOB-v4.1/20210914090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1.nc',\n 'https://archive.podaac.earthdata.nasa.gov/podaac-ops-cumulus-protected/MUR-JPL-L4-GLOB-v4.1/20210915090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1.nc',\n 'https://archive.podaac.earthdata.nasa.gov/podaac-ops-cumulus-protected/MUR-JPL-L4-GLOB-v4.1/20210916090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1.nc',\n 'https://archive.podaac.earthdata.nasa.gov/podaac-ops-cumulus-protected/MUR-JPL-L4-GLOB-v4.1/20210917090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1.nc',\n 'https://archive.podaac.earthdata.nasa.gov/podaac-ops-cumulus-protected/MUR-JPL-L4-GLOB-v4.1/20210918090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1.nc',\n 'https://archive.podaac.earthdata.nasa.gov/podaac-ops-cumulus-protected/MUR-JPL-L4-GLOB-v4.1/20210919090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1.nc',\n 'https://archive.podaac.earthdata.nasa.gov/podaac-ops-cumulus-protected/MUR-JPL-L4-GLOB-v4.1/20210920090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1.nc',\n 'https://archive.podaac.earthdata.nasa.gov/podaac-ops-cumulus-protected/MUR-JPL-L4-GLOB-v4.1/20210921090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1.nc',\n 'https://archive.podaac.earthdata.nasa.gov/podaac-ops-cumulus-protected/MUR-JPL-L4-GLOB-v4.1/20210922090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1.nc',\n 'https://archive.podaac.earthdata.nasa.gov/podaac-ops-cumulus-protected/MUR-JPL-L4-GLOB-v4.1/20210923090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1.nc',\n 'https://archive.podaac.earthdata.nasa.gov/podaac-ops-cumulus-protected/MUR-JPL-L4-GLOB-v4.1/20210924090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1.nc',\n 'https://archive.podaac.earthdata.nasa.gov/podaac-ops-cumulus-protected/MUR-JPL-L4-GLOB-v4.1/20210925090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1.nc',\n 'https://archive.podaac.earthdata.nasa.gov/podaac-ops-cumulus-protected/MUR-JPL-L4-GLOB-v4.1/20210926090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1.nc',\n 'https://archive.podaac.earthdata.nasa.gov/podaac-ops-cumulus-protected/MUR-JPL-L4-GLOB-v4.1/20210927090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1.nc',\n 'https://archive.podaac.earthdata.nasa.gov/podaac-ops-cumulus-protected/MUR-JPL-L4-GLOB-v4.1/20210928090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1.nc',\n 'https://archive.podaac.earthdata.nasa.gov/podaac-ops-cumulus-protected/MUR-JPL-L4-GLOB-v4.1/20210929090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1.nc',\n 'https://archive.podaac.earthdata.nasa.gov/podaac-ops-cumulus-protected/MUR-JPL-L4-GLOB-v4.1/20210930090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1.nc']\n\n\n\n\nOpen and view our AOI without downloading a whole file\n\nCheck to see if we can use an efficient partial-access technique\n\nresponse = requests.head(f'{urls[0]}.dmrpp')\n\nprint('Can we use EosdisZarrStore and XArray to access these files more efficiently?')\nprint('Yes' if response.ok else 'No')\n\nCan we use EosdisZarrStore and XArray to access these files more efficiently?\nYes\n\n\nOpen our first URL using the Zarr library\n\nurl = urls[0]\n\nds = xr.open_zarr(EosdisStore(url), consolidated=False)\n\nThat’s it! No downloads, temporary credentials, or S3 filesystems. Hereafter, we interact with the ds variable as with any XArray dataset. We need not worry about the EosdisStore anymore.\nView the file’s variable structure\n\nds\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:           (time: 1, lat: 17999, lon: 36000)\nCoordinates:\n  * lat               (lat) float32 -89.99 -89.98 -89.97 ... 89.97 89.98 89.99\n  * lon               (lon) float32 -180.0 -180.0 -180.0 ... 180.0 180.0 180.0\n  * time              (time) datetime64[ns] 2021-09-01T09:00:00\nData variables:\n    analysed_sst      (time, lat, lon) float32 dask.array&lt;chunksize=(1, 1023, 2047), meta=np.ndarray&gt;\n    analysis_error    (time, lat, lon) float32 dask.array&lt;chunksize=(1, 1023, 2047), meta=np.ndarray&gt;\n    dt_1km_data       (time, lat, lon) timedelta64[ns] dask.array&lt;chunksize=(1, 1447, 2895), meta=np.ndarray&gt;\n    mask              (time, lat, lon) float32 dask.array&lt;chunksize=(1, 1447, 2895), meta=np.ndarray&gt;\n    sea_ice_fraction  (time, lat, lon) float32 dask.array&lt;chunksize=(1, 1447, 2895), meta=np.ndarray&gt;\n    sst_anomaly       (time, lat, lon) float32 dask.array&lt;chunksize=(1, 1023, 2047), meta=np.ndarray&gt;\nAttributes: (12/47)\n    Conventions:                CF-1.7\n    title:                      Daily MUR SST, Final product\n    summary:                    A merged, multi-sensor L4 Foundation SST anal...\n    references:                 http://podaac.jpl.nasa.gov/Multi-scale_Ultra-...\n    institution:                Jet Propulsion Laboratory\n    history:                    created at nominal 4-day latency; replaced nr...\n    ...                         ...\n    project:                    NASA Making Earth Science Data Records for Us...\n    publisher_name:             GHRSST Project Office\n    publisher_url:              http://www.ghrsst.org\n    publisher_email:            ghrsst-po@nceo.ac.uk\n    processing_level:           L4\n    cdm_data_type:              gridxarray.DatasetDimensions:time: 1lat: 17999lon: 36000Coordinates: (3)lat(lat)float32-89.99 -89.98 ... 89.98 89.99long_name :latitudestandard_name :latitudeaxis :Yunits :degrees_northvalid_min :-90.0valid_max :90.0comment :geolocations inherited from the input data without correctionarray([-89.99, -89.98, -89.97, ...,  89.97,  89.98,  89.99], dtype=float32)lon(lon)float32-180.0 -180.0 ... 180.0 180.0long_name :longitudestandard_name :longitudeaxis :Xunits :degrees_eastvalid_min :-180.0valid_max :180.0comment :geolocations inherited from the input data without correctionarray([-179.99, -179.98, -179.97, ...,  179.98,  179.99,  180.  ],\n      dtype=float32)time(time)datetime64[ns]2021-09-01T09:00:00long_name :reference time of sst fieldstandard_name :timeaxis :Tcomment :Nominal time of analyzed fieldsarray(['2021-09-01T09:00:00.000000000'], dtype='datetime64[ns]')Data variables: (6)analysed_sst(time, lat, lon)float32dask.array&lt;chunksize=(1, 1023, 2047), meta=np.ndarray&gt;long_name :analysed sea surface temperaturestandard_name :sea_surface_foundation_temperatureunits :kelvinvalid_min :-32767valid_max :32767comment :\\\"Final\\\" version using Multi-Resolution Variational Analysis (MRVA) method for interpolationsource :MODIS_T-JPL, MODIS_A-JPL, AMSR2-REMSS, AVHRRMTA_G-NAVO, AVHRRMTB_G-NAVO, iQUAM-NOAA/NESDIS, Ice_Conc-OSISAF\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n2.41 GiB\n7.99 MiB\n\n\nShape\n(1, 17999, 36000)\n(1, 1023, 2047)\n\n\nCount\n325 Tasks\n324 Chunks\n\n\nType\nfloat32\nnumpy.ndarray\n\n\n\n\n\n\n\n\nanalysis_error\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(1, 1023, 2047), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\nestimated error standard deviation of analysed_sst\n\nunits :\n\nkelvin\n\nvalid_min :\n\n0\n\nvalid_max :\n\n32767\n\ncomment :\n\nuncertainty in \\\"analysed_sst\\\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n2.41 GiB\n7.99 MiB\n\n\nShape\n(1, 17999, 36000)\n(1, 1023, 2047)\n\n\nCount\n325 Tasks\n324 Chunks\n\n\nType\nfloat32\nnumpy.ndarray\n\n\n\n\n\n\n\n\n\ndt_1km_data\n\n\n(time, lat, lon)\n\n\ntimedelta64[ns]\n\n\ndask.array&lt;chunksize=(1, 1447, 2895), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\ntime to most recent 1km data\n\nvalid_min :\n\n-127\n\nvalid_max :\n\n127\n\nsource :\n\nMODIS and VIIRS pixels ingested by MUR\n\ncomment :\n\nThe grid value is hours between the analysis time and the most recent MODIS or VIIRS 1km L2P datum within 0.01 degrees from the grid point. \\\"Fill value\\\" indicates absence of such 1km data at the grid point.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n4.83 GiB\n31.96 MiB\n\n\nShape\n(1, 17999, 36000)\n(1, 1447, 2895)\n\n\nCount\n170 Tasks\n169 Chunks\n\n\nType\ntimedelta64[ns]\nnumpy.ndarray\n\n\n\n\n\n\n\n\n\nmask\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(1, 1447, 2895), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\nsea/land field composite mask\n\nvalid_min :\n\n1\n\nvalid_max :\n\n31\n\nflag_masks :\n\n[1, 2, 4, 8, 16]\n\nflag_meanings :\n\nopen_sea land open_lake open_sea_with_ice_in_the_grid open_lake_with_ice_in_the_grid\n\ncomment :\n\nmask can be used to further filter the data.\n\nsource :\n\nGMT \\\"grdlandmask\\\", ice flag from sea_ice_fraction data\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n2.41 GiB\n15.98 MiB\n\n\nShape\n(1, 17999, 36000)\n(1, 1447, 2895)\n\n\nCount\n170 Tasks\n169 Chunks\n\n\nType\nfloat32\nnumpy.ndarray\n\n\n\n\n\n\n\n\n\nsea_ice_fraction\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(1, 1447, 2895), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\nsea ice area fraction\n\nstandard_name :\n\nsea_ice_area_fraction\n\nvalid_min :\n\n0\n\nvalid_max :\n\n100\n\nsource :\n\nEUMETSAT OSI-SAF, copyright EUMETSAT\n\ncomment :\n\nice fraction is a dimensionless quantity between 0 and 1; it has been interpolated by a nearest neighbor approach.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n2.41 GiB\n15.98 MiB\n\n\nShape\n(1, 17999, 36000)\n(1, 1447, 2895)\n\n\nCount\n170 Tasks\n169 Chunks\n\n\nType\nfloat32\nnumpy.ndarray\n\n\n\n\n\n\n\n\n\nsst_anomaly\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(1, 1023, 2047), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\nSST anomaly from a seasonal SST climatology based on the MUR data over 2003-2014 period\n\nunits :\n\nkelvin\n\nvalid_min :\n\n-32767\n\nvalid_max :\n\n32767\n\ncomment :\n\nanomaly reference to the day-of-year average between 2003 and 2014\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n2.41 GiB\n7.99 MiB\n\n\nShape\n(1, 17999, 36000)\n(1, 1023, 2047)\n\n\nCount\n325 Tasks\n324 Chunks\n\n\nType\nfloat32\nnumpy.ndarray\n\n\n\n\n\n\n\n\nAttributes: (47)Conventions :CF-1.7title :Daily MUR SST, Final productsummary :A merged, multi-sensor L4 Foundation SST analysis product from JPL.references :http://podaac.jpl.nasa.gov/Multi-scale_Ultra-high_Resolution_MUR-SSTinstitution :Jet Propulsion Laboratoryhistory :created at nominal 4-day latency; replaced nrt (1-day latency) version.comment :MUR = \\\"Multi-scale Ultra-high Resolution\\\"license :These data are available free of charge under data policy of JPL PO.DAAC.id :MUR-JPL-L4-GLOB-v04.1naming_authority :org.ghrsstproduct_version :04.1uuid :27665bc0-d5fc-11e1-9b23-0800200c9a66gds_version_id :2.0netcdf_version_id :4.1date_created :20210910T072132Zstart_time :20210901T090000Zstop_time :20210901T090000Ztime_coverage_start :20210831T210000Ztime_coverage_end :20210901T210000Zfile_quality_level :3source :MODIS_T-JPL, MODIS_A-JPL, AMSR2-REMSS, AVHRRMTA_G-NAVO, AVHRRMTB_G-NAVO, iQUAM-NOAA/NESDIS, Ice_Conc-OSISAFplatform :Terra, Aqua, GCOM-W, MetOp-A, MetOp-B, Buoys/Shipssensor :MODIS, AMSR2, AVHRR, in-situMetadata_Conventions :Unidata Observation Dataset v1.0metadata_link :http://podaac.jpl.nasa.gov/ws/metadata/dataset/?format=iso&shortName=MUR-JPL-L4-GLOB-v04.1keywords :Oceans &gt; Ocean Temperature &gt; Sea Surface Temperaturekeywords_vocabulary :NASA Global Change Master Directory (GCMD) Science Keywordsstandard_name_vocabulary :NetCDF Climate and Forecast (CF) Metadata Conventionsouthernmost_latitude :-90.0northernmost_latitude :90.0westernmost_longitude :-180.0easternmost_longitude :180.0spatial_resolution :0.01 degreesgeospatial_lat_units :degrees northgeospatial_lat_resolution :0.009999999776geospatial_lon_units :degrees eastgeospatial_lon_resolution :0.009999999776acknowledgment :Please acknowledge the use of these data with the following statement:  These data were provided by JPL under support by NASA MEaSUREs program.creator_name :JPL MUR SST projectcreator_email :ghrsst@podaac.jpl.nasa.govcreator_url :http://mur.jpl.nasa.govproject :NASA Making Earth Science Data Records for Use in Research Environments (MEaSUREs) Programpublisher_name :GHRSST Project Officepublisher_url :http://www.ghrsst.orgpublisher_email :ghrsst-po@nceo.ac.ukprocessing_level :L4cdm_data_type :grid\n\n\n\nds.analysed_sst\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray 'analysed_sst' (time: 1, lat: 17999, lon: 36000)&gt;\ndask.array&lt;open_dataset-4d5a9a1e1fda090e80524b67b2e413c6analysed_sst, shape=(1, 17999, 36000), dtype=float32, chunksize=(1, 1023, 2047), chunktype=numpy.ndarray&gt;\nCoordinates:\n  * lat      (lat) float32 -89.99 -89.98 -89.97 -89.96 ... 89.97 89.98 89.99\n  * lon      (lon) float32 -180.0 -180.0 -180.0 -180.0 ... 180.0 180.0 180.0\n  * time     (time) datetime64[ns] 2021-09-01T09:00:00\nAttributes:\n    long_name:      analysed sea surface temperature\n    standard_name:  sea_surface_foundation_temperature\n    units:          kelvin\n    valid_min:      -32767\n    valid_max:      32767\n    comment:        \\\"Final\\\" version using Multi-Resolution Variational Anal...\n    source:         MODIS_T-JPL, MODIS_A-JPL, AMSR2-REMSS, AVHRRMTA_G-NAVO, A...xarray.DataArray'analysed_sst'time: 1lat: 17999lon: 36000dask.array&lt;chunksize=(1, 1023, 2047), meta=np.ndarray&gt;\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n2.41 GiB\n7.99 MiB\n\n\nShape\n(1, 17999, 36000)\n(1, 1023, 2047)\n\n\nCount\n325 Tasks\n324 Chunks\n\n\nType\nfloat32\nnumpy.ndarray\n\n\n\n\n\n\n\nCoordinates: (3)lat(lat)float32-89.99 -89.98 ... 89.98 89.99long_name :latitudestandard_name :latitudeaxis :Yunits :degrees_northvalid_min :-90.0valid_max :90.0comment :geolocations inherited from the input data without correctionarray([-89.99, -89.98, -89.97, ...,  89.97,  89.98,  89.99], dtype=float32)lon(lon)float32-180.0 -180.0 ... 180.0 180.0long_name :longitudestandard_name :longitudeaxis :Xunits :degrees_eastvalid_min :-180.0valid_max :180.0comment :geolocations inherited from the input data without correctionarray([-179.99, -179.98, -179.97, ...,  179.98,  179.99,  180.  ],\n      dtype=float32)time(time)datetime64[ns]2021-09-01T09:00:00long_name :reference time of sst fieldstandard_name :timeaxis :Tcomment :Nominal time of analyzed fieldsarray(['2021-09-01T09:00:00.000000000'], dtype='datetime64[ns]')Attributes: (7)long_name :analysed sea surface temperaturestandard_name :sea_surface_foundation_temperatureunits :kelvinvalid_min :-32767valid_max :32767comment :\\\"Final\\\" version using Multi-Resolution Variational Analysis (MRVA) method for interpolationsource :MODIS_T-JPL, MODIS_A-JPL, AMSR2-REMSS, AVHRRMTA_G-NAVO, AVHRRMTB_G-NAVO, iQUAM-NOAA/NESDIS, Ice_Conc-OSISAF\n\n\n\nsst = ds.analysed_sst.sel(lat=lats, lon=lons)\nsst\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray 'analysed_sst' (time: 1, lat: 801, lon: 1701)&gt;\ndask.array&lt;getitem, shape=(1, 801, 1701), dtype=float32, chunksize=(1, 601, 1536), chunktype=numpy.ndarray&gt;\nCoordinates:\n  * lat      (lat) float32 41.0 41.01 41.02 41.03 ... 48.97 48.98 48.99 49.0\n  * lon      (lon) float32 -93.0 -92.99 -92.98 -92.97 ... -76.02 -76.01 -76.0\n  * time     (time) datetime64[ns] 2021-09-01T09:00:00\nAttributes:\n    long_name:      analysed sea surface temperature\n    standard_name:  sea_surface_foundation_temperature\n    units:          kelvin\n    valid_min:      -32767\n    valid_max:      32767\n    comment:        \\\"Final\\\" version using Multi-Resolution Variational Anal...\n    source:         MODIS_T-JPL, MODIS_A-JPL, AMSR2-REMSS, AVHRRMTA_G-NAVO, A...xarray.DataArray'analysed_sst'time: 1lat: 801lon: 1701dask.array&lt;chunksize=(1, 200, 1536), meta=np.ndarray&gt;\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n5.20 MiB\n3.52 MiB\n\n\nShape\n(1, 801, 1701)\n(1, 601, 1536)\n\n\nCount\n329 Tasks\n4 Chunks\n\n\nType\nfloat32\nnumpy.ndarray\n\n\n\n\n\n\n\nCoordinates: (3)lat(lat)float3241.0 41.01 41.02 ... 48.99 49.0long_name :latitudestandard_name :latitudeaxis :Yunits :degrees_northvalid_min :-90.0valid_max :90.0comment :geolocations inherited from the input data without correctionarray([41.  , 41.01, 41.02, ..., 48.98, 48.99, 49.  ], dtype=float32)lon(lon)float32-93.0 -92.99 ... -76.01 -76.0long_name :longitudestandard_name :longitudeaxis :Xunits :degrees_eastvalid_min :-180.0valid_max :180.0comment :geolocations inherited from the input data without correctionarray([-93.  , -92.99, -92.98, ..., -76.02, -76.01, -76.  ], dtype=float32)time(time)datetime64[ns]2021-09-01T09:00:00long_name :reference time of sst fieldstandard_name :timeaxis :Tcomment :Nominal time of analyzed fieldsarray(['2021-09-01T09:00:00.000000000'], dtype='datetime64[ns]')Attributes: (7)long_name :analysed sea surface temperaturestandard_name :sea_surface_foundation_temperatureunits :kelvinvalid_min :-32767valid_max :32767comment :\\\"Final\\\" version using Multi-Resolution Variational Analysis (MRVA) method for interpolationsource :MODIS_T-JPL, MODIS_A-JPL, AMSR2-REMSS, AVHRRMTA_G-NAVO, AVHRRMTB_G-NAVO, iQUAM-NOAA/NESDIS, Ice_Conc-OSISAF\n\n\n\nsst.plot()\n\n\n\n\n\n\n\nAggregate and analyze 30 files\nSet up a function to open all of our URLs as XArrays in parallel\n\ndef open_as_zarr_xarray(url):\n    return xr.open_zarr(EosdisStore(url), consolidated=False)\n\ndatasets = pqdm(urls, open_as_zarr_xarray, n_jobs=30)\n\n\n\n\n\n\n\n\n\n\nCombine the individual file-based datasets into a single xarray dataset with a time axis\n\nds = xr.concat(datasets, 'time')\nds\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:           (time: 30, lat: 17999, lon: 36000)\nCoordinates:\n  * lat               (lat) float32 -89.99 -89.98 -89.97 ... 89.97 89.98 89.99\n  * lon               (lon) float32 -180.0 -180.0 -180.0 ... 180.0 180.0 180.0\n  * time              (time) datetime64[ns] 2021-09-01T09:00:00 ... 2021-09-3...\nData variables:\n    analysed_sst      (time, lat, lon) float32 dask.array&lt;chunksize=(1, 1023, 2047), meta=np.ndarray&gt;\n    analysis_error    (time, lat, lon) float32 dask.array&lt;chunksize=(1, 1023, 2047), meta=np.ndarray&gt;\n    dt_1km_data       (time, lat, lon) timedelta64[ns] dask.array&lt;chunksize=(1, 1447, 2895), meta=np.ndarray&gt;\n    mask              (time, lat, lon) float32 dask.array&lt;chunksize=(1, 1447, 2895), meta=np.ndarray&gt;\n    sea_ice_fraction  (time, lat, lon) float32 dask.array&lt;chunksize=(1, 1447, 2895), meta=np.ndarray&gt;\n    sst_anomaly       (time, lat, lon) float32 dask.array&lt;chunksize=(1, 1023, 2047), meta=np.ndarray&gt;\nAttributes: (12/47)\n    Conventions:                CF-1.7\n    title:                      Daily MUR SST, Final product\n    summary:                    A merged, multi-sensor L4 Foundation SST anal...\n    references:                 http://podaac.jpl.nasa.gov/Multi-scale_Ultra-...\n    institution:                Jet Propulsion Laboratory\n    history:                    created at nominal 4-day latency; replaced nr...\n    ...                         ...\n    project:                    NASA Making Earth Science Data Records for Us...\n    publisher_name:             GHRSST Project Office\n    publisher_url:              http://www.ghrsst.org\n    publisher_email:            ghrsst-po@nceo.ac.uk\n    processing_level:           L4\n    cdm_data_type:              gridxarray.DatasetDimensions:time: 30lat: 17999lon: 36000Coordinates: (3)lat(lat)float32-89.99 -89.98 ... 89.98 89.99long_name :latitudestandard_name :latitudeaxis :Yunits :degrees_northvalid_min :-90.0valid_max :90.0comment :geolocations inherited from the input data without correctionarray([-89.99, -89.98, -89.97, ...,  89.97,  89.98,  89.99], dtype=float32)lon(lon)float32-180.0 -180.0 ... 180.0 180.0long_name :longitudestandard_name :longitudeaxis :Xunits :degrees_eastvalid_min :-180.0valid_max :180.0comment :geolocations inherited from the input data without correctionarray([-179.99, -179.98, -179.97, ...,  179.98,  179.99,  180.  ],\n      dtype=float32)time(time)datetime64[ns]2021-09-01T09:00:00 ... 2021-09-...long_name :reference time of sst fieldstandard_name :timeaxis :Tcomment :Nominal time of analyzed fieldsarray(['2021-09-01T09:00:00.000000000', '2021-09-02T09:00:00.000000000',\n       '2021-09-03T09:00:00.000000000', '2021-09-04T09:00:00.000000000',\n       '2021-09-05T09:00:00.000000000', '2021-09-06T09:00:00.000000000',\n       '2021-09-07T09:00:00.000000000', '2021-09-08T09:00:00.000000000',\n       '2021-09-09T09:00:00.000000000', '2021-09-10T09:00:00.000000000',\n       '2021-09-11T09:00:00.000000000', '2021-09-12T09:00:00.000000000',\n       '2021-09-13T09:00:00.000000000', '2021-09-14T09:00:00.000000000',\n       '2021-09-15T09:00:00.000000000', '2021-09-16T09:00:00.000000000',\n       '2021-09-17T09:00:00.000000000', '2021-09-18T09:00:00.000000000',\n       '2021-09-19T09:00:00.000000000', '2021-09-20T09:00:00.000000000',\n       '2021-09-21T09:00:00.000000000', '2021-09-22T09:00:00.000000000',\n       '2021-09-23T09:00:00.000000000', '2021-09-24T09:00:00.000000000',\n       '2021-09-25T09:00:00.000000000', '2021-09-26T09:00:00.000000000',\n       '2021-09-27T09:00:00.000000000', '2021-09-28T09:00:00.000000000',\n       '2021-09-29T09:00:00.000000000', '2021-09-30T09:00:00.000000000'],\n      dtype='datetime64[ns]')Data variables: (6)analysed_sst(time, lat, lon)float32dask.array&lt;chunksize=(1, 1023, 2047), meta=np.ndarray&gt;long_name :analysed sea surface temperaturestandard_name :sea_surface_foundation_temperatureunits :kelvinvalid_min :-32767valid_max :32767comment :\\\"Final\\\" version using Multi-Resolution Variational Analysis (MRVA) method for interpolationsource :MODIS_T-JPL, MODIS_A-JPL, AMSR2-REMSS, AVHRRMTA_G-NAVO, AVHRRMTB_G-NAVO, iQUAM-NOAA/NESDIS, Ice_Conc-OSISAF\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n72.42 GiB\n7.99 MiB\n\n\nShape\n(30, 17999, 36000)\n(1, 1023, 2047)\n\n\nCount\n19470 Tasks\n9720 Chunks\n\n\nType\nfloat32\nnumpy.ndarray\n\n\n\n\n\n\n\n\nanalysis_error\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(1, 1023, 2047), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\nestimated error standard deviation of analysed_sst\n\nunits :\n\nkelvin\n\nvalid_min :\n\n0\n\nvalid_max :\n\n32767\n\ncomment :\n\nuncertainty in \\\"analysed_sst\\\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n72.42 GiB\n7.99 MiB\n\n\nShape\n(30, 17999, 36000)\n(1, 1023, 2047)\n\n\nCount\n19470 Tasks\n9720 Chunks\n\n\nType\nfloat32\nnumpy.ndarray\n\n\n\n\n\n\n\n\n\ndt_1km_data\n\n\n(time, lat, lon)\n\n\ntimedelta64[ns]\n\n\ndask.array&lt;chunksize=(1, 1447, 2895), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\ntime to most recent 1km data\n\nvalid_min :\n\n-127\n\nvalid_max :\n\n127\n\nsource :\n\nMODIS and VIIRS pixels ingested by MUR\n\ncomment :\n\nThe grid value is hours between the analysis time and the most recent MODIS or VIIRS 1km L2P datum within 0.01 degrees from the grid point. \\\"Fill value\\\" indicates absence of such 1km data at the grid point.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n144.83 GiB\n31.96 MiB\n\n\nShape\n(30, 17999, 36000)\n(1, 1447, 2895)\n\n\nCount\n10170 Tasks\n5070 Chunks\n\n\nType\ntimedelta64[ns]\nnumpy.ndarray\n\n\n\n\n\n\n\n\n\nmask\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(1, 1447, 2895), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\nsea/land field composite mask\n\nvalid_min :\n\n1\n\nvalid_max :\n\n31\n\nflag_masks :\n\n[1, 2, 4, 8, 16]\n\nflag_meanings :\n\nopen_sea land open_lake open_sea_with_ice_in_the_grid open_lake_with_ice_in_the_grid\n\ncomment :\n\nmask can be used to further filter the data.\n\nsource :\n\nGMT \\\"grdlandmask\\\", ice flag from sea_ice_fraction data\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n72.42 GiB\n15.98 MiB\n\n\nShape\n(30, 17999, 36000)\n(1, 1447, 2895)\n\n\nCount\n10170 Tasks\n5070 Chunks\n\n\nType\nfloat32\nnumpy.ndarray\n\n\n\n\n\n\n\n\n\nsea_ice_fraction\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(1, 1447, 2895), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\nsea ice area fraction\n\nstandard_name :\n\nsea_ice_area_fraction\n\nvalid_min :\n\n0\n\nvalid_max :\n\n100\n\nsource :\n\nEUMETSAT OSI-SAF, copyright EUMETSAT\n\ncomment :\n\nice fraction is a dimensionless quantity between 0 and 1; it has been interpolated by a nearest neighbor approach.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n72.42 GiB\n15.98 MiB\n\n\nShape\n(30, 17999, 36000)\n(1, 1447, 2895)\n\n\nCount\n10170 Tasks\n5070 Chunks\n\n\nType\nfloat32\nnumpy.ndarray\n\n\n\n\n\n\n\n\n\nsst_anomaly\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(1, 1023, 2047), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\nSST anomaly from a seasonal SST climatology based on the MUR data over 2003-2014 period\n\nunits :\n\nkelvin\n\nvalid_min :\n\n-32767\n\nvalid_max :\n\n32767\n\ncomment :\n\nanomaly reference to the day-of-year average between 2003 and 2014\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n72.42 GiB\n7.99 MiB\n\n\nShape\n(30, 17999, 36000)\n(1, 1023, 2047)\n\n\nCount\n19470 Tasks\n9720 Chunks\n\n\nType\nfloat32\nnumpy.ndarray\n\n\n\n\n\n\n\n\nAttributes: (47)Conventions :CF-1.7title :Daily MUR SST, Final productsummary :A merged, multi-sensor L4 Foundation SST analysis product from JPL.references :http://podaac.jpl.nasa.gov/Multi-scale_Ultra-high_Resolution_MUR-SSTinstitution :Jet Propulsion Laboratoryhistory :created at nominal 4-day latency; replaced nrt (1-day latency) version.comment :MUR = \\\"Multi-scale Ultra-high Resolution\\\"license :These data are available free of charge under data policy of JPL PO.DAAC.id :MUR-JPL-L4-GLOB-v04.1naming_authority :org.ghrsstproduct_version :04.1uuid :27665bc0-d5fc-11e1-9b23-0800200c9a66gds_version_id :2.0netcdf_version_id :4.1date_created :20210910T072132Zstart_time :20210901T090000Zstop_time :20210901T090000Ztime_coverage_start :20210831T210000Ztime_coverage_end :20210901T210000Zfile_quality_level :3source :MODIS_T-JPL, MODIS_A-JPL, AMSR2-REMSS, AVHRRMTA_G-NAVO, AVHRRMTB_G-NAVO, iQUAM-NOAA/NESDIS, Ice_Conc-OSISAFplatform :Terra, Aqua, GCOM-W, MetOp-A, MetOp-B, Buoys/Shipssensor :MODIS, AMSR2, AVHRR, in-situMetadata_Conventions :Unidata Observation Dataset v1.0metadata_link :http://podaac.jpl.nasa.gov/ws/metadata/dataset/?format=iso&shortName=MUR-JPL-L4-GLOB-v04.1keywords :Oceans &gt; Ocean Temperature &gt; Sea Surface Temperaturekeywords_vocabulary :NASA Global Change Master Directory (GCMD) Science Keywordsstandard_name_vocabulary :NetCDF Climate and Forecast (CF) Metadata Conventionsouthernmost_latitude :-90.0northernmost_latitude :90.0westernmost_longitude :-180.0easternmost_longitude :180.0spatial_resolution :0.01 degreesgeospatial_lat_units :degrees northgeospatial_lat_resolution :0.009999999776geospatial_lon_units :degrees eastgeospatial_lon_resolution :0.009999999776acknowledgment :Please acknowledge the use of these data with the following statement:  These data were provided by JPL under support by NASA MEaSUREs program.creator_name :JPL MUR SST projectcreator_email :ghrsst@podaac.jpl.nasa.govcreator_url :http://mur.jpl.nasa.govproject :NASA Making Earth Science Data Records for Use in Research Environments (MEaSUREs) Programpublisher_name :GHRSST Project Officepublisher_url :http://www.ghrsst.orgpublisher_email :ghrsst-po@nceo.ac.ukprocessing_level :L4cdm_data_type :grid\n\n\nLook at the Analysed SST variable metadata\n\nall_sst = ds.analysed_sst\nall_sst\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray 'analysed_sst' (time: 30, lat: 17999, lon: 36000)&gt;\ndask.array&lt;concatenate, shape=(30, 17999, 36000), dtype=float32, chunksize=(1, 1023, 2047), chunktype=numpy.ndarray&gt;\nCoordinates:\n  * lat      (lat) float32 -89.99 -89.98 -89.97 -89.96 ... 89.97 89.98 89.99\n  * lon      (lon) float32 -180.0 -180.0 -180.0 -180.0 ... 180.0 180.0 180.0\n  * time     (time) datetime64[ns] 2021-09-01T09:00:00 ... 2021-09-30T09:00:00\nAttributes:\n    long_name:      analysed sea surface temperature\n    standard_name:  sea_surface_foundation_temperature\n    units:          kelvin\n    valid_min:      -32767\n    valid_max:      32767\n    comment:        \\\"Final\\\" version using Multi-Resolution Variational Anal...\n    source:         MODIS_T-JPL, MODIS_A-JPL, AMSR2-REMSS, AVHRRMTA_G-NAVO, A...xarray.DataArray'analysed_sst'time: 30lat: 17999lon: 36000dask.array&lt;chunksize=(1, 1023, 2047), meta=np.ndarray&gt;\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n72.42 GiB\n7.99 MiB\n\n\nShape\n(30, 17999, 36000)\n(1, 1023, 2047)\n\n\nCount\n19470 Tasks\n9720 Chunks\n\n\nType\nfloat32\nnumpy.ndarray\n\n\n\n\n\n\n\nCoordinates: (3)lat(lat)float32-89.99 -89.98 ... 89.98 89.99long_name :latitudestandard_name :latitudeaxis :Yunits :degrees_northvalid_min :-90.0valid_max :90.0comment :geolocations inherited from the input data without correctionarray([-89.99, -89.98, -89.97, ...,  89.97,  89.98,  89.99], dtype=float32)lon(lon)float32-180.0 -180.0 ... 180.0 180.0long_name :longitudestandard_name :longitudeaxis :Xunits :degrees_eastvalid_min :-180.0valid_max :180.0comment :geolocations inherited from the input data without correctionarray([-179.99, -179.98, -179.97, ...,  179.98,  179.99,  180.  ],\n      dtype=float32)time(time)datetime64[ns]2021-09-01T09:00:00 ... 2021-09-...long_name :reference time of sst fieldstandard_name :timeaxis :Tcomment :Nominal time of analyzed fieldsarray(['2021-09-01T09:00:00.000000000', '2021-09-02T09:00:00.000000000',\n       '2021-09-03T09:00:00.000000000', '2021-09-04T09:00:00.000000000',\n       '2021-09-05T09:00:00.000000000', '2021-09-06T09:00:00.000000000',\n       '2021-09-07T09:00:00.000000000', '2021-09-08T09:00:00.000000000',\n       '2021-09-09T09:00:00.000000000', '2021-09-10T09:00:00.000000000',\n       '2021-09-11T09:00:00.000000000', '2021-09-12T09:00:00.000000000',\n       '2021-09-13T09:00:00.000000000', '2021-09-14T09:00:00.000000000',\n       '2021-09-15T09:00:00.000000000', '2021-09-16T09:00:00.000000000',\n       '2021-09-17T09:00:00.000000000', '2021-09-18T09:00:00.000000000',\n       '2021-09-19T09:00:00.000000000', '2021-09-20T09:00:00.000000000',\n       '2021-09-21T09:00:00.000000000', '2021-09-22T09:00:00.000000000',\n       '2021-09-23T09:00:00.000000000', '2021-09-24T09:00:00.000000000',\n       '2021-09-25T09:00:00.000000000', '2021-09-26T09:00:00.000000000',\n       '2021-09-27T09:00:00.000000000', '2021-09-28T09:00:00.000000000',\n       '2021-09-29T09:00:00.000000000', '2021-09-30T09:00:00.000000000'],\n      dtype='datetime64[ns]')Attributes: (7)long_name :analysed sea surface temperaturestandard_name :sea_surface_foundation_temperatureunits :kelvinvalid_min :-32767valid_max :32767comment :\\\"Final\\\" version using Multi-Resolution Variational Analysis (MRVA) method for interpolationsource :MODIS_T-JPL, MODIS_A-JPL, AMSR2-REMSS, AVHRRMTA_G-NAVO, AVHRRMTB_G-NAVO, iQUAM-NOAA/NESDIS, Ice_Conc-OSISAF\n\n\nCreate a dataset / variable that is only our area of interest and view its metadata\n\nsst = ds.analysed_sst.sel(lat=lats, lon=lons)\nsst\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray 'analysed_sst' (time: 30, lat: 801, lon: 1701)&gt;\ndask.array&lt;getitem, shape=(30, 801, 1701), dtype=float32, chunksize=(1, 601, 1536), chunktype=numpy.ndarray&gt;\nCoordinates:\n  * lat      (lat) float32 41.0 41.01 41.02 41.03 ... 48.97 48.98 48.99 49.0\n  * lon      (lon) float32 -93.0 -92.99 -92.98 -92.97 ... -76.02 -76.01 -76.0\n  * time     (time) datetime64[ns] 2021-09-01T09:00:00 ... 2021-09-30T09:00:00\nAttributes:\n    long_name:      analysed sea surface temperature\n    standard_name:  sea_surface_foundation_temperature\n    units:          kelvin\n    valid_min:      -32767\n    valid_max:      32767\n    comment:        \\\"Final\\\" version using Multi-Resolution Variational Anal...\n    source:         MODIS_T-JPL, MODIS_A-JPL, AMSR2-REMSS, AVHRRMTA_G-NAVO, A...xarray.DataArray'analysed_sst'time: 30lat: 801lon: 1701dask.array&lt;chunksize=(1, 200, 1536), meta=np.ndarray&gt;\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n155.93 MiB\n3.52 MiB\n\n\nShape\n(30, 801, 1701)\n(1, 601, 1536)\n\n\nCount\n19590 Tasks\n120 Chunks\n\n\nType\nfloat32\nnumpy.ndarray\n\n\n\n\n\n\n\nCoordinates: (3)lat(lat)float3241.0 41.01 41.02 ... 48.99 49.0long_name :latitudestandard_name :latitudeaxis :Yunits :degrees_northvalid_min :-90.0valid_max :90.0comment :geolocations inherited from the input data without correctionarray([41.  , 41.01, 41.02, ..., 48.98, 48.99, 49.  ], dtype=float32)lon(lon)float32-93.0 -92.99 ... -76.01 -76.0long_name :longitudestandard_name :longitudeaxis :Xunits :degrees_eastvalid_min :-180.0valid_max :180.0comment :geolocations inherited from the input data without correctionarray([-93.  , -92.99, -92.98, ..., -76.02, -76.01, -76.  ], dtype=float32)time(time)datetime64[ns]2021-09-01T09:00:00 ... 2021-09-...long_name :reference time of sst fieldstandard_name :timeaxis :Tcomment :Nominal time of analyzed fieldsarray(['2021-09-01T09:00:00.000000000', '2021-09-02T09:00:00.000000000',\n       '2021-09-03T09:00:00.000000000', '2021-09-04T09:00:00.000000000',\n       '2021-09-05T09:00:00.000000000', '2021-09-06T09:00:00.000000000',\n       '2021-09-07T09:00:00.000000000', '2021-09-08T09:00:00.000000000',\n       '2021-09-09T09:00:00.000000000', '2021-09-10T09:00:00.000000000',\n       '2021-09-11T09:00:00.000000000', '2021-09-12T09:00:00.000000000',\n       '2021-09-13T09:00:00.000000000', '2021-09-14T09:00:00.000000000',\n       '2021-09-15T09:00:00.000000000', '2021-09-16T09:00:00.000000000',\n       '2021-09-17T09:00:00.000000000', '2021-09-18T09:00:00.000000000',\n       '2021-09-19T09:00:00.000000000', '2021-09-20T09:00:00.000000000',\n       '2021-09-21T09:00:00.000000000', '2021-09-22T09:00:00.000000000',\n       '2021-09-23T09:00:00.000000000', '2021-09-24T09:00:00.000000000',\n       '2021-09-25T09:00:00.000000000', '2021-09-26T09:00:00.000000000',\n       '2021-09-27T09:00:00.000000000', '2021-09-28T09:00:00.000000000',\n       '2021-09-29T09:00:00.000000000', '2021-09-30T09:00:00.000000000'],\n      dtype='datetime64[ns]')Attributes: (7)long_name :analysed sea surface temperaturestandard_name :sea_surface_foundation_temperatureunits :kelvinvalid_min :-32767valid_max :32767comment :\\\"Final\\\" version using Multi-Resolution Variational Analysis (MRVA) method for interpolationsource :MODIS_T-JPL, MODIS_A-JPL, AMSR2-REMSS, AVHRRMTA_G-NAVO, AVHRRMTB_G-NAVO, iQUAM-NOAA/NESDIS, Ice_Conc-OSISAF\n\n\nXArray reads data lazily, i.e. only when our code actually needs it. Up to this point, we haven’t read any data values, only metadata. The next line will force XArray to read the portions of the source files containing our area of interest. Behind the scenes, the eosdis-zarr-store library is ensuring data is fetched as efficiently as possible.\nNote: This line isn’t strictly necessary, since XArray will automatically read the data we need the first time our code tries to use it, but calling this will make sure that we can read the data multiple times later on without re-fetching anything from the source files.\nThis line will take several seconds to complete, but since it is retrieving only about 50 MB of data from 22 GB of source files, several seconds constitutes a significant time, bandwidth, and disk space savings.\n\nsst.load();\n\nNow we can start looking at aggregations across the time dimension. In this case, plot the standard deviation of the temperature at each point to get a visual sense of how much temperatures fluctuate over the course of the month.\n\n# We expect a warning here, from finding the standard deviation of arrays that contain all N/A values.\n# numpy produces N/A for these points, though, which is exactly what we want.\nstdev_sst = sst.std('time')\nstdev_sst.name = 'stdev of analysed_sst [Kelvin]'\nstdev_sst.plot();\n\n/srv/conda/envs/notebook/lib/python3.9/site-packages/numpy/lib/nanfunctions.py:1670: RuntimeWarning: Degrees of freedom &lt;= 0 for slice.\n  var = nanvar(a, axis=axis, dtype=dtype, out=out, ddof=ddof,\n\n\n\n\n\n\nInteractive animation of a month of data\nThis section isn’t as important to fully understand. It shows us a way to get an interactive animation to see what we have retrieved so far\nDefine an animation function to plot the ith time step. We need to make sure each plot is using the same color scale, set by vmin and vmax so the animation is consistent\n\nsst_min = sst.min()\nsst_max = sst.max()\n\ndef show_time_step(i):\n    plt.clf()\n    res = sst[i].plot.imshow(vmin=sst_min, vmax=sst_max)\n    return (res,)\n\nRender each time slice once and show it as an HTML animation with interactive controls\n\n#anim = animation.FuncAnimation(plt.gcf(), func=show_time_step, frames=len(sst))\n#display(HTML(anim.to_jshtml()))\n#plt.close()\n\n\n\n\nSupplemental: What’s happening here?\nFor EOSDIS data in the cloud, we have begun producing a metadata sidecar file in a format called DMR++ that extracts all of the information about arrays, variables, and dimensions from data files, as well as the byte offsets in the NetCDF4 file where data can be found. This information is sufficient to let the Zarr library read data from our NetCDF4 files, but it’s in the wrong format. zarr-eosdis-store knows how to fetch the sidecar file and transform it into something the Zarr library understands. Passing it when reading Zarr using XArray or the Zarr library lets these libraries interact with EOSDIS data exactly as if they were Zarr stores in a way that’s more optimal for reading data in the cloud. Beyond this, the zarr-eosdis-store library makes some optimizations in the way it reads data to help make up for situations where the NetCDF4 file is not internally arranged well for cloud-based access patterns.",
    "crumbs": [
      "Data Tutorials",
      "Earth data basics",
      "Zarr Access for NetCDF4 files"
    ]
  },
  {
    "objectID": "notebooks-data/04_Combining_Data.html#loading-data",
    "href": "notebooks-data/04_Combining_Data.html#loading-data",
    "title": "Combine, clean, and export the data",
    "section": "Loading data",
    "text": "Loading data\nBegin by loading all the data into disk\n\nimport xarray as xr\nimport pandas as pd\nimport numpy as np\nfrom datetime import datetime, timedelta\nimport matplotlib.pyplot as plt\n\n\n# era5 = xr.combine_by_coords([xr.open_mfdataset('demonstrated data/era5/eastward_wind_at_10_metres/*.nc'),\n#                              xr.open_mfdataset('demonstrated data/era5/northward_wind_at_10_metres/*.nc')])\n\nera5 = xr.open_mfdataset('demonstrated data/era5/*/*.nc')\nsalinity = xr.open_dataset('demonstrated data/salinity_at_0_49m.nc')\nsst = xr.open_mfdataset('demonstrated data/earth_data/*/*.nc')['analysed_sst'] # we only have one collection in earth_data directory currently",
    "crumbs": [
      "Data Tutorials",
      "Indian Ocean Zarr",
      "Combine, clean, and export the data"
    ]
  },
  {
    "objectID": "notebooks-data/04_Combining_Data.html#process-era5-data-and-calculate-speeddirection",
    "href": "notebooks-data/04_Combining_Data.html#process-era5-data-and-calculate-speeddirection",
    "title": "Combine, clean, and export the data",
    "section": "Process ERA5 data and calculate speed/direction",
    "text": "Process ERA5 data and calculate speed/direction\n\n# adding calculated variables (direction and speed)\nera5 = era5.assign(speed = np.sqrt(era5.eastward_wind_at_10_metres**2 + era5.northward_wind_at_10_metres**2))\nera5 = era5.assign(direction = np.rad2deg(np.arctan2(era5.northward_wind_at_10_metres, era5.eastward_wind_at_10_metres)))\n\n# coarsen ()\nera5 = era5.coarsen(time0=24).mean(keep_attrs=True).compute()\n\n\nera5 = era5.rename({'time0': 'time', \n                    'eastward_wind_at_10_metres': 'u_wind', \n                    'northward_wind_at_10_metres': 'v_wind'})\n\n\n# fix time coordinate by resetting to 12AM\nera5 = era5.assign_coords(time=np.arange('2003-01-01', '2003-03-01', timedelta(days=1), dtype='datetime64[ns]')) # again, right-exclusive\n\n\nera5\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:    (time: 59, lat: 81, lon: 81)\nCoordinates:\n  * lon        (lon) float32 60.0 60.25 60.5 60.75 ... 79.25 79.5 79.75 80.0\n  * lat        (lat) float32 25.0 24.75 24.5 24.25 24.0 ... 5.75 5.5 5.25 5.0\n  * time       (time) datetime64[ns] 2003-01-01 2003-01-02 ... 2003-02-28\nData variables:\n    u_wind     (time, lat, lon) float32 3.128 2.865 2.555 ... -3.737 -4.479\n    v_wind     (time, lat, lon) float32 0.6016 0.6589 0.6068 ... -1.914 -2.474\n    speed      (time, lat, lon) float32 3.945 3.645 3.368 ... 3.216 4.227 5.153\n    direction  (time, lat, lon) float32 22.31 17.58 13.01 ... -153.4 -151.6\nAttributes:\n    source:       Reanalysis\n    institution:  ECMWF\n    tilte:        ERA5 forecastsxarray.DatasetDimensions:time: 59lat: 81lon: 81Coordinates: (3)lon(lon)float3260.0 60.25 60.5 ... 79.5 79.75 80.0standard_name :longitudelong_name :longitudeunits :degrees_eastarray([60.  , 60.25, 60.5 , 60.75, 61.  , 61.25, 61.5 , 61.75, 62.  , 62.25,\n       62.5 , 62.75, 63.  , 63.25, 63.5 , 63.75, 64.  , 64.25, 64.5 , 64.75,\n       65.  , 65.25, 65.5 , 65.75, 66.  , 66.25, 66.5 , 66.75, 67.  , 67.25,\n       67.5 , 67.75, 68.  , 68.25, 68.5 , 68.75, 69.  , 69.25, 69.5 , 69.75,\n       70.  , 70.25, 70.5 , 70.75, 71.  , 71.25, 71.5 , 71.75, 72.  , 72.25,\n       72.5 , 72.75, 73.  , 73.25, 73.5 , 73.75, 74.  , 74.25, 74.5 , 74.75,\n       75.  , 75.25, 75.5 , 75.75, 76.  , 76.25, 76.5 , 76.75, 77.  , 77.25,\n       77.5 , 77.75, 78.  , 78.25, 78.5 , 78.75, 79.  , 79.25, 79.5 , 79.75,\n       80.  ], dtype=float32)lat(lat)float3225.0 24.75 24.5 ... 5.5 5.25 5.0standard_name :latitudelong_name :latitudeunits :degrees_northarray([25.  , 24.75, 24.5 , 24.25, 24.  , 23.75, 23.5 , 23.25, 23.  , 22.75,\n       22.5 , 22.25, 22.  , 21.75, 21.5 , 21.25, 21.  , 20.75, 20.5 , 20.25,\n       20.  , 19.75, 19.5 , 19.25, 19.  , 18.75, 18.5 , 18.25, 18.  , 17.75,\n       17.5 , 17.25, 17.  , 16.75, 16.5 , 16.25, 16.  , 15.75, 15.5 , 15.25,\n       15.  , 14.75, 14.5 , 14.25, 14.  , 13.75, 13.5 , 13.25, 13.  , 12.75,\n       12.5 , 12.25, 12.  , 11.75, 11.5 , 11.25, 11.  , 10.75, 10.5 , 10.25,\n       10.  ,  9.75,  9.5 ,  9.25,  9.  ,  8.75,  8.5 ,  8.25,  8.  ,  7.75,\n        7.5 ,  7.25,  7.  ,  6.75,  6.5 ,  6.25,  6.  ,  5.75,  5.5 ,  5.25,\n        5.  ], dtype=float32)time(time)datetime64[ns]2003-01-01 ... 2003-02-28array(['2003-01-01T00:00:00.000000000', '2003-01-02T00:00:00.000000000',\n       '2003-01-03T00:00:00.000000000', '2003-01-04T00:00:00.000000000',\n       '2003-01-05T00:00:00.000000000', '2003-01-06T00:00:00.000000000',\n       '2003-01-07T00:00:00.000000000', '2003-01-08T00:00:00.000000000',\n       '2003-01-09T00:00:00.000000000', '2003-01-10T00:00:00.000000000',\n       '2003-01-11T00:00:00.000000000', '2003-01-12T00:00:00.000000000',\n       '2003-01-13T00:00:00.000000000', '2003-01-14T00:00:00.000000000',\n       '2003-01-15T00:00:00.000000000', '2003-01-16T00:00:00.000000000',\n       '2003-01-17T00:00:00.000000000', '2003-01-18T00:00:00.000000000',\n       '2003-01-19T00:00:00.000000000', '2003-01-20T00:00:00.000000000',\n       '2003-01-21T00:00:00.000000000', '2003-01-22T00:00:00.000000000',\n       '2003-01-23T00:00:00.000000000', '2003-01-24T00:00:00.000000000',\n       '2003-01-25T00:00:00.000000000', '2003-01-26T00:00:00.000000000',\n       '2003-01-27T00:00:00.000000000', '2003-01-28T00:00:00.000000000',\n       '2003-01-29T00:00:00.000000000', '2003-01-30T00:00:00.000000000',\n       '2003-01-31T00:00:00.000000000', '2003-02-01T00:00:00.000000000',\n       '2003-02-02T00:00:00.000000000', '2003-02-03T00:00:00.000000000',\n       '2003-02-04T00:00:00.000000000', '2003-02-05T00:00:00.000000000',\n       '2003-02-06T00:00:00.000000000', '2003-02-07T00:00:00.000000000',\n       '2003-02-08T00:00:00.000000000', '2003-02-09T00:00:00.000000000',\n       '2003-02-10T00:00:00.000000000', '2003-02-11T00:00:00.000000000',\n       '2003-02-12T00:00:00.000000000', '2003-02-13T00:00:00.000000000',\n       '2003-02-14T00:00:00.000000000', '2003-02-15T00:00:00.000000000',\n       '2003-02-16T00:00:00.000000000', '2003-02-17T00:00:00.000000000',\n       '2003-02-18T00:00:00.000000000', '2003-02-19T00:00:00.000000000',\n       '2003-02-20T00:00:00.000000000', '2003-02-21T00:00:00.000000000',\n       '2003-02-22T00:00:00.000000000', '2003-02-23T00:00:00.000000000',\n       '2003-02-24T00:00:00.000000000', '2003-02-25T00:00:00.000000000',\n       '2003-02-26T00:00:00.000000000', '2003-02-27T00:00:00.000000000',\n       '2003-02-28T00:00:00.000000000'], dtype='datetime64[ns]')Data variables: (4)u_wind(time, lat, lon)float323.128 2.865 2.555 ... -3.737 -4.479standard_name :eastward_windunits :m s**-1long_name :10 metre U wind componentnameECMWF :10 metre U wind componentshortNameECMWF :10unameCDM :10_metre_U_wind_component_surfaceproduct_type :analysisarray([[[ 3.1276042 ,  2.8645833 ,  2.5546875 , ...,  0.8776042 ,\n          0.9036458 ,  0.8072917 ],\n        [ 3.1223958 ,  2.8854167 ,  2.5703125 , ...,  0.6015625 ,\n          0.6380208 ,  0.6848958 ],\n        [ 2.5026042 ,  2.2864583 ,  2.0598958 , ...,  0.3828125 ,\n          0.390625  ,  0.45833334],\n        ...,\n        [-2.7916667 , -2.8932292 , -3.0182292 , ...,  0.04947917,\n          0.21614583,  0.23177083],\n        [-2.6380208 , -2.7317708 , -2.8567708 , ..., -0.02604167,\n          0.06510416,  0.05729167],\n        [-2.53125   , -2.6354167 , -2.7682292 , ..., -0.19270833,\n         -0.09114584, -0.07291666]],\n\n       [[-0.41666666, -0.7369792 , -1.0208334 , ..., -1.4401041 ,\n         -1.5677084 , -1.5677084 ],\n        [ 0.12239584, -0.13541667, -0.39583334, ..., -1.4348959 ,\n         -1.453125  , -1.3541666 ],\n        [ 0.6953125 ,  0.5234375 ,  0.44791666, ..., -1.3515625 ,\n         -1.2317709 , -1.140625  ],\n...\n        [-3.0833333 , -3.0286458 , -2.9739583 , ..., -0.8567708 ,\n         -1.21875   , -1.7447916 ],\n        [-3.0364583 , -2.9973958 , -2.9401042 , ..., -0.9322917 ,\n         -1.3854166 , -1.9401041 ],\n        [-3.0026042 , -2.9739583 , -2.9322917 , ..., -1.0442709 ,\n         -1.4401041 , -1.8255209 ]],\n\n       [[ 8.1119795 ,  8.020833  ,  7.950521  , ..., -1.0338541 ,\n         -1.0494791 , -1.0703125 ],\n        [ 7.78125   ,  7.7890625 ,  7.734375  , ..., -0.7942708 ,\n         -0.7135417 , -0.6015625 ],\n        [ 7.205729  ,  7.294271  ,  7.325521  , ..., -0.5026042 ,\n         -0.38020834, -0.29166666],\n        ...,\n        [-1.4270834 , -1.3619791 , -1.3125    , ..., -1.6119791 ,\n         -2.5520833 , -3.8203125 ],\n        [-1.2604166 , -1.2005209 , -1.1328125 , ..., -2.3958333 ,\n         -3.390625  , -4.5390625 ],\n        [-1.0625    , -1.0208334 , -0.9739583 , ..., -2.8697917 ,\n         -3.7369792 , -4.4791665 ]]], dtype=float32)v_wind(time, lat, lon)float320.6016 0.6589 ... -1.914 -2.474standard_name :northward_windunits :m s**-1long_name :10 metre V wind componentnameECMWF :10 metre V wind componentshortNameECMWF :10vnameCDM :10_metre_V_wind_component_surfaceproduct_type :analysisarray([[[ 6.0156250e-01,  6.5885419e-01,  6.0677081e-01, ...,\n         -1.3671875e+00, -1.1848959e+00, -8.8020831e-01],\n        [ 1.0729166e+00,  1.1536459e+00,  1.0807291e+00, ...,\n         -1.4791666e+00, -1.3463541e+00, -1.1796875e+00],\n        [ 1.1510416e+00,  1.2838541e+00,  1.3229166e+00, ...,\n         -1.5963541e+00, -1.4869791e+00, -1.3489584e+00],\n        ...,\n        [-3.6770833e+00, -3.8229167e+00, -3.9713542e+00, ...,\n         -2.3437500e+00, -1.3020834e+00, -3.7760416e-01],\n        [-3.7083333e+00, -3.8255208e+00, -3.9088542e+00, ...,\n         -2.3593750e+00, -1.5390625e+00, -7.4739581e-01],\n        [-3.7395833e+00, -3.7526042e+00, -3.7812500e+00, ...,\n         -2.4817708e+00, -1.6953125e+00, -1.1484375e+00]],\n\n       [[-1.5208334e+00, -1.7005209e+00, -1.9192709e+00, ...,\n         -3.9062500e-01, -4.2708334e-01, -4.9218750e-01],\n        [-1.9010416e+00, -1.9583334e+00, -2.1458333e+00, ...,\n         -5.0260419e-01, -5.8593750e-01, -5.0260419e-01],\n        [-2.2838542e+00, -2.2473958e+00, -2.2109375e+00, ...,\n         -4.9479166e-01, -6.6145831e-01, -6.0937500e-01],\n...\n        [-4.0729165e+00, -4.1276040e+00, -4.1770835e+00, ...,\n         -2.1171875e+00, -1.6562500e+00, -1.3151041e+00],\n        [-4.0885415e+00, -4.1484375e+00, -4.2005210e+00, ...,\n         -2.4244792e+00, -2.1119792e+00, -1.8515625e+00],\n        [-4.0625000e+00, -4.1197915e+00, -4.1614585e+00, ...,\n         -2.7031250e+00, -2.4166667e+00, -2.2708333e+00]],\n\n       [[-1.9791667e-01,  5.2083335e-03,  1.5625000e-01, ...,\n         -1.2760417e-01, -1.6145833e-01, -1.6927083e-01],\n        [-7.9687500e-01, -5.9895831e-01, -4.3750000e-01, ...,\n          5.4687500e-02,  4.6875000e-02,  1.5364583e-01],\n        [-1.2994791e+00, -1.0937500e+00, -9.4010419e-01, ...,\n          2.2395833e-01,  2.9166666e-01,  3.8020834e-01],\n        ...,\n        [-3.0625000e+00, -3.0781250e+00, -3.1197917e+00, ...,\n          5.4687500e-01,  1.2500000e-01, -8.0729169e-01],\n        [-3.1614583e+00, -3.2005208e+00, -3.2291667e+00, ...,\n         -4.1666666e-01, -1.0598959e+00, -1.8958334e+00],\n        [-3.2526042e+00, -3.3255208e+00, -3.3750000e+00, ...,\n         -1.3333334e+00, -1.9140625e+00, -2.4739583e+00]]], dtype=float32)speed(time, lat, lon)float323.945 3.645 3.368 ... 4.227 5.153array([[[3.9451437, 3.6454449, 3.36847  , ..., 1.9201735, 1.8865218,\n         1.7468839],\n        [4.1419544, 3.8504055, 3.444007 , ..., 1.9789158, 1.9153827,\n         1.8310242],\n        [3.6950111, 3.4435928, 3.1019478, ..., 1.9867468, 1.9142274,\n         1.8317447],\n        ...,\n        [4.7469373, 4.912411 , 5.092304 , ..., 2.5135314, 1.6478343,\n         1.3388939],\n        [4.676735 , 4.8191776, 4.95795  , ..., 2.5241547, 1.7888355,\n         1.2424096],\n        [4.636933 , 4.7195234, 4.826424 , ..., 2.6338756, 1.8901653,\n         1.4170161]],\n\n       [[2.3318148, 2.4910347, 2.7374954, ..., 1.7411982, 1.8597933,\n         1.8728681],\n        [2.414438 , 2.5525272, 2.7947886, ..., 1.7888421, 1.8435212,\n         1.7328191],\n        [2.7723866, 2.8588107, 2.8829317, ..., 1.7411242, 1.7196132,\n         1.6104554],\n...\n        [5.146253 , 5.1557384, 5.1632495, ..., 2.8367107, 2.591439 ,\n         2.534239 ],\n        [5.1336794, 5.1560197, 5.166705 , ..., 3.0493386, 2.972432 ,\n         3.014616 ],\n        [5.0962915, 5.1267576, 5.1389093, ..., 3.263656 , 3.196616 ,\n         3.23878  ]],\n\n       [[8.189649 , 8.106084 , 8.037755 , ..., 2.1850507, 2.2752473,\n         2.2316103],\n        [7.892883 , 7.890354 , 7.823316 , ..., 2.3158002, 2.3716338,\n         2.317237 ],\n        [7.391702 , 7.4489727, 7.4578147, ..., 2.337489 , 2.231067 ,\n         2.291389 ],\n        ...,\n        [3.4753053, 3.467406 , 3.4899578, ..., 1.9244485, 2.6942132,\n         4.00572  ],\n        [3.5153275, 3.533966 , 3.542756 , ..., 2.549701 , 3.6089706,\n         4.9639993],\n        [3.5520408, 3.6114044, 3.6468   , ..., 3.2160883, 4.226849 ,\n         5.1525497]]], dtype=float32)direction(time, lat, lon)float3222.31 17.58 13.01 ... -153.4 -151.6standard_name :northward_windunits :m s**-1long_name :10 metre V wind componentnameECMWF :10 metre V wind componentshortNameECMWF :10vnameCDM :10_metre_V_wind_component_surfaceproduct_type :analysisarray([[[  22.31256  ,   17.577126 ,   13.005119 , ...,  -67.38259  ,\n          -47.755325 ,  -33.74233  ],\n        [  30.220772 ,   29.43544  ,   26.357203 , ...,  -78.10914  ,\n          -64.685646 ,  -49.11764  ],\n        [  35.783054 ,   37.048702 ,   35.60695  , ...,  -85.95185  ,\n          -86.35613  ,  -70.15734  ],\n        ...,\n        [-126.93241  , -126.620476 , -126.65524  , ...,  -89.24673  ,\n          -80.60198  ,   -4.201843 ],\n        [-125.02897  , -124.928856 , -125.43902  , ...,  -90.54617  ,\n          -84.9731   ,  -69.18275  ],\n        [-123.4584   , -124.29117  , -125.278015 , ...,  -93.996056 ,\n          -90.138794 ,  -88.29269  ]],\n\n       [[ -72.070206 ,  -85.1071   ,  -93.38763  , ...,  -58.74728  ,\n          -60.06917  ,  -58.698284 ],\n        [ -80.372795 ,  -90.8068   ,  -96.67983  , ...,  -58.435246 ,\n          -56.67389  ,  -58.751236 ],\n        [ -80.680115 ,  -86.12191  ,  -88.40796  , ...,  -59.58118  ,\n          -53.925976 ,  -70.68571  ],\n...\n        [-127.28055  , -126.49218  , -125.74938  , ...,  -71.24183  ,\n          -79.70399  , -133.6834   ],\n        [-126.68684  , -125.9416   , -125.15563  , ..., -114.46243  ,\n         -107.83289  , -131.2433   ],\n        [-126.467865 , -125.800575 , -125.19381  , ..., -113.44105  ,\n         -120.908356 , -126.25626  ]],\n\n       [[  -0.9108308,    0.405311 ,    1.362003 , ...,  -42.883907 ,\n          -38.677364 ,  -36.70583  ],\n        [  -5.2671247,   -3.8980722,   -2.9317954, ...,  -26.818964 ,\n          -36.38267  ,   -2.3517277],\n        [  -9.45855  ,   -7.810347 ,   -6.7994595, ...,    9.280067 ,\n            2.028537 ,   22.812065 ],\n        ...,\n        [-115.06766  , -113.99908  , -113.05724  , ...,   26.856642 ,\n           10.176036 ,  -94.912285 ],\n        [-111.756325 , -110.610634 , -109.46108  , ...,  -81.22135  ,\n         -133.58519  , -158.10306  ],\n        [-108.30612  , -107.21555  , -106.26769  , ..., -140.94438  ,\n         -153.4189   , -151.60954  ]]], dtype=float32)Indexes: (3)lonPandasIndexPandasIndex(Index([ 60.0, 60.25,  60.5, 60.75,  61.0, 61.25,  61.5, 61.75,  62.0, 62.25,\n        62.5, 62.75,  63.0, 63.25,  63.5, 63.75,  64.0, 64.25,  64.5, 64.75,\n        65.0, 65.25,  65.5, 65.75,  66.0, 66.25,  66.5, 66.75,  67.0, 67.25,\n        67.5, 67.75,  68.0, 68.25,  68.5, 68.75,  69.0, 69.25,  69.5, 69.75,\n        70.0, 70.25,  70.5, 70.75,  71.0, 71.25,  71.5, 71.75,  72.0, 72.25,\n        72.5, 72.75,  73.0, 73.25,  73.5, 73.75,  74.0, 74.25,  74.5, 74.75,\n        75.0, 75.25,  75.5, 75.75,  76.0, 76.25,  76.5, 76.75,  77.0, 77.25,\n        77.5, 77.75,  78.0, 78.25,  78.5, 78.75,  79.0, 79.25,  79.5, 79.75,\n        80.0],\n      dtype='float32', name='lon'))latPandasIndexPandasIndex(Index([ 25.0, 24.75,  24.5, 24.25,  24.0, 23.75,  23.5, 23.25,  23.0, 22.75,\n        22.5, 22.25,  22.0, 21.75,  21.5, 21.25,  21.0, 20.75,  20.5, 20.25,\n        20.0, 19.75,  19.5, 19.25,  19.0, 18.75,  18.5, 18.25,  18.0, 17.75,\n        17.5, 17.25,  17.0, 16.75,  16.5, 16.25,  16.0, 15.75,  15.5, 15.25,\n        15.0, 14.75,  14.5, 14.25,  14.0, 13.75,  13.5, 13.25,  13.0, 12.75,\n        12.5, 12.25,  12.0, 11.75,  11.5, 11.25,  11.0, 10.75,  10.5, 10.25,\n        10.0,  9.75,   9.5,  9.25,   9.0,  8.75,   8.5,  8.25,   8.0,  7.75,\n         7.5,  7.25,   7.0,  6.75,   6.5,  6.25,   6.0,  5.75,   5.5,  5.25,\n         5.0],\n      dtype='float32', name='lat'))timePandasIndexPandasIndex(DatetimeIndex(['2003-01-01', '2003-01-02', '2003-01-03', '2003-01-04',\n               '2003-01-05', '2003-01-06', '2003-01-07', '2003-01-08',\n               '2003-01-09', '2003-01-10', '2003-01-11', '2003-01-12',\n               '2003-01-13', '2003-01-14', '2003-01-15', '2003-01-16',\n               '2003-01-17', '2003-01-18', '2003-01-19', '2003-01-20',\n               '2003-01-21', '2003-01-22', '2003-01-23', '2003-01-24',\n               '2003-01-25', '2003-01-26', '2003-01-27', '2003-01-28',\n               '2003-01-29', '2003-01-30', '2003-01-31', '2003-02-01',\n               '2003-02-02', '2003-02-03', '2003-02-04', '2003-02-05',\n               '2003-02-06', '2003-02-07', '2003-02-08', '2003-02-09',\n               '2003-02-10', '2003-02-11', '2003-02-12', '2003-02-13',\n               '2003-02-14', '2003-02-15', '2003-02-16', '2003-02-17',\n               '2003-02-18', '2003-02-19', '2003-02-20', '2003-02-21',\n               '2003-02-22', '2003-02-23', '2003-02-24', '2003-02-25',\n               '2003-02-26', '2003-02-27', '2003-02-28'],\n              dtype='datetime64[ns]', name='time', freq=None))Attributes: (3)source :Reanalysisinstitution :ECMWFtilte :ERA5 forecasts",
    "crumbs": [
      "Data Tutorials",
      "Indian Ocean Zarr",
      "Combine, clean, and export the data"
    ]
  },
  {
    "objectID": "notebooks-data/04_Combining_Data.html#process-mur-data",
    "href": "notebooks-data/04_Combining_Data.html#process-mur-data",
    "title": "Combine, clean, and export the data",
    "section": "Process MUR data",
    "text": "Process MUR data\n\nsst\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray 'analysed_sst' (time: 59, lat: 80, lon: 80)&gt;\ndask.array&lt;concatenate, shape=(59, 80, 80), dtype=float32, chunksize=(31, 80, 80), chunktype=numpy.ndarray&gt;\nCoordinates:\n  * time     (time) datetime64[ns] 2003-01-01T09:00:00 ... 2003-02-28T09:00:00\n  * lat      (lat) float32 5.125 5.375 5.625 5.875 ... 24.12 24.38 24.62 24.88\n  * lon      (lon) float32 60.12 60.38 60.62 60.88 ... 79.12 79.38 79.62 79.88\nAttributes:\n    long_name:              analysed sea surface temperature\n    standard_name:          sea_surface_foundation_temperature\n    coverage_content_type:  physicalMeasurement\n    units:                  kelvin\n    valid_min:              -32767\n    valid_max:              32767\n    comment:                \"Final\" version using Multi-Resolution Variationa...\n    source:                 MODIS_T-JPL, MODIS_A-JPL, AMSRE-REMSS, AVHRR17_G-...xarray.DataArray'analysed_sst'time: 59lat: 80lon: 80dask.array&lt;chunksize=(31, 80, 80), meta=np.ndarray&gt;\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n1.44 MiB\n775.00 kiB\n\n\nShape\n(59, 80, 80)\n(31, 80, 80)\n\n\nDask graph\n2 chunks in 5 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\nCoordinates: (3)time(time)datetime64[ns]2003-01-01T09:00:00 ... 2003-02-...long_name :reference time of sst fieldstandard_name :timecoverage_content_type :coordinateaxis :Tcomment :Nominal time of analyzed fieldsarray(['2003-01-01T09:00:00.000000000', '2003-01-02T09:00:00.000000000',\n       '2003-01-03T09:00:00.000000000', '2003-01-04T09:00:00.000000000',\n       '2003-01-05T09:00:00.000000000', '2003-01-06T09:00:00.000000000',\n       '2003-01-07T09:00:00.000000000', '2003-01-08T09:00:00.000000000',\n       '2003-01-09T09:00:00.000000000', '2003-01-10T09:00:00.000000000',\n       '2003-01-11T09:00:00.000000000', '2003-01-12T09:00:00.000000000',\n       '2003-01-13T09:00:00.000000000', '2003-01-14T09:00:00.000000000',\n       '2003-01-15T09:00:00.000000000', '2003-01-16T09:00:00.000000000',\n       '2003-01-17T09:00:00.000000000', '2003-01-18T09:00:00.000000000',\n       '2003-01-19T09:00:00.000000000', '2003-01-20T09:00:00.000000000',\n       '2003-01-21T09:00:00.000000000', '2003-01-22T09:00:00.000000000',\n       '2003-01-23T09:00:00.000000000', '2003-01-24T09:00:00.000000000',\n       '2003-01-25T09:00:00.000000000', '2003-01-26T09:00:00.000000000',\n       '2003-01-27T09:00:00.000000000', '2003-01-28T09:00:00.000000000',\n       '2003-01-29T09:00:00.000000000', '2003-01-30T09:00:00.000000000',\n       '2003-01-31T09:00:00.000000000', '2003-02-01T09:00:00.000000000',\n       '2003-02-02T09:00:00.000000000', '2003-02-03T09:00:00.000000000',\n       '2003-02-04T09:00:00.000000000', '2003-02-05T09:00:00.000000000',\n       '2003-02-06T09:00:00.000000000', '2003-02-07T09:00:00.000000000',\n       '2003-02-08T09:00:00.000000000', '2003-02-09T09:00:00.000000000',\n       '2003-02-10T09:00:00.000000000', '2003-02-11T09:00:00.000000000',\n       '2003-02-12T09:00:00.000000000', '2003-02-13T09:00:00.000000000',\n       '2003-02-14T09:00:00.000000000', '2003-02-15T09:00:00.000000000',\n       '2003-02-16T09:00:00.000000000', '2003-02-17T09:00:00.000000000',\n       '2003-02-18T09:00:00.000000000', '2003-02-19T09:00:00.000000000',\n       '2003-02-20T09:00:00.000000000', '2003-02-21T09:00:00.000000000',\n       '2003-02-22T09:00:00.000000000', '2003-02-23T09:00:00.000000000',\n       '2003-02-24T09:00:00.000000000', '2003-02-25T09:00:00.000000000',\n       '2003-02-26T09:00:00.000000000', '2003-02-27T09:00:00.000000000',\n       '2003-02-28T09:00:00.000000000'], dtype='datetime64[ns]')lat(lat)float325.125 5.375 5.625 ... 24.62 24.88long_name :latitudestandard_name :latitudecoverage_content_type :coordinateaxis :Yunits :degrees_northvalid_min :-90.0valid_max :90.0comment :geolocations inherited from the input data without correctionarray([ 5.125,  5.375,  5.625,  5.875,  6.125,  6.375,  6.625,  6.875,  7.125,\n        7.375,  7.625,  7.875,  8.125,  8.375,  8.625,  8.875,  9.125,  9.375,\n        9.625,  9.875, 10.125, 10.375, 10.625, 10.875, 11.125, 11.375, 11.625,\n       11.875, 12.125, 12.375, 12.625, 12.875, 13.125, 13.375, 13.625, 13.875,\n       14.125, 14.375, 14.625, 14.875, 15.125, 15.375, 15.625, 15.875, 16.125,\n       16.375, 16.625, 16.875, 17.125, 17.375, 17.625, 17.875, 18.125, 18.375,\n       18.625, 18.875, 19.125, 19.375, 19.625, 19.875, 20.125, 20.375, 20.625,\n       20.875, 21.125, 21.375, 21.625, 21.875, 22.125, 22.375, 22.625, 22.875,\n       23.125, 23.375, 23.625, 23.875, 24.125, 24.375, 24.625, 24.875],\n      dtype=float32)lon(lon)float3260.12 60.38 60.62 ... 79.62 79.88long_name :longitudestandard_name :longitudecoverage_content_type :coordinateaxis :Xunits :degrees_eastvalid_min :-180.0valid_max :180.0comment :geolocations inherited from the input data without correctionarray([60.125, 60.375, 60.625, 60.875, 61.125, 61.375, 61.625, 61.875, 62.125,\n       62.375, 62.625, 62.875, 63.125, 63.375, 63.625, 63.875, 64.125, 64.375,\n       64.625, 64.875, 65.125, 65.375, 65.625, 65.875, 66.125, 66.375, 66.625,\n       66.875, 67.125, 67.375, 67.625, 67.875, 68.125, 68.375, 68.625, 68.875,\n       69.125, 69.375, 69.625, 69.875, 70.125, 70.375, 70.625, 70.875, 71.125,\n       71.375, 71.625, 71.875, 72.125, 72.375, 72.625, 72.875, 73.125, 73.375,\n       73.625, 73.875, 74.125, 74.375, 74.625, 74.875, 75.125, 75.375, 75.625,\n       75.875, 76.125, 76.375, 76.625, 76.875, 77.125, 77.375, 77.625, 77.875,\n       78.125, 78.375, 78.625, 78.875, 79.125, 79.375, 79.625, 79.875],\n      dtype=float32)Indexes: (3)timePandasIndexPandasIndex(DatetimeIndex(['2003-01-01 09:00:00', '2003-01-02 09:00:00',\n               '2003-01-03 09:00:00', '2003-01-04 09:00:00',\n               '2003-01-05 09:00:00', '2003-01-06 09:00:00',\n               '2003-01-07 09:00:00', '2003-01-08 09:00:00',\n               '2003-01-09 09:00:00', '2003-01-10 09:00:00',\n               '2003-01-11 09:00:00', '2003-01-12 09:00:00',\n               '2003-01-13 09:00:00', '2003-01-14 09:00:00',\n               '2003-01-15 09:00:00', '2003-01-16 09:00:00',\n               '2003-01-17 09:00:00', '2003-01-18 09:00:00',\n               '2003-01-19 09:00:00', '2003-01-20 09:00:00',\n               '2003-01-21 09:00:00', '2003-01-22 09:00:00',\n               '2003-01-23 09:00:00', '2003-01-24 09:00:00',\n               '2003-01-25 09:00:00', '2003-01-26 09:00:00',\n               '2003-01-27 09:00:00', '2003-01-28 09:00:00',\n               '2003-01-29 09:00:00', '2003-01-30 09:00:00',\n               '2003-01-31 09:00:00', '2003-02-01 09:00:00',\n               '2003-02-02 09:00:00', '2003-02-03 09:00:00',\n               '2003-02-04 09:00:00', '2003-02-05 09:00:00',\n               '2003-02-06 09:00:00', '2003-02-07 09:00:00',\n               '2003-02-08 09:00:00', '2003-02-09 09:00:00',\n               '2003-02-10 09:00:00', '2003-02-11 09:00:00',\n               '2003-02-12 09:00:00', '2003-02-13 09:00:00',\n               '2003-02-14 09:00:00', '2003-02-15 09:00:00',\n               '2003-02-16 09:00:00', '2003-02-17 09:00:00',\n               '2003-02-18 09:00:00', '2003-02-19 09:00:00',\n               '2003-02-20 09:00:00', '2003-02-21 09:00:00',\n               '2003-02-22 09:00:00', '2003-02-23 09:00:00',\n               '2003-02-24 09:00:00', '2003-02-25 09:00:00',\n               '2003-02-26 09:00:00', '2003-02-27 09:00:00',\n               '2003-02-28 09:00:00'],\n              dtype='datetime64[ns]', name='time', freq=None))latPandasIndexPandasIndex(Index([ 5.125,  5.375,  5.625,  5.875,  6.125,  6.375,  6.625,  6.875,  7.125,\n        7.375,  7.625,  7.875,  8.125,  8.375,  8.625,  8.875,  9.125,  9.375,\n        9.625,  9.875, 10.125, 10.375, 10.625, 10.875, 11.125, 11.375, 11.625,\n       11.875, 12.125, 12.375, 12.625, 12.875, 13.125, 13.375, 13.625, 13.875,\n       14.125, 14.375, 14.625, 14.875, 15.125, 15.375, 15.625, 15.875, 16.125,\n       16.375, 16.625, 16.875, 17.125, 17.375, 17.625, 17.875, 18.125, 18.375,\n       18.625, 18.875, 19.125, 19.375, 19.625, 19.875, 20.125, 20.375, 20.625,\n       20.875, 21.125, 21.375, 21.625, 21.875, 22.125, 22.375, 22.625, 22.875,\n       23.125, 23.375, 23.625, 23.875, 24.125, 24.375, 24.625, 24.875],\n      dtype='float32', name='lat'))lonPandasIndexPandasIndex(Index([60.125, 60.375, 60.625, 60.875, 61.125, 61.375, 61.625, 61.875, 62.125,\n       62.375, 62.625, 62.875, 63.125, 63.375, 63.625, 63.875, 64.125, 64.375,\n       64.625, 64.875, 65.125, 65.375, 65.625, 65.875, 66.125, 66.375, 66.625,\n       66.875, 67.125, 67.375, 67.625, 67.875, 68.125, 68.375, 68.625, 68.875,\n       69.125, 69.375, 69.625, 69.875, 70.125, 70.375, 70.625, 70.875, 71.125,\n       71.375, 71.625, 71.875, 72.125, 72.375, 72.625, 72.875, 73.125, 73.375,\n       73.625, 73.875, 74.125, 74.375, 74.625, 74.875, 75.125, 75.375, 75.625,\n       75.875, 76.125, 76.375, 76.625, 76.875, 77.125, 77.375, 77.625, 77.875,\n       78.125, 78.375, 78.625, 78.875, 79.125, 79.375, 79.625, 79.875],\n      dtype='float32', name='lon'))Attributes: (8)long_name :analysed sea surface temperaturestandard_name :sea_surface_foundation_temperaturecoverage_content_type :physicalMeasurementunits :kelvinvalid_min :-32767valid_max :32767comment :\"Final\" version using Multi-Resolution Variational Analysis (MRVA) method for interpolationsource :MODIS_T-JPL, MODIS_A-JPL, AMSRE-REMSS, AVHRR17_G-ACSPO, iQUAM-NOAA/NESDIS, Ice_Conc-OSISAF\n\n\n\nInterpolation\nYou can notice that the MUR sea surface temperature data, while having the same 0.25x0.25 deg spatial resolution as the ERA5 data, has a different point offset and we cannot combine them together without some interpolation. Xarray’s interp_like() function is designed to help us achieve this feat easily!\nDisclaimer: Interpolation may remove important outlier data (as you can see in the map below). Make sure to choose interpolation type wisely.\nfix time\nSince we don’t want to interpolate time (as time is already averaged over the day), let’s fix it to center at 12AM\n\nsst = sst.assign_coords(time=np.arange('2003-01-01', '2003-03-01', timedelta(days=1), dtype='datetime64[ns]'))\n\n\nsst_interp = sst.interp_like(era5)\n\nDISCLAIMER: make sure that the three coordinate names are identical on both datasets for xarray to infer correctly\n\n# verify before and after interpolation\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 8)) # 2 columns & 1 row, width, height \nsst.isel(time=0).plot.imshow(ax=ax1)\nax1.set_title('before interpolation')\nax1.set_aspect('equal')\n\nsst_interp.isel(time=0).plot.imshow(ax=ax2)\nax2.set_title('after interpolation')\nax2.set_aspect('equal')",
    "crumbs": [
      "Data Tutorials",
      "Indian Ocean Zarr",
      "Combine, clean, and export the data"
    ]
  },
  {
    "objectID": "notebooks-data/04_Combining_Data.html#process-copernicus-salinity-data",
    "href": "notebooks-data/04_Combining_Data.html#process-copernicus-salinity-data",
    "title": "Combine, clean, and export the data",
    "section": "Process Copernicus Salinity data",
    "text": "Process Copernicus Salinity data\n\nsalinity # also need interpolation\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:    (longitude: 241, latitude: 241, time: 59)\nCoordinates:\n  * longitude  (longitude) float32 60.0 60.08 60.17 60.25 ... 79.83 79.92 80.0\n  * latitude   (latitude) float32 5.0 5.083 5.167 5.25 ... 24.83 24.92 25.0\n  * time       (time) datetime64[ns] 2003-01-01T12:00:00 ... 2003-02-28T12:00:00\nData variables:\n    so         (time, latitude, longitude) float32 ...xarray.DatasetDimensions:longitude: 241latitude: 241time: 59Coordinates: (3)longitude(longitude)float3260.0 60.08 60.17 ... 79.92 80.0valid_min :-180.0valid_max :179.91667step :0.08332825units :degrees_eastunit_long :Degrees Eastlong_name :Longitudestandard_name :longitudeaxis :X_ChunkSizes :4320array([60.      , 60.083332, 60.166668, ..., 79.833336, 79.916664, 80.      ],\n      dtype=float32)latitude(latitude)float325.0 5.083 5.167 ... 24.92 25.0valid_min :-80.0valid_max :90.0step :0.08333588units :degrees_northunit_long :Degrees Northlong_name :Latitudestandard_name :latitudeaxis :Y_ChunkSizes :2041array([ 5.      ,  5.083333,  5.166667, ..., 24.833334, 24.916666, 25.      ],\n      dtype=float32)time(time)datetime64[ns]2003-01-01T12:00:00 ... 2003-02-...long_name :Time (hours since 1950-01-01)standard_name :timeaxis :T_ChunkSizes :1024array(['2003-01-01T12:00:00.000000000', '2003-01-02T12:00:00.000000000',\n       '2003-01-03T12:00:00.000000000', '2003-01-04T12:00:00.000000000',\n       '2003-01-05T12:00:00.000000000', '2003-01-06T12:00:00.000000000',\n       '2003-01-07T12:00:00.000000000', '2003-01-08T12:00:00.000000000',\n       '2003-01-09T12:00:00.000000000', '2003-01-10T12:00:00.000000000',\n       '2003-01-11T12:00:00.000000000', '2003-01-12T12:00:00.000000000',\n       '2003-01-13T12:00:00.000000000', '2003-01-14T12:00:00.000000000',\n       '2003-01-15T12:00:00.000000000', '2003-01-16T12:00:00.000000000',\n       '2003-01-17T12:00:00.000000000', '2003-01-18T12:00:00.000000000',\n       '2003-01-19T12:00:00.000000000', '2003-01-20T12:00:00.000000000',\n       '2003-01-21T12:00:00.000000000', '2003-01-22T12:00:00.000000000',\n       '2003-01-23T12:00:00.000000000', '2003-01-24T12:00:00.000000000',\n       '2003-01-25T12:00:00.000000000', '2003-01-26T12:00:00.000000000',\n       '2003-01-27T12:00:00.000000000', '2003-01-28T12:00:00.000000000',\n       '2003-01-29T12:00:00.000000000', '2003-01-30T12:00:00.000000000',\n       '2003-01-31T12:00:00.000000000', '2003-02-01T12:00:00.000000000',\n       '2003-02-02T12:00:00.000000000', '2003-02-03T12:00:00.000000000',\n       '2003-02-04T12:00:00.000000000', '2003-02-05T12:00:00.000000000',\n       '2003-02-06T12:00:00.000000000', '2003-02-07T12:00:00.000000000',\n       '2003-02-08T12:00:00.000000000', '2003-02-09T12:00:00.000000000',\n       '2003-02-10T12:00:00.000000000', '2003-02-11T12:00:00.000000000',\n       '2003-02-12T12:00:00.000000000', '2003-02-13T12:00:00.000000000',\n       '2003-02-14T12:00:00.000000000', '2003-02-15T12:00:00.000000000',\n       '2003-02-16T12:00:00.000000000', '2003-02-17T12:00:00.000000000',\n       '2003-02-18T12:00:00.000000000', '2003-02-19T12:00:00.000000000',\n       '2003-02-20T12:00:00.000000000', '2003-02-21T12:00:00.000000000',\n       '2003-02-22T12:00:00.000000000', '2003-02-23T12:00:00.000000000',\n       '2003-02-24T12:00:00.000000000', '2003-02-25T12:00:00.000000000',\n       '2003-02-26T12:00:00.000000000', '2003-02-27T12:00:00.000000000',\n       '2003-02-28T12:00:00.000000000'], dtype='datetime64[ns]')Data variables: (1)so(time, latitude, longitude)float32...long_name :Salinitystandard_name :sea_water_salinityunits :1e-3unit_long :Practical Salinity Unitvalid_min :1valid_max :28336cell_methods :area: mean_ChunkSizes :[  1   7 341 720][3426779 values with dtype=float32]Indexes: (3)longitudePandasIndexPandasIndex(Index([             60.0, 60.08333206176758, 60.16666793823242,\n                   60.25, 60.33333206176758, 60.41666793823242,\n                    60.5, 60.58333206176758, 60.66666793823242,\n                   60.75,\n       ...\n                   79.25, 79.33333587646484, 79.41666412353516,\n                    79.5, 79.58333587646484, 79.66666412353516,\n                   79.75, 79.83333587646484, 79.91666412353516,\n                    80.0],\n      dtype='float32', name='longitude', length=241))latitudePandasIndexPandasIndex(Index([              5.0, 5.083333492279053, 5.166666507720947,\n                    5.25, 5.333333492279053, 5.416666507720947,\n                     5.5, 5.583333492279053, 5.666666507720947,\n                    5.75,\n       ...\n                   24.25, 24.33333396911621, 24.41666603088379,\n                    24.5, 24.58333396911621, 24.66666603088379,\n                   24.75, 24.83333396911621, 24.91666603088379,\n                    25.0],\n      dtype='float32', name='latitude', length=241))timePandasIndexPandasIndex(DatetimeIndex(['2003-01-01 12:00:00', '2003-01-02 12:00:00',\n               '2003-01-03 12:00:00', '2003-01-04 12:00:00',\n               '2003-01-05 12:00:00', '2003-01-06 12:00:00',\n               '2003-01-07 12:00:00', '2003-01-08 12:00:00',\n               '2003-01-09 12:00:00', '2003-01-10 12:00:00',\n               '2003-01-11 12:00:00', '2003-01-12 12:00:00',\n               '2003-01-13 12:00:00', '2003-01-14 12:00:00',\n               '2003-01-15 12:00:00', '2003-01-16 12:00:00',\n               '2003-01-17 12:00:00', '2003-01-18 12:00:00',\n               '2003-01-19 12:00:00', '2003-01-20 12:00:00',\n               '2003-01-21 12:00:00', '2003-01-22 12:00:00',\n               '2003-01-23 12:00:00', '2003-01-24 12:00:00',\n               '2003-01-25 12:00:00', '2003-01-26 12:00:00',\n               '2003-01-27 12:00:00', '2003-01-28 12:00:00',\n               '2003-01-29 12:00:00', '2003-01-30 12:00:00',\n               '2003-01-31 12:00:00', '2003-02-01 12:00:00',\n               '2003-02-02 12:00:00', '2003-02-03 12:00:00',\n               '2003-02-04 12:00:00', '2003-02-05 12:00:00',\n               '2003-02-06 12:00:00', '2003-02-07 12:00:00',\n               '2003-02-08 12:00:00', '2003-02-09 12:00:00',\n               '2003-02-10 12:00:00', '2003-02-11 12:00:00',\n               '2003-02-12 12:00:00', '2003-02-13 12:00:00',\n               '2003-02-14 12:00:00', '2003-02-15 12:00:00',\n               '2003-02-16 12:00:00', '2003-02-17 12:00:00',\n               '2003-02-18 12:00:00', '2003-02-19 12:00:00',\n               '2003-02-20 12:00:00', '2003-02-21 12:00:00',\n               '2003-02-22 12:00:00', '2003-02-23 12:00:00',\n               '2003-02-24 12:00:00', '2003-02-25 12:00:00',\n               '2003-02-26 12:00:00', '2003-02-27 12:00:00',\n               '2003-02-28 12:00:00'],\n              dtype='datetime64[ns]', name='time', freq=None))Attributes: (0)\n\n\n\nInterpolate\nYou can notice that the coordinates are not the same to era5 dataset, so let’s change it\n\nsalinity = salinity.rename({'longitude': 'lon', 'latitude': 'lat'})\n\n\n# fix time frame, again right-exclusive\nsalinity = salinity.assign_coords(time=np.arange('2003-01-01', '2003-03-01', timedelta(days=1), dtype='datetime64[ns]'))\n\n\nsalinity\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:  (lon: 241, lat: 241, time: 59)\nCoordinates:\n  * lon      (lon) float32 60.0 60.08 60.17 60.25 ... 79.75 79.83 79.92 80.0\n  * lat      (lat) float32 5.0 5.083 5.167 5.25 5.333 ... 24.75 24.83 24.92 25.0\n  * time     (time) datetime64[ns] 2003-01-01 2003-01-02 ... 2003-02-28\nData variables:\n    so       (time, lat, lon) float32 ...xarray.DatasetDimensions:lon: 241lat: 241time: 59Coordinates: (3)lon(lon)float3260.0 60.08 60.17 ... 79.92 80.0valid_min :-180.0valid_max :179.91667step :0.08332825units :degrees_eastunit_long :Degrees Eastlong_name :Longitudestandard_name :longitudeaxis :X_ChunkSizes :4320array([60.      , 60.083332, 60.166668, ..., 79.833336, 79.916664, 80.      ],\n      dtype=float32)lat(lat)float325.0 5.083 5.167 ... 24.92 25.0valid_min :-80.0valid_max :90.0step :0.08333588units :degrees_northunit_long :Degrees Northlong_name :Latitudestandard_name :latitudeaxis :Y_ChunkSizes :2041array([ 5.      ,  5.083333,  5.166667, ..., 24.833334, 24.916666, 25.      ],\n      dtype=float32)time(time)datetime64[ns]2003-01-01 ... 2003-02-28array(['2003-01-01T00:00:00.000000000', '2003-01-02T00:00:00.000000000',\n       '2003-01-03T00:00:00.000000000', '2003-01-04T00:00:00.000000000',\n       '2003-01-05T00:00:00.000000000', '2003-01-06T00:00:00.000000000',\n       '2003-01-07T00:00:00.000000000', '2003-01-08T00:00:00.000000000',\n       '2003-01-09T00:00:00.000000000', '2003-01-10T00:00:00.000000000',\n       '2003-01-11T00:00:00.000000000', '2003-01-12T00:00:00.000000000',\n       '2003-01-13T00:00:00.000000000', '2003-01-14T00:00:00.000000000',\n       '2003-01-15T00:00:00.000000000', '2003-01-16T00:00:00.000000000',\n       '2003-01-17T00:00:00.000000000', '2003-01-18T00:00:00.000000000',\n       '2003-01-19T00:00:00.000000000', '2003-01-20T00:00:00.000000000',\n       '2003-01-21T00:00:00.000000000', '2003-01-22T00:00:00.000000000',\n       '2003-01-23T00:00:00.000000000', '2003-01-24T00:00:00.000000000',\n       '2003-01-25T00:00:00.000000000', '2003-01-26T00:00:00.000000000',\n       '2003-01-27T00:00:00.000000000', '2003-01-28T00:00:00.000000000',\n       '2003-01-29T00:00:00.000000000', '2003-01-30T00:00:00.000000000',\n       '2003-01-31T00:00:00.000000000', '2003-02-01T00:00:00.000000000',\n       '2003-02-02T00:00:00.000000000', '2003-02-03T00:00:00.000000000',\n       '2003-02-04T00:00:00.000000000', '2003-02-05T00:00:00.000000000',\n       '2003-02-06T00:00:00.000000000', '2003-02-07T00:00:00.000000000',\n       '2003-02-08T00:00:00.000000000', '2003-02-09T00:00:00.000000000',\n       '2003-02-10T00:00:00.000000000', '2003-02-11T00:00:00.000000000',\n       '2003-02-12T00:00:00.000000000', '2003-02-13T00:00:00.000000000',\n       '2003-02-14T00:00:00.000000000', '2003-02-15T00:00:00.000000000',\n       '2003-02-16T00:00:00.000000000', '2003-02-17T00:00:00.000000000',\n       '2003-02-18T00:00:00.000000000', '2003-02-19T00:00:00.000000000',\n       '2003-02-20T00:00:00.000000000', '2003-02-21T00:00:00.000000000',\n       '2003-02-22T00:00:00.000000000', '2003-02-23T00:00:00.000000000',\n       '2003-02-24T00:00:00.000000000', '2003-02-25T00:00:00.000000000',\n       '2003-02-26T00:00:00.000000000', '2003-02-27T00:00:00.000000000',\n       '2003-02-28T00:00:00.000000000'], dtype='datetime64[ns]')Data variables: (1)so(time, lat, lon)float32...long_name :Salinitystandard_name :sea_water_salinityunits :1e-3unit_long :Practical Salinity Unitvalid_min :1valid_max :28336cell_methods :area: mean_ChunkSizes :[  1   7 341 720][3426779 values with dtype=float32]Indexes: (3)lonPandasIndexPandasIndex(Index([             60.0, 60.08333206176758, 60.16666793823242,\n                   60.25, 60.33333206176758, 60.41666793823242,\n                    60.5, 60.58333206176758, 60.66666793823242,\n                   60.75,\n       ...\n                   79.25, 79.33333587646484, 79.41666412353516,\n                    79.5, 79.58333587646484, 79.66666412353516,\n                   79.75, 79.83333587646484, 79.91666412353516,\n                    80.0],\n      dtype='float32', name='lon', length=241))latPandasIndexPandasIndex(Index([              5.0, 5.083333492279053, 5.166666507720947,\n                    5.25, 5.333333492279053, 5.416666507720947,\n                     5.5, 5.583333492279053, 5.666666507720947,\n                    5.75,\n       ...\n                   24.25, 24.33333396911621, 24.41666603088379,\n                    24.5, 24.58333396911621, 24.66666603088379,\n                   24.75, 24.83333396911621, 24.91666603088379,\n                    25.0],\n      dtype='float32', name='lat', length=241))timePandasIndexPandasIndex(DatetimeIndex(['2003-01-01', '2003-01-02', '2003-01-03', '2003-01-04',\n               '2003-01-05', '2003-01-06', '2003-01-07', '2003-01-08',\n               '2003-01-09', '2003-01-10', '2003-01-11', '2003-01-12',\n               '2003-01-13', '2003-01-14', '2003-01-15', '2003-01-16',\n               '2003-01-17', '2003-01-18', '2003-01-19', '2003-01-20',\n               '2003-01-21', '2003-01-22', '2003-01-23', '2003-01-24',\n               '2003-01-25', '2003-01-26', '2003-01-27', '2003-01-28',\n               '2003-01-29', '2003-01-30', '2003-01-31', '2003-02-01',\n               '2003-02-02', '2003-02-03', '2003-02-04', '2003-02-05',\n               '2003-02-06', '2003-02-07', '2003-02-08', '2003-02-09',\n               '2003-02-10', '2003-02-11', '2003-02-12', '2003-02-13',\n               '2003-02-14', '2003-02-15', '2003-02-16', '2003-02-17',\n               '2003-02-18', '2003-02-19', '2003-02-20', '2003-02-21',\n               '2003-02-22', '2003-02-23', '2003-02-24', '2003-02-25',\n               '2003-02-26', '2003-02-27', '2003-02-28'],\n              dtype='datetime64[ns]', name='time', freq=None))Attributes: (0)\n\n\n\nsalinity_interp = salinity.interp_like(era5)\n\n\n# verify before and after interpolation\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 8)) # 2 columns & 1 row, width, height \nsalinity['so'].isel(time=0).plot.imshow(ax=ax1)\nax1.set_title('before interpolation')\nax1.set_aspect('equal')\n\nsalinity_interp['so'].isel(time=0).plot.imshow(ax=ax2)\nax2.set_title('after interpolation')\nax2.set_aspect('equal')",
    "crumbs": [
      "Data Tutorials",
      "Indian Ocean Zarr",
      "Combine, clean, and export the data"
    ]
  },
  {
    "objectID": "notebooks-data/04_Combining_Data.html#combine-files-together",
    "href": "notebooks-data/04_Combining_Data.html#combine-files-together",
    "title": "Combine, clean, and export the data",
    "section": "Combine files together",
    "text": "Combine files together\nDue to different attributes in each dataset coordinates, we cannot combine all datasets together by coords by simply using the combine_by_coords() function in xarray. Issue is replicated below:\n\nfinal_ds = xr.combine_by_coords([era5, salinity_interp, sst_interp])\n\n\nfinal_ds\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:       (time: 59, lat: 81, lon: 81)\nCoordinates:\n  * time          (time) datetime64[ns] 2003-01-01 2003-01-02 ... 2003-02-28\n  * lat           (lat) float32 25.0 24.75 24.5 24.25 24.0 ... 5.75 5.5 5.25 5.0\n  * lon           (lon) float32 60.0 60.25 60.5 60.75 ... 79.25 79.5 79.75 80.0\nData variables:\n    analysed_sst  (time, lat, lon) float32 dask.array&lt;chunksize=(59, 81, 81), meta=np.ndarray&gt;\n    u_wind        (time, lat, lon) float32 3.128 2.865 2.555 ... -3.737 -4.479\n    v_wind        (time, lat, lon) float32 0.6016 0.6589 ... -1.914 -2.474\n    speed         (time, lat, lon) float32 3.945 3.645 3.368 ... 4.227 5.153\n    direction     (time, lat, lon) float32 22.31 17.58 13.01 ... -153.4 -151.6\n    so            (time, lat, lon) float64 36.55 36.54 36.54 ... 34.0 34.08\nAttributes:\n    source:       Reanalysis\n    institution:  ECMWF\n    tilte:        ERA5 forecastsxarray.DatasetDimensions:time: 59lat: 81lon: 81Coordinates: (3)time(time)datetime64[ns]2003-01-01 ... 2003-02-28array(['2003-01-01T00:00:00.000000000', '2003-01-02T00:00:00.000000000',\n       '2003-01-03T00:00:00.000000000', '2003-01-04T00:00:00.000000000',\n       '2003-01-05T00:00:00.000000000', '2003-01-06T00:00:00.000000000',\n       '2003-01-07T00:00:00.000000000', '2003-01-08T00:00:00.000000000',\n       '2003-01-09T00:00:00.000000000', '2003-01-10T00:00:00.000000000',\n       '2003-01-11T00:00:00.000000000', '2003-01-12T00:00:00.000000000',\n       '2003-01-13T00:00:00.000000000', '2003-01-14T00:00:00.000000000',\n       '2003-01-15T00:00:00.000000000', '2003-01-16T00:00:00.000000000',\n       '2003-01-17T00:00:00.000000000', '2003-01-18T00:00:00.000000000',\n       '2003-01-19T00:00:00.000000000', '2003-01-20T00:00:00.000000000',\n       '2003-01-21T00:00:00.000000000', '2003-01-22T00:00:00.000000000',\n       '2003-01-23T00:00:00.000000000', '2003-01-24T00:00:00.000000000',\n       '2003-01-25T00:00:00.000000000', '2003-01-26T00:00:00.000000000',\n       '2003-01-27T00:00:00.000000000', '2003-01-28T00:00:00.000000000',\n       '2003-01-29T00:00:00.000000000', '2003-01-30T00:00:00.000000000',\n       '2003-01-31T00:00:00.000000000', '2003-02-01T00:00:00.000000000',\n       '2003-02-02T00:00:00.000000000', '2003-02-03T00:00:00.000000000',\n       '2003-02-04T00:00:00.000000000', '2003-02-05T00:00:00.000000000',\n       '2003-02-06T00:00:00.000000000', '2003-02-07T00:00:00.000000000',\n       '2003-02-08T00:00:00.000000000', '2003-02-09T00:00:00.000000000',\n       '2003-02-10T00:00:00.000000000', '2003-02-11T00:00:00.000000000',\n       '2003-02-12T00:00:00.000000000', '2003-02-13T00:00:00.000000000',\n       '2003-02-14T00:00:00.000000000', '2003-02-15T00:00:00.000000000',\n       '2003-02-16T00:00:00.000000000', '2003-02-17T00:00:00.000000000',\n       '2003-02-18T00:00:00.000000000', '2003-02-19T00:00:00.000000000',\n       '2003-02-20T00:00:00.000000000', '2003-02-21T00:00:00.000000000',\n       '2003-02-22T00:00:00.000000000', '2003-02-23T00:00:00.000000000',\n       '2003-02-24T00:00:00.000000000', '2003-02-25T00:00:00.000000000',\n       '2003-02-26T00:00:00.000000000', '2003-02-27T00:00:00.000000000',\n       '2003-02-28T00:00:00.000000000'], dtype='datetime64[ns]')lat(lat)float3225.0 24.75 24.5 ... 5.5 5.25 5.0standard_name :latitudelong_name :latitudeunits :degrees_northarray([25.  , 24.75, 24.5 , 24.25, 24.  , 23.75, 23.5 , 23.25, 23.  , 22.75,\n       22.5 , 22.25, 22.  , 21.75, 21.5 , 21.25, 21.  , 20.75, 20.5 , 20.25,\n       20.  , 19.75, 19.5 , 19.25, 19.  , 18.75, 18.5 , 18.25, 18.  , 17.75,\n       17.5 , 17.25, 17.  , 16.75, 16.5 , 16.25, 16.  , 15.75, 15.5 , 15.25,\n       15.  , 14.75, 14.5 , 14.25, 14.  , 13.75, 13.5 , 13.25, 13.  , 12.75,\n       12.5 , 12.25, 12.  , 11.75, 11.5 , 11.25, 11.  , 10.75, 10.5 , 10.25,\n       10.  ,  9.75,  9.5 ,  9.25,  9.  ,  8.75,  8.5 ,  8.25,  8.  ,  7.75,\n        7.5 ,  7.25,  7.  ,  6.75,  6.5 ,  6.25,  6.  ,  5.75,  5.5 ,  5.25,\n        5.  ], dtype=float32)lon(lon)float3260.0 60.25 60.5 ... 79.5 79.75 80.0standard_name :longitudelong_name :longitudeunits :degrees_eastarray([60.  , 60.25, 60.5 , 60.75, 61.  , 61.25, 61.5 , 61.75, 62.  , 62.25,\n       62.5 , 62.75, 63.  , 63.25, 63.5 , 63.75, 64.  , 64.25, 64.5 , 64.75,\n       65.  , 65.25, 65.5 , 65.75, 66.  , 66.25, 66.5 , 66.75, 67.  , 67.25,\n       67.5 , 67.75, 68.  , 68.25, 68.5 , 68.75, 69.  , 69.25, 69.5 , 69.75,\n       70.  , 70.25, 70.5 , 70.75, 71.  , 71.25, 71.5 , 71.75, 72.  , 72.25,\n       72.5 , 72.75, 73.  , 73.25, 73.5 , 73.75, 74.  , 74.25, 74.5 , 74.75,\n       75.  , 75.25, 75.5 , 75.75, 76.  , 76.25, 76.5 , 76.75, 77.  , 77.25,\n       77.5 , 77.75, 78.  , 78.25, 78.5 , 78.75, 79.  , 79.25, 79.5 , 79.75,\n       80.  ], dtype=float32)Data variables: (6)analysed_sst(time, lat, lon)float32dask.array&lt;chunksize=(59, 81, 81), meta=np.ndarray&gt;long_name :analysed sea surface temperaturestandard_name :sea_surface_foundation_temperaturecoverage_content_type :physicalMeasurementunits :kelvinvalid_min :-32767valid_max :32767comment :\"Final\" version using Multi-Resolution Variational Analysis (MRVA) method for interpolationsource :MODIS_T-JPL, MODIS_A-JPL, AMSRE-REMSS, AVHRR17_G-ACSPO, iQUAM-NOAA/NESDIS, Ice_Conc-OSISAF\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n1.48 MiB\n1.48 MiB\n\n\nShape\n(59, 81, 81)\n(59, 81, 81)\n\n\nDask graph\n1 chunks in 25 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\nu_wind(time, lat, lon)float323.128 2.865 2.555 ... -3.737 -4.479standard_name :eastward_windunits :m s**-1long_name :10 metre U wind componentnameECMWF :10 metre U wind componentshortNameECMWF :10unameCDM :10_metre_U_wind_component_surfaceproduct_type :analysisarray([[[ 3.1276042 ,  2.8645833 ,  2.5546875 , ...,  0.8776042 ,\n          0.9036458 ,  0.8072917 ],\n        [ 3.1223958 ,  2.8854167 ,  2.5703125 , ...,  0.6015625 ,\n          0.6380208 ,  0.6848958 ],\n        [ 2.5026042 ,  2.2864583 ,  2.0598958 , ...,  0.3828125 ,\n          0.390625  ,  0.45833334],\n        ...,\n        [-2.7916667 , -2.8932292 , -3.0182292 , ...,  0.04947917,\n          0.21614583,  0.23177083],\n        [-2.6380208 , -2.7317708 , -2.8567708 , ..., -0.02604167,\n          0.06510416,  0.05729167],\n        [-2.53125   , -2.6354167 , -2.7682292 , ..., -0.19270833,\n         -0.09114584, -0.07291666]],\n\n       [[-0.41666666, -0.7369792 , -1.0208334 , ..., -1.4401041 ,\n         -1.5677084 , -1.5677084 ],\n        [ 0.12239584, -0.13541667, -0.39583334, ..., -1.4348959 ,\n         -1.453125  , -1.3541666 ],\n        [ 0.6953125 ,  0.5234375 ,  0.44791666, ..., -1.3515625 ,\n         -1.2317709 , -1.140625  ],\n...\n        [-3.0833333 , -3.0286458 , -2.9739583 , ..., -0.8567708 ,\n         -1.21875   , -1.7447916 ],\n        [-3.0364583 , -2.9973958 , -2.9401042 , ..., -0.9322917 ,\n         -1.3854166 , -1.9401041 ],\n        [-3.0026042 , -2.9739583 , -2.9322917 , ..., -1.0442709 ,\n         -1.4401041 , -1.8255209 ]],\n\n       [[ 8.1119795 ,  8.020833  ,  7.950521  , ..., -1.0338541 ,\n         -1.0494791 , -1.0703125 ],\n        [ 7.78125   ,  7.7890625 ,  7.734375  , ..., -0.7942708 ,\n         -0.7135417 , -0.6015625 ],\n        [ 7.205729  ,  7.294271  ,  7.325521  , ..., -0.5026042 ,\n         -0.38020834, -0.29166666],\n        ...,\n        [-1.4270834 , -1.3619791 , -1.3125    , ..., -1.6119791 ,\n         -2.5520833 , -3.8203125 ],\n        [-1.2604166 , -1.2005209 , -1.1328125 , ..., -2.3958333 ,\n         -3.390625  , -4.5390625 ],\n        [-1.0625    , -1.0208334 , -0.9739583 , ..., -2.8697917 ,\n         -3.7369792 , -4.4791665 ]]], dtype=float32)v_wind(time, lat, lon)float320.6016 0.6589 ... -1.914 -2.474standard_name :northward_windunits :m s**-1long_name :10 metre V wind componentnameECMWF :10 metre V wind componentshortNameECMWF :10vnameCDM :10_metre_V_wind_component_surfaceproduct_type :analysisarray([[[ 6.0156250e-01,  6.5885419e-01,  6.0677081e-01, ...,\n         -1.3671875e+00, -1.1848959e+00, -8.8020831e-01],\n        [ 1.0729166e+00,  1.1536459e+00,  1.0807291e+00, ...,\n         -1.4791666e+00, -1.3463541e+00, -1.1796875e+00],\n        [ 1.1510416e+00,  1.2838541e+00,  1.3229166e+00, ...,\n         -1.5963541e+00, -1.4869791e+00, -1.3489584e+00],\n        ...,\n        [-3.6770833e+00, -3.8229167e+00, -3.9713542e+00, ...,\n         -2.3437500e+00, -1.3020834e+00, -3.7760416e-01],\n        [-3.7083333e+00, -3.8255208e+00, -3.9088542e+00, ...,\n         -2.3593750e+00, -1.5390625e+00, -7.4739581e-01],\n        [-3.7395833e+00, -3.7526042e+00, -3.7812500e+00, ...,\n         -2.4817708e+00, -1.6953125e+00, -1.1484375e+00]],\n\n       [[-1.5208334e+00, -1.7005209e+00, -1.9192709e+00, ...,\n         -3.9062500e-01, -4.2708334e-01, -4.9218750e-01],\n        [-1.9010416e+00, -1.9583334e+00, -2.1458333e+00, ...,\n         -5.0260419e-01, -5.8593750e-01, -5.0260419e-01],\n        [-2.2838542e+00, -2.2473958e+00, -2.2109375e+00, ...,\n         -4.9479166e-01, -6.6145831e-01, -6.0937500e-01],\n...\n        [-4.0729165e+00, -4.1276040e+00, -4.1770835e+00, ...,\n         -2.1171875e+00, -1.6562500e+00, -1.3151041e+00],\n        [-4.0885415e+00, -4.1484375e+00, -4.2005210e+00, ...,\n         -2.4244792e+00, -2.1119792e+00, -1.8515625e+00],\n        [-4.0625000e+00, -4.1197915e+00, -4.1614585e+00, ...,\n         -2.7031250e+00, -2.4166667e+00, -2.2708333e+00]],\n\n       [[-1.9791667e-01,  5.2083335e-03,  1.5625000e-01, ...,\n         -1.2760417e-01, -1.6145833e-01, -1.6927083e-01],\n        [-7.9687500e-01, -5.9895831e-01, -4.3750000e-01, ...,\n          5.4687500e-02,  4.6875000e-02,  1.5364583e-01],\n        [-1.2994791e+00, -1.0937500e+00, -9.4010419e-01, ...,\n          2.2395833e-01,  2.9166666e-01,  3.8020834e-01],\n        ...,\n        [-3.0625000e+00, -3.0781250e+00, -3.1197917e+00, ...,\n          5.4687500e-01,  1.2500000e-01, -8.0729169e-01],\n        [-3.1614583e+00, -3.2005208e+00, -3.2291667e+00, ...,\n         -4.1666666e-01, -1.0598959e+00, -1.8958334e+00],\n        [-3.2526042e+00, -3.3255208e+00, -3.3750000e+00, ...,\n         -1.3333334e+00, -1.9140625e+00, -2.4739583e+00]]], dtype=float32)speed(time, lat, lon)float323.945 3.645 3.368 ... 4.227 5.153array([[[3.9451437, 3.6454449, 3.36847  , ..., 1.9201735, 1.8865218,\n         1.7468839],\n        [4.1419544, 3.8504055, 3.444007 , ..., 1.9789158, 1.9153827,\n         1.8310242],\n        [3.6950111, 3.4435928, 3.1019478, ..., 1.9867468, 1.9142274,\n         1.8317447],\n        ...,\n        [4.7469373, 4.912411 , 5.092304 , ..., 2.5135314, 1.6478343,\n         1.3388939],\n        [4.676735 , 4.8191776, 4.95795  , ..., 2.5241547, 1.7888355,\n         1.2424096],\n        [4.636933 , 4.7195234, 4.826424 , ..., 2.6338756, 1.8901653,\n         1.4170161]],\n\n       [[2.3318148, 2.4910347, 2.7374954, ..., 1.7411982, 1.8597933,\n         1.8728681],\n        [2.414438 , 2.5525272, 2.7947886, ..., 1.7888421, 1.8435212,\n         1.7328191],\n        [2.7723866, 2.8588107, 2.8829317, ..., 1.7411242, 1.7196132,\n         1.6104554],\n...\n        [5.146253 , 5.1557384, 5.1632495, ..., 2.8367107, 2.591439 ,\n         2.534239 ],\n        [5.1336794, 5.1560197, 5.166705 , ..., 3.0493386, 2.972432 ,\n         3.014616 ],\n        [5.0962915, 5.1267576, 5.1389093, ..., 3.263656 , 3.196616 ,\n         3.23878  ]],\n\n       [[8.189649 , 8.106084 , 8.037755 , ..., 2.1850507, 2.2752473,\n         2.2316103],\n        [7.892883 , 7.890354 , 7.823316 , ..., 2.3158002, 2.3716338,\n         2.317237 ],\n        [7.391702 , 7.4489727, 7.4578147, ..., 2.337489 , 2.231067 ,\n         2.291389 ],\n        ...,\n        [3.4753053, 3.467406 , 3.4899578, ..., 1.9244485, 2.6942132,\n         4.00572  ],\n        [3.5153275, 3.533966 , 3.542756 , ..., 2.549701 , 3.6089706,\n         4.9639993],\n        [3.5520408, 3.6114044, 3.6468   , ..., 3.2160883, 4.226849 ,\n         5.1525497]]], dtype=float32)direction(time, lat, lon)float3222.31 17.58 13.01 ... -153.4 -151.6standard_name :northward_windunits :m s**-1long_name :10 metre V wind componentnameECMWF :10 metre V wind componentshortNameECMWF :10vnameCDM :10_metre_V_wind_component_surfaceproduct_type :analysisarray([[[  22.31256  ,   17.577126 ,   13.005119 , ...,  -67.38259  ,\n          -47.755325 ,  -33.74233  ],\n        [  30.220772 ,   29.43544  ,   26.357203 , ...,  -78.10914  ,\n          -64.685646 ,  -49.11764  ],\n        [  35.783054 ,   37.048702 ,   35.60695  , ...,  -85.95185  ,\n          -86.35613  ,  -70.15734  ],\n        ...,\n        [-126.93241  , -126.620476 , -126.65524  , ...,  -89.24673  ,\n          -80.60198  ,   -4.201843 ],\n        [-125.02897  , -124.928856 , -125.43902  , ...,  -90.54617  ,\n          -84.9731   ,  -69.18275  ],\n        [-123.4584   , -124.29117  , -125.278015 , ...,  -93.996056 ,\n          -90.138794 ,  -88.29269  ]],\n\n       [[ -72.070206 ,  -85.1071   ,  -93.38763  , ...,  -58.74728  ,\n          -60.06917  ,  -58.698284 ],\n        [ -80.372795 ,  -90.8068   ,  -96.67983  , ...,  -58.435246 ,\n          -56.67389  ,  -58.751236 ],\n        [ -80.680115 ,  -86.12191  ,  -88.40796  , ...,  -59.58118  ,\n          -53.925976 ,  -70.68571  ],\n...\n        [-127.28055  , -126.49218  , -125.74938  , ...,  -71.24183  ,\n          -79.70399  , -133.6834   ],\n        [-126.68684  , -125.9416   , -125.15563  , ..., -114.46243  ,\n         -107.83289  , -131.2433   ],\n        [-126.467865 , -125.800575 , -125.19381  , ..., -113.44105  ,\n         -120.908356 , -126.25626  ]],\n\n       [[  -0.9108308,    0.405311 ,    1.362003 , ...,  -42.883907 ,\n          -38.677364 ,  -36.70583  ],\n        [  -5.2671247,   -3.8980722,   -2.9317954, ...,  -26.818964 ,\n          -36.38267  ,   -2.3517277],\n        [  -9.45855  ,   -7.810347 ,   -6.7994595, ...,    9.280067 ,\n            2.028537 ,   22.812065 ],\n        ...,\n        [-115.06766  , -113.99908  , -113.05724  , ...,   26.856642 ,\n           10.176036 ,  -94.912285 ],\n        [-111.756325 , -110.610634 , -109.46108  , ...,  -81.22135  ,\n         -133.58519  , -158.10306  ],\n        [-108.30612  , -107.21555  , -106.26769  , ..., -140.94438  ,\n         -153.4189   , -151.60954  ]]], dtype=float32)so(time, lat, lon)float6436.55 36.54 36.54 ... 34.0 34.08long_name :Salinitystandard_name :sea_water_salinityunits :1e-3unit_long :Practical Salinity Unitvalid_min :1valid_max :28336cell_methods :area: mean_ChunkSizes :[  1   7 341 720]array([[[36.55201721, 36.54133606, 36.53675842, ...,         nan,\n                 nan,         nan],\n        [36.5459137 , 36.57948685, 36.59321976, ...,         nan,\n                 nan,         nan],\n        [36.62831497, 36.71834564, 36.75344086, ...,         nan,\n                 nan,         nan],\n        ...,\n        [35.49760437, 35.48692322, 35.45030212, ..., 32.78908539,\n         32.854702  , 32.9493103 ],\n        [35.4884491 , 35.43046188, 35.37553024, ..., 34.19446564,\n         34.28754425, 34.29059601],\n        [35.39994431, 35.37400436, 35.36179733, ..., 33.71685028,\n         33.60850906, 33.68022537]],\n\n       [[36.5459137 , 36.53370667, 36.51997375, ...,         nan,\n                 nan,         nan],\n        [36.55659485, 36.57033157, 36.57338333, ...,         nan,\n                 nan,         nan],\n        [36.62373734, 36.71987152, 36.76717377, ...,         nan,\n                 nan,         nan],\n...\n        [35.06271744, 35.02761841, 34.97268677, ..., 33.4818573 ,\n         33.47270203, 33.48796082],\n        [35.18326187, 35.16342545, 35.1084938 , ..., 33.60698318,\n         33.68175125, 33.7733078 ],\n        [35.24582672, 35.19089508, 35.13595963, ..., 33.75041962,\n         33.87859726, 33.99151611]],\n\n       [[36.590168  , 36.59474564, 36.58864212, ...,         nan,\n                 nan,         nan],\n        [36.56117249, 36.57643509, 36.59321976, ...,         nan,\n                 nan,         nan],\n        [36.7000351 , 36.61000443, 36.57796097, ...,         nan,\n                 nan,         nan],\n        ...,\n        [35.08407974, 35.06729507, 35.01541138, ..., 33.4299736 ,\n         33.41471481, 33.44981384],\n        [35.21378326, 35.19547272, 35.14206314, ..., 33.6420784 ,\n         33.72447968, 33.8465538 ],\n        [35.24277496, 35.18326187, 35.13290787, ..., 33.8831749 ,\n         34.00067139, 34.08307266]]])Indexes: (3)timePandasIndexPandasIndex(DatetimeIndex(['2003-01-01', '2003-01-02', '2003-01-03', '2003-01-04',\n               '2003-01-05', '2003-01-06', '2003-01-07', '2003-01-08',\n               '2003-01-09', '2003-01-10', '2003-01-11', '2003-01-12',\n               '2003-01-13', '2003-01-14', '2003-01-15', '2003-01-16',\n               '2003-01-17', '2003-01-18', '2003-01-19', '2003-01-20',\n               '2003-01-21', '2003-01-22', '2003-01-23', '2003-01-24',\n               '2003-01-25', '2003-01-26', '2003-01-27', '2003-01-28',\n               '2003-01-29', '2003-01-30', '2003-01-31', '2003-02-01',\n               '2003-02-02', '2003-02-03', '2003-02-04', '2003-02-05',\n               '2003-02-06', '2003-02-07', '2003-02-08', '2003-02-09',\n               '2003-02-10', '2003-02-11', '2003-02-12', '2003-02-13',\n               '2003-02-14', '2003-02-15', '2003-02-16', '2003-02-17',\n               '2003-02-18', '2003-02-19', '2003-02-20', '2003-02-21',\n               '2003-02-22', '2003-02-23', '2003-02-24', '2003-02-25',\n               '2003-02-26', '2003-02-27', '2003-02-28'],\n              dtype='datetime64[ns]', name='time', freq=None))latPandasIndexPandasIndex(Index([ 25.0, 24.75,  24.5, 24.25,  24.0, 23.75,  23.5, 23.25,  23.0, 22.75,\n        22.5, 22.25,  22.0, 21.75,  21.5, 21.25,  21.0, 20.75,  20.5, 20.25,\n        20.0, 19.75,  19.5, 19.25,  19.0, 18.75,  18.5, 18.25,  18.0, 17.75,\n        17.5, 17.25,  17.0, 16.75,  16.5, 16.25,  16.0, 15.75,  15.5, 15.25,\n        15.0, 14.75,  14.5, 14.25,  14.0, 13.75,  13.5, 13.25,  13.0, 12.75,\n        12.5, 12.25,  12.0, 11.75,  11.5, 11.25,  11.0, 10.75,  10.5, 10.25,\n        10.0,  9.75,   9.5,  9.25,   9.0,  8.75,   8.5,  8.25,   8.0,  7.75,\n         7.5,  7.25,   7.0,  6.75,   6.5,  6.25,   6.0,  5.75,   5.5,  5.25,\n         5.0],\n      dtype='float32', name='lat'))lonPandasIndexPandasIndex(Index([ 60.0, 60.25,  60.5, 60.75,  61.0, 61.25,  61.5, 61.75,  62.0, 62.25,\n        62.5, 62.75,  63.0, 63.25,  63.5, 63.75,  64.0, 64.25,  64.5, 64.75,\n        65.0, 65.25,  65.5, 65.75,  66.0, 66.25,  66.5, 66.75,  67.0, 67.25,\n        67.5, 67.75,  68.0, 68.25,  68.5, 68.75,  69.0, 69.25,  69.5, 69.75,\n        70.0, 70.25,  70.5, 70.75,  71.0, 71.25,  71.5, 71.75,  72.0, 72.25,\n        72.5, 72.75,  73.0, 73.25,  73.5, 73.75,  74.0, 74.25,  74.5, 74.75,\n        75.0, 75.25,  75.5, 75.75,  76.0, 76.25,  76.5, 76.75,  77.0, 77.25,\n        77.5, 77.75,  78.0, 78.25,  78.5, 78.75,  79.0, 79.25,  79.5, 79.75,\n        80.0],\n      dtype='float32', name='lon'))Attributes: (3)source :Reanalysisinstitution :ECMWFtilte :ERA5 forecasts",
    "crumbs": [
      "Data Tutorials",
      "Indian Ocean Zarr",
      "Combine, clean, and export the data"
    ]
  },
  {
    "objectID": "notebooks-data/04_Combining_Data.html#adding-metadata-and-rename-variables",
    "href": "notebooks-data/04_Combining_Data.html#adding-metadata-and-rename-variables",
    "title": "Combine, clean, and export the data",
    "section": "Adding metadata and rename variables",
    "text": "Adding metadata and rename variables\nMetadata is one aspect we also need to address. Correct metadata is vital especially when we want to share our final dataset for others to use, or when we want to graph and feed data for other tools to work on. As we combine and process variables into the final dataset, some of the metadata may be lost, so we need to make sure that their metadata is reserved and resolve any conflict for the export process to proceed smoothly.\n\nfinal_ds['speed'].attrs = {\n    'units': 'm s**-1',\n    'long_name': '10 metre absolute speed'\n}\n\nfinal_ds['direction'].attrs = {\n    'units': '°C',\n    'long_name': '10 metre wind direction'\n}\n\n\nfinal_ds.time.attrs = salinity.time.attrs\n\n\n# you do not need to add everything in here, but it's an example template\n\nfinal_ds.attrs = {\n    'title': 'Sample of Climate Data for Coastal Upwelling Machine Learning Project in Indian Ocean',\n    'summary': \"Daily mean of 0.25 x 0.25 degrees gridded data from multiple climate variables that may influence the patterns of coastal upwelling in the focused area\",\n    'creator_name': 'Minh Phan',\n    'creator_email': 'minhphan@uw.edu',\n    'creator_type': 'person',\n    'source': 'OSCAR, ERA5 Reanalysis, Copernicus Climate Change Service (C3S), Copernicus Marine Environment Monitoring Service (CMEMS)',\n    'geospatial_lat_min': float(final_ds.lat.min().values),\n    'geospatial_lat_max': float(final_ds.lat.max().values),\n    'geospatial_lat_units': 'degrees_north',\n    'geospatial_lat_resolution': 0.25,\n    'geospatial_lon_min': float(final_ds.lon.min().values),\n    'geospatial_lon_max': float(final_ds.lon.max().values),\n    'geospatial_lon_units': 'degrees_east',\n    'geospatial_lon_resolution': 0.25,\n    'time_coverage_start': '2000-01-01T00:00:00',\n    'time_coverage_end': '2002-12-31T23:59:59',\n    'date_created': datetime.today().strftime('%Y-%d-%d')\n}\n\n\nfinal_ds\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:       (time: 59, lat: 81, lon: 81)\nCoordinates:\n  * time          (time) datetime64[ns] 2003-01-01 2003-01-02 ... 2003-02-28\n  * lat           (lat) float32 25.0 24.75 24.5 24.25 24.0 ... 5.75 5.5 5.25 5.0\n  * lon           (lon) float32 60.0 60.25 60.5 60.75 ... 79.25 79.5 79.75 80.0\nData variables:\n    analysed_sst  (time, lat, lon) float32 dask.array&lt;chunksize=(59, 81, 81), meta=np.ndarray&gt;\n    u_wind        (time, lat, lon) float32 3.128 2.865 2.555 ... -3.737 -4.479\n    v_wind        (time, lat, lon) float32 0.6016 0.6589 ... -1.914 -2.474\n    speed         (time, lat, lon) float32 3.945 3.645 3.368 ... 4.227 5.153\n    direction     (time, lat, lon) float32 22.31 17.58 13.01 ... -153.4 -151.6\n    so            (time, lat, lon) float64 36.55 36.54 36.54 ... 34.0 34.08\nAttributes: (12/17)\n    title:                      Sample of Climate Data for Coastal Upwelling ...\n    summary:                    Daily mean of 0.25 x 0.25 degrees gridded dat...\n    creator_name:               Minh Phan\n    creator_email:              minhphan@uw.edu\n    creator_type:               person\n    source:                     OSCAR, ERA5 Reanalysis, Copernicus Climate Ch...\n    ...                         ...\n    geospatial_lon_max:         80.0\n    geospatial_lon_units:       degrees_east\n    geospatial_lon_resolution:  0.25\n    time_coverage_start:        2000-01-01T00:00:00\n    time_coverage_end:          2002-12-31T23:59:59\n    date_created:               2023-14-14xarray.DatasetDimensions:time: 59lat: 81lon: 81Coordinates: (3)time(time)datetime64[ns]2003-01-01 ... 2003-02-28array(['2003-01-01T00:00:00.000000000', '2003-01-02T00:00:00.000000000',\n       '2003-01-03T00:00:00.000000000', '2003-01-04T00:00:00.000000000',\n       '2003-01-05T00:00:00.000000000', '2003-01-06T00:00:00.000000000',\n       '2003-01-07T00:00:00.000000000', '2003-01-08T00:00:00.000000000',\n       '2003-01-09T00:00:00.000000000', '2003-01-10T00:00:00.000000000',\n       '2003-01-11T00:00:00.000000000', '2003-01-12T00:00:00.000000000',\n       '2003-01-13T00:00:00.000000000', '2003-01-14T00:00:00.000000000',\n       '2003-01-15T00:00:00.000000000', '2003-01-16T00:00:00.000000000',\n       '2003-01-17T00:00:00.000000000', '2003-01-18T00:00:00.000000000',\n       '2003-01-19T00:00:00.000000000', '2003-01-20T00:00:00.000000000',\n       '2003-01-21T00:00:00.000000000', '2003-01-22T00:00:00.000000000',\n       '2003-01-23T00:00:00.000000000', '2003-01-24T00:00:00.000000000',\n       '2003-01-25T00:00:00.000000000', '2003-01-26T00:00:00.000000000',\n       '2003-01-27T00:00:00.000000000', '2003-01-28T00:00:00.000000000',\n       '2003-01-29T00:00:00.000000000', '2003-01-30T00:00:00.000000000',\n       '2003-01-31T00:00:00.000000000', '2003-02-01T00:00:00.000000000',\n       '2003-02-02T00:00:00.000000000', '2003-02-03T00:00:00.000000000',\n       '2003-02-04T00:00:00.000000000', '2003-02-05T00:00:00.000000000',\n       '2003-02-06T00:00:00.000000000', '2003-02-07T00:00:00.000000000',\n       '2003-02-08T00:00:00.000000000', '2003-02-09T00:00:00.000000000',\n       '2003-02-10T00:00:00.000000000', '2003-02-11T00:00:00.000000000',\n       '2003-02-12T00:00:00.000000000', '2003-02-13T00:00:00.000000000',\n       '2003-02-14T00:00:00.000000000', '2003-02-15T00:00:00.000000000',\n       '2003-02-16T00:00:00.000000000', '2003-02-17T00:00:00.000000000',\n       '2003-02-18T00:00:00.000000000', '2003-02-19T00:00:00.000000000',\n       '2003-02-20T00:00:00.000000000', '2003-02-21T00:00:00.000000000',\n       '2003-02-22T00:00:00.000000000', '2003-02-23T00:00:00.000000000',\n       '2003-02-24T00:00:00.000000000', '2003-02-25T00:00:00.000000000',\n       '2003-02-26T00:00:00.000000000', '2003-02-27T00:00:00.000000000',\n       '2003-02-28T00:00:00.000000000'], dtype='datetime64[ns]')lat(lat)float3225.0 24.75 24.5 ... 5.5 5.25 5.0standard_name :latitudelong_name :latitudeunits :degrees_northarray([25.  , 24.75, 24.5 , 24.25, 24.  , 23.75, 23.5 , 23.25, 23.  , 22.75,\n       22.5 , 22.25, 22.  , 21.75, 21.5 , 21.25, 21.  , 20.75, 20.5 , 20.25,\n       20.  , 19.75, 19.5 , 19.25, 19.  , 18.75, 18.5 , 18.25, 18.  , 17.75,\n       17.5 , 17.25, 17.  , 16.75, 16.5 , 16.25, 16.  , 15.75, 15.5 , 15.25,\n       15.  , 14.75, 14.5 , 14.25, 14.  , 13.75, 13.5 , 13.25, 13.  , 12.75,\n       12.5 , 12.25, 12.  , 11.75, 11.5 , 11.25, 11.  , 10.75, 10.5 , 10.25,\n       10.  ,  9.75,  9.5 ,  9.25,  9.  ,  8.75,  8.5 ,  8.25,  8.  ,  7.75,\n        7.5 ,  7.25,  7.  ,  6.75,  6.5 ,  6.25,  6.  ,  5.75,  5.5 ,  5.25,\n        5.  ], dtype=float32)lon(lon)float3260.0 60.25 60.5 ... 79.5 79.75 80.0standard_name :longitudelong_name :longitudeunits :degrees_eastarray([60.  , 60.25, 60.5 , 60.75, 61.  , 61.25, 61.5 , 61.75, 62.  , 62.25,\n       62.5 , 62.75, 63.  , 63.25, 63.5 , 63.75, 64.  , 64.25, 64.5 , 64.75,\n       65.  , 65.25, 65.5 , 65.75, 66.  , 66.25, 66.5 , 66.75, 67.  , 67.25,\n       67.5 , 67.75, 68.  , 68.25, 68.5 , 68.75, 69.  , 69.25, 69.5 , 69.75,\n       70.  , 70.25, 70.5 , 70.75, 71.  , 71.25, 71.5 , 71.75, 72.  , 72.25,\n       72.5 , 72.75, 73.  , 73.25, 73.5 , 73.75, 74.  , 74.25, 74.5 , 74.75,\n       75.  , 75.25, 75.5 , 75.75, 76.  , 76.25, 76.5 , 76.75, 77.  , 77.25,\n       77.5 , 77.75, 78.  , 78.25, 78.5 , 78.75, 79.  , 79.25, 79.5 , 79.75,\n       80.  ], dtype=float32)Data variables: (6)analysed_sst(time, lat, lon)float32dask.array&lt;chunksize=(59, 81, 81), meta=np.ndarray&gt;long_name :analysed sea surface temperaturestandard_name :sea_surface_foundation_temperaturecoverage_content_type :physicalMeasurementunits :kelvinvalid_min :-32767valid_max :32767comment :\"Final\" version using Multi-Resolution Variational Analysis (MRVA) method for interpolationsource :MODIS_T-JPL, MODIS_A-JPL, AMSRE-REMSS, AVHRR17_G-ACSPO, iQUAM-NOAA/NESDIS, Ice_Conc-OSISAF\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n1.48 MiB\n1.48 MiB\n\n\nShape\n(59, 81, 81)\n(59, 81, 81)\n\n\nDask graph\n1 chunks in 25 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\nu_wind(time, lat, lon)float323.128 2.865 2.555 ... -3.737 -4.479standard_name :eastward_windunits :m s**-1long_name :10 metre U wind componentnameECMWF :10 metre U wind componentshortNameECMWF :10unameCDM :10_metre_U_wind_component_surfaceproduct_type :analysisarray([[[ 3.1276042 ,  2.8645833 ,  2.5546875 , ...,  0.8776042 ,\n          0.9036458 ,  0.8072917 ],\n        [ 3.1223958 ,  2.8854167 ,  2.5703125 , ...,  0.6015625 ,\n          0.6380208 ,  0.6848958 ],\n        [ 2.5026042 ,  2.2864583 ,  2.0598958 , ...,  0.3828125 ,\n          0.390625  ,  0.45833334],\n        ...,\n        [-2.7916667 , -2.8932292 , -3.0182292 , ...,  0.04947917,\n          0.21614583,  0.23177083],\n        [-2.6380208 , -2.7317708 , -2.8567708 , ..., -0.02604167,\n          0.06510416,  0.05729167],\n        [-2.53125   , -2.6354167 , -2.7682292 , ..., -0.19270833,\n         -0.09114584, -0.07291666]],\n\n       [[-0.41666666, -0.7369792 , -1.0208334 , ..., -1.4401041 ,\n         -1.5677084 , -1.5677084 ],\n        [ 0.12239584, -0.13541667, -0.39583334, ..., -1.4348959 ,\n         -1.453125  , -1.3541666 ],\n        [ 0.6953125 ,  0.5234375 ,  0.44791666, ..., -1.3515625 ,\n         -1.2317709 , -1.140625  ],\n...\n        [-3.0833333 , -3.0286458 , -2.9739583 , ..., -0.8567708 ,\n         -1.21875   , -1.7447916 ],\n        [-3.0364583 , -2.9973958 , -2.9401042 , ..., -0.9322917 ,\n         -1.3854166 , -1.9401041 ],\n        [-3.0026042 , -2.9739583 , -2.9322917 , ..., -1.0442709 ,\n         -1.4401041 , -1.8255209 ]],\n\n       [[ 8.1119795 ,  8.020833  ,  7.950521  , ..., -1.0338541 ,\n         -1.0494791 , -1.0703125 ],\n        [ 7.78125   ,  7.7890625 ,  7.734375  , ..., -0.7942708 ,\n         -0.7135417 , -0.6015625 ],\n        [ 7.205729  ,  7.294271  ,  7.325521  , ..., -0.5026042 ,\n         -0.38020834, -0.29166666],\n        ...,\n        [-1.4270834 , -1.3619791 , -1.3125    , ..., -1.6119791 ,\n         -2.5520833 , -3.8203125 ],\n        [-1.2604166 , -1.2005209 , -1.1328125 , ..., -2.3958333 ,\n         -3.390625  , -4.5390625 ],\n        [-1.0625    , -1.0208334 , -0.9739583 , ..., -2.8697917 ,\n         -3.7369792 , -4.4791665 ]]], dtype=float32)v_wind(time, lat, lon)float320.6016 0.6589 ... -1.914 -2.474standard_name :northward_windunits :m s**-1long_name :10 metre V wind componentnameECMWF :10 metre V wind componentshortNameECMWF :10vnameCDM :10_metre_V_wind_component_surfaceproduct_type :analysisarray([[[ 6.0156250e-01,  6.5885419e-01,  6.0677081e-01, ...,\n         -1.3671875e+00, -1.1848959e+00, -8.8020831e-01],\n        [ 1.0729166e+00,  1.1536459e+00,  1.0807291e+00, ...,\n         -1.4791666e+00, -1.3463541e+00, -1.1796875e+00],\n        [ 1.1510416e+00,  1.2838541e+00,  1.3229166e+00, ...,\n         -1.5963541e+00, -1.4869791e+00, -1.3489584e+00],\n        ...,\n        [-3.6770833e+00, -3.8229167e+00, -3.9713542e+00, ...,\n         -2.3437500e+00, -1.3020834e+00, -3.7760416e-01],\n        [-3.7083333e+00, -3.8255208e+00, -3.9088542e+00, ...,\n         -2.3593750e+00, -1.5390625e+00, -7.4739581e-01],\n        [-3.7395833e+00, -3.7526042e+00, -3.7812500e+00, ...,\n         -2.4817708e+00, -1.6953125e+00, -1.1484375e+00]],\n\n       [[-1.5208334e+00, -1.7005209e+00, -1.9192709e+00, ...,\n         -3.9062500e-01, -4.2708334e-01, -4.9218750e-01],\n        [-1.9010416e+00, -1.9583334e+00, -2.1458333e+00, ...,\n         -5.0260419e-01, -5.8593750e-01, -5.0260419e-01],\n        [-2.2838542e+00, -2.2473958e+00, -2.2109375e+00, ...,\n         -4.9479166e-01, -6.6145831e-01, -6.0937500e-01],\n...\n        [-4.0729165e+00, -4.1276040e+00, -4.1770835e+00, ...,\n         -2.1171875e+00, -1.6562500e+00, -1.3151041e+00],\n        [-4.0885415e+00, -4.1484375e+00, -4.2005210e+00, ...,\n         -2.4244792e+00, -2.1119792e+00, -1.8515625e+00],\n        [-4.0625000e+00, -4.1197915e+00, -4.1614585e+00, ...,\n         -2.7031250e+00, -2.4166667e+00, -2.2708333e+00]],\n\n       [[-1.9791667e-01,  5.2083335e-03,  1.5625000e-01, ...,\n         -1.2760417e-01, -1.6145833e-01, -1.6927083e-01],\n        [-7.9687500e-01, -5.9895831e-01, -4.3750000e-01, ...,\n          5.4687500e-02,  4.6875000e-02,  1.5364583e-01],\n        [-1.2994791e+00, -1.0937500e+00, -9.4010419e-01, ...,\n          2.2395833e-01,  2.9166666e-01,  3.8020834e-01],\n        ...,\n        [-3.0625000e+00, -3.0781250e+00, -3.1197917e+00, ...,\n          5.4687500e-01,  1.2500000e-01, -8.0729169e-01],\n        [-3.1614583e+00, -3.2005208e+00, -3.2291667e+00, ...,\n         -4.1666666e-01, -1.0598959e+00, -1.8958334e+00],\n        [-3.2526042e+00, -3.3255208e+00, -3.3750000e+00, ...,\n         -1.3333334e+00, -1.9140625e+00, -2.4739583e+00]]], dtype=float32)speed(time, lat, lon)float323.945 3.645 3.368 ... 4.227 5.153units :m s**-1long_name :10 metre absolute speedarray([[[3.9451437, 3.6454449, 3.36847  , ..., 1.9201735, 1.8865218,\n         1.7468839],\n        [4.1419544, 3.8504055, 3.444007 , ..., 1.9789158, 1.9153827,\n         1.8310242],\n        [3.6950111, 3.4435928, 3.1019478, ..., 1.9867468, 1.9142274,\n         1.8317447],\n        ...,\n        [4.7469373, 4.912411 , 5.092304 , ..., 2.5135314, 1.6478343,\n         1.3388939],\n        [4.676735 , 4.8191776, 4.95795  , ..., 2.5241547, 1.7888355,\n         1.2424096],\n        [4.636933 , 4.7195234, 4.826424 , ..., 2.6338756, 1.8901653,\n         1.4170161]],\n\n       [[2.3318148, 2.4910347, 2.7374954, ..., 1.7411982, 1.8597933,\n         1.8728681],\n        [2.414438 , 2.5525272, 2.7947886, ..., 1.7888421, 1.8435212,\n         1.7328191],\n        [2.7723866, 2.8588107, 2.8829317, ..., 1.7411242, 1.7196132,\n         1.6104554],\n...\n        [5.146253 , 5.1557384, 5.1632495, ..., 2.8367107, 2.591439 ,\n         2.534239 ],\n        [5.1336794, 5.1560197, 5.166705 , ..., 3.0493386, 2.972432 ,\n         3.014616 ],\n        [5.0962915, 5.1267576, 5.1389093, ..., 3.263656 , 3.196616 ,\n         3.23878  ]],\n\n       [[8.189649 , 8.106084 , 8.037755 , ..., 2.1850507, 2.2752473,\n         2.2316103],\n        [7.892883 , 7.890354 , 7.823316 , ..., 2.3158002, 2.3716338,\n         2.317237 ],\n        [7.391702 , 7.4489727, 7.4578147, ..., 2.337489 , 2.231067 ,\n         2.291389 ],\n        ...,\n        [3.4753053, 3.467406 , 3.4899578, ..., 1.9244485, 2.6942132,\n         4.00572  ],\n        [3.5153275, 3.533966 , 3.542756 , ..., 2.549701 , 3.6089706,\n         4.9639993],\n        [3.5520408, 3.6114044, 3.6468   , ..., 3.2160883, 4.226849 ,\n         5.1525497]]], dtype=float32)direction(time, lat, lon)float3222.31 17.58 13.01 ... -153.4 -151.6units :°Clong_name :10 metre wind directionarray([[[  22.31256  ,   17.577126 ,   13.005119 , ...,  -67.38259  ,\n          -47.755325 ,  -33.74233  ],\n        [  30.220772 ,   29.43544  ,   26.357203 , ...,  -78.10914  ,\n          -64.685646 ,  -49.11764  ],\n        [  35.783054 ,   37.048702 ,   35.60695  , ...,  -85.95185  ,\n          -86.35613  ,  -70.15734  ],\n        ...,\n        [-126.93241  , -126.620476 , -126.65524  , ...,  -89.24673  ,\n          -80.60198  ,   -4.201843 ],\n        [-125.02897  , -124.928856 , -125.43902  , ...,  -90.54617  ,\n          -84.9731   ,  -69.18275  ],\n        [-123.4584   , -124.29117  , -125.278015 , ...,  -93.996056 ,\n          -90.138794 ,  -88.29269  ]],\n\n       [[ -72.070206 ,  -85.1071   ,  -93.38763  , ...,  -58.74728  ,\n          -60.06917  ,  -58.698284 ],\n        [ -80.372795 ,  -90.8068   ,  -96.67983  , ...,  -58.435246 ,\n          -56.67389  ,  -58.751236 ],\n        [ -80.680115 ,  -86.12191  ,  -88.40796  , ...,  -59.58118  ,\n          -53.925976 ,  -70.68571  ],\n...\n        [-127.28055  , -126.49218  , -125.74938  , ...,  -71.24183  ,\n          -79.70399  , -133.6834   ],\n        [-126.68684  , -125.9416   , -125.15563  , ..., -114.46243  ,\n         -107.83289  , -131.2433   ],\n        [-126.467865 , -125.800575 , -125.19381  , ..., -113.44105  ,\n         -120.908356 , -126.25626  ]],\n\n       [[  -0.9108308,    0.405311 ,    1.362003 , ...,  -42.883907 ,\n          -38.677364 ,  -36.70583  ],\n        [  -5.2671247,   -3.8980722,   -2.9317954, ...,  -26.818964 ,\n          -36.38267  ,   -2.3517277],\n        [  -9.45855  ,   -7.810347 ,   -6.7994595, ...,    9.280067 ,\n            2.028537 ,   22.812065 ],\n        ...,\n        [-115.06766  , -113.99908  , -113.05724  , ...,   26.856642 ,\n           10.176036 ,  -94.912285 ],\n        [-111.756325 , -110.610634 , -109.46108  , ...,  -81.22135  ,\n         -133.58519  , -158.10306  ],\n        [-108.30612  , -107.21555  , -106.26769  , ..., -140.94438  ,\n         -153.4189   , -151.60954  ]]], dtype=float32)so(time, lat, lon)float6436.55 36.54 36.54 ... 34.0 34.08long_name :Salinitystandard_name :sea_water_salinityunits :1e-3unit_long :Practical Salinity Unitvalid_min :1valid_max :28336cell_methods :area: mean_ChunkSizes :[  1   7 341 720]array([[[36.55201721, 36.54133606, 36.53675842, ...,         nan,\n                 nan,         nan],\n        [36.5459137 , 36.57948685, 36.59321976, ...,         nan,\n                 nan,         nan],\n        [36.62831497, 36.71834564, 36.75344086, ...,         nan,\n                 nan,         nan],\n        ...,\n        [35.49760437, 35.48692322, 35.45030212, ..., 32.78908539,\n         32.854702  , 32.9493103 ],\n        [35.4884491 , 35.43046188, 35.37553024, ..., 34.19446564,\n         34.28754425, 34.29059601],\n        [35.39994431, 35.37400436, 35.36179733, ..., 33.71685028,\n         33.60850906, 33.68022537]],\n\n       [[36.5459137 , 36.53370667, 36.51997375, ...,         nan,\n                 nan,         nan],\n        [36.55659485, 36.57033157, 36.57338333, ...,         nan,\n                 nan,         nan],\n        [36.62373734, 36.71987152, 36.76717377, ...,         nan,\n                 nan,         nan],\n...\n        [35.06271744, 35.02761841, 34.97268677, ..., 33.4818573 ,\n         33.47270203, 33.48796082],\n        [35.18326187, 35.16342545, 35.1084938 , ..., 33.60698318,\n         33.68175125, 33.7733078 ],\n        [35.24582672, 35.19089508, 35.13595963, ..., 33.75041962,\n         33.87859726, 33.99151611]],\n\n       [[36.590168  , 36.59474564, 36.58864212, ...,         nan,\n                 nan,         nan],\n        [36.56117249, 36.57643509, 36.59321976, ...,         nan,\n                 nan,         nan],\n        [36.7000351 , 36.61000443, 36.57796097, ...,         nan,\n                 nan,         nan],\n        ...,\n        [35.08407974, 35.06729507, 35.01541138, ..., 33.4299736 ,\n         33.41471481, 33.44981384],\n        [35.21378326, 35.19547272, 35.14206314, ..., 33.6420784 ,\n         33.72447968, 33.8465538 ],\n        [35.24277496, 35.18326187, 35.13290787, ..., 33.8831749 ,\n         34.00067139, 34.08307266]]])Indexes: (3)timePandasIndexPandasIndex(DatetimeIndex(['2003-01-01', '2003-01-02', '2003-01-03', '2003-01-04',\n               '2003-01-05', '2003-01-06', '2003-01-07', '2003-01-08',\n               '2003-01-09', '2003-01-10', '2003-01-11', '2003-01-12',\n               '2003-01-13', '2003-01-14', '2003-01-15', '2003-01-16',\n               '2003-01-17', '2003-01-18', '2003-01-19', '2003-01-20',\n               '2003-01-21', '2003-01-22', '2003-01-23', '2003-01-24',\n               '2003-01-25', '2003-01-26', '2003-01-27', '2003-01-28',\n               '2003-01-29', '2003-01-30', '2003-01-31', '2003-02-01',\n               '2003-02-02', '2003-02-03', '2003-02-04', '2003-02-05',\n               '2003-02-06', '2003-02-07', '2003-02-08', '2003-02-09',\n               '2003-02-10', '2003-02-11', '2003-02-12', '2003-02-13',\n               '2003-02-14', '2003-02-15', '2003-02-16', '2003-02-17',\n               '2003-02-18', '2003-02-19', '2003-02-20', '2003-02-21',\n               '2003-02-22', '2003-02-23', '2003-02-24', '2003-02-25',\n               '2003-02-26', '2003-02-27', '2003-02-28'],\n              dtype='datetime64[ns]', name='time', freq=None))latPandasIndexPandasIndex(Index([ 25.0, 24.75,  24.5, 24.25,  24.0, 23.75,  23.5, 23.25,  23.0, 22.75,\n        22.5, 22.25,  22.0, 21.75,  21.5, 21.25,  21.0, 20.75,  20.5, 20.25,\n        20.0, 19.75,  19.5, 19.25,  19.0, 18.75,  18.5, 18.25,  18.0, 17.75,\n        17.5, 17.25,  17.0, 16.75,  16.5, 16.25,  16.0, 15.75,  15.5, 15.25,\n        15.0, 14.75,  14.5, 14.25,  14.0, 13.75,  13.5, 13.25,  13.0, 12.75,\n        12.5, 12.25,  12.0, 11.75,  11.5, 11.25,  11.0, 10.75,  10.5, 10.25,\n        10.0,  9.75,   9.5,  9.25,   9.0,  8.75,   8.5,  8.25,   8.0,  7.75,\n         7.5,  7.25,   7.0,  6.75,   6.5,  6.25,   6.0,  5.75,   5.5,  5.25,\n         5.0],\n      dtype='float32', name='lat'))lonPandasIndexPandasIndex(Index([ 60.0, 60.25,  60.5, 60.75,  61.0, 61.25,  61.5, 61.75,  62.0, 62.25,\n        62.5, 62.75,  63.0, 63.25,  63.5, 63.75,  64.0, 64.25,  64.5, 64.75,\n        65.0, 65.25,  65.5, 65.75,  66.0, 66.25,  66.5, 66.75,  67.0, 67.25,\n        67.5, 67.75,  68.0, 68.25,  68.5, 68.75,  69.0, 69.25,  69.5, 69.75,\n        70.0, 70.25,  70.5, 70.75,  71.0, 71.25,  71.5, 71.75,  72.0, 72.25,\n        72.5, 72.75,  73.0, 73.25,  73.5, 73.75,  74.0, 74.25,  74.5, 74.75,\n        75.0, 75.25,  75.5, 75.75,  76.0, 76.25,  76.5, 76.75,  77.0, 77.25,\n        77.5, 77.75,  78.0, 78.25,  78.5, 78.75,  79.0, 79.25,  79.5, 79.75,\n        80.0],\n      dtype='float32', name='lon'))Attributes: (17)title :Sample of Climate Data for Coastal Upwelling Machine Learning Project in Indian Oceansummary :Daily mean of 0.25 x 0.25 degrees gridded data from multiple climate variables that may influence the patterns of coastal upwelling in the focused areacreator_name :Minh Phancreator_email :minhphan@uw.educreator_type :personsource :OSCAR, ERA5 Reanalysis, Copernicus Climate Change Service (C3S), Copernicus Marine Environment Monitoring Service (CMEMS)geospatial_lat_min :5.0geospatial_lat_max :25.0geospatial_lat_units :degrees_northgeospatial_lat_resolution :0.25geospatial_lon_min :60.0geospatial_lon_max :80.0geospatial_lon_units :degrees_eastgeospatial_lon_resolution :0.25time_coverage_start :2000-01-01T00:00:00time_coverage_end :2002-12-31T23:59:59date_created :2023-14-14",
    "crumbs": [
      "Data Tutorials",
      "Indian Ocean Zarr",
      "Combine, clean, and export the data"
    ]
  },
  {
    "objectID": "notebooks-data/04_Combining_Data.html#adding-consistency-across-variables-convert-data-types-rechunking",
    "href": "notebooks-data/04_Combining_Data.html#adding-consistency-across-variables-convert-data-types-rechunking",
    "title": "Combine, clean, and export the data",
    "section": "Adding consistency across variables: convert data types, rechunking",
    "text": "Adding consistency across variables: convert data types, rechunking\nNote that some variables has float64 dtype, while others have float32. We want to add consistency by converting all of them to float32 to save some disk space. The precision from float64 is most likely not going to be lost after the conversion, as our figures do not have enough precision to exceed the limit.\n\nfor var in final_ds.data_vars:\n    if str(final_ds[var].dtype) == 'float64':\n        final_ds[var].values = final_ds[var].astype('float32')\n\nWe also need to rechunk the dataset before we can export the data. Some of the variables have original chunk sizes, which is specified in their encodings, and we need to reset these values so that zarr would not reconvert the encoding when export is happening. This is a known issue.\n\nfor var in final_ds.data_vars:\n    if 'chunks' in list(final_ds[var].encoding.keys()):\n        del final_ds[var].encoding['chunks']\n\nFinally, reset chunk size for exporting to zarr:\n\narray_chunk_size = {'time': 100, 'lat': final_ds.lat.shape[0], 'lon': final_ds.lon.shape[0]}\nfinal_ds = final_ds.chunk(array_chunk_size)",
    "crumbs": [
      "Data Tutorials",
      "Indian Ocean Zarr",
      "Combine, clean, and export the data"
    ]
  },
  {
    "objectID": "notebooks-data/04_Combining_Data.html#export-data",
    "href": "notebooks-data/04_Combining_Data.html#export-data",
    "title": "Combine, clean, and export the data",
    "section": "Export data",
    "text": "Export data\n\nfinal_ds.to_zarr('demonstrated data/final-sample.zarr')\n\n&lt;xarray.backends.zarr.ZarrStore at 0x7fc73003ce40&gt;",
    "crumbs": [
      "Data Tutorials",
      "Indian Ocean Zarr",
      "Combine, clean, and export the data"
    ]
  },
  {
    "objectID": "support.html#thank-you-for-inspiration-and-content",
    "href": "support.html#thank-you-for-inspiration-and-content",
    "title": "Acknowledgements",
    "section": "Thank you for inspiration and content!",
    "text": "Thank you for inspiration and content!\nThank you to the open science community that has created software, teaching resources, and workflows that we have been able to build off of and be inspired by. These include: NASA Openscapes • OceanHackWeek • SnowEx Hackweek • eScience Institute, University of Washington • ICESat-2 Hackweek • Project Jupyter • Pangeo Project • CryoCloud   Thanks to OceanHackWeek for content, inspiration, and the opportunity to test out ideas. A big thanks to the SDM team at OceanHackWeek 2023 who helped test and develop SDM tutorials for the ITCOocean Hack2week 2023: Catherine Courtier, Mackenzie Fiss, Denisse Fierro Arcos, Paulo Freire, Jade Hong, Caitlin O’Brien, Mary Solokas, Laura Tsang, Tylar Murray, Ben Tupper! OHW23 SDM team project."
  },
  {
    "objectID": "support.html#thank-you-for-support",
    "href": "support.html#thank-you-for-support",
    "title": "Acknowledgements",
    "section": "Thank you for support!",
    "text": "Thank you for support!\n\nThank you! INCOIS and ITCOocean provided all the logistical support and supported Nimit Kumar, TVS Uday Bhaskar and Swarnali Majumder’s participation. CMLRE supported Smitha BR’s participation and IITM supported Aditi Modi. A NOAA International Fellowship supported Eli Holmes’ visit. 2i2c provided the JupyterHub infrastructure. ESIPfed provided funding for the JupyterHub via their ESIP Lab fund. Undergraduate summer interns, Minh Phan and Jiarui Yu, were supported by the Usha and S. Rao Varanasi endowment for Math-Fish student support at the University of Washington (Seattle, WA)."
  }
]